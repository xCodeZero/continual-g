"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-nprogress-bar";
exports.ids = ["vendor-chunks/next-nprogress-bar"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-nprogress-bar/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/next-nprogress-bar/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar NProgress = __webpack_require__(/*! nprogress */ \"(ssr)/./node_modules/nprogress/nprogress.js\");\nvar navigation = __webpack_require__(/*! next/navigation */ \"(ssr)/./node_modules/next/navigation.js\");\nvar Router = __webpack_require__(/*! next/router */ \"(ssr)/./node_modules/next/router.js\");\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction isSameURL(target, current) {\n    var cleanTarget = target.protocol + \"//\" + target.host + target.pathname + target.search;\n    var cleanCurrent = current.protocol + \"//\" + current.host + current.pathname + current.search;\n    return cleanTarget === cleanCurrent;\n}\nfunction isSameURLWithoutSearch(target, current) {\n    var cleanTarget = target.protocol + \"//\" + target.host + target.pathname;\n    var cleanCurrent = current.protocol + \"//\" + current.host + current.pathname;\n    return cleanTarget === cleanCurrent;\n}\nfunction parsePath(path) {\n    var hashIndex = path.indexOf(\"#\");\n    var queryIndex = path.indexOf(\"?\");\n    var hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n            hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n        };\n    }\n    return {\n        pathname: path,\n        query: \"\",\n        hash: \"\"\n    };\n}\nfunction addPathPrefix(path, prefix) {\n    if (!path.startsWith(\"/\") || !prefix) {\n        return path;\n    }\n    var _a = parsePath(path), pathname = _a.pathname, query = _a.query, hash = _a.hash;\n    return \"\".concat(prefix).concat(pathname).concat(query).concat(hash);\n}\nfunction getAnchorProperty(a, key) {\n    if (typeof key === \"string\" && key === \"data-disable-nprogress\") {\n        var dataKey = key.substring(5);\n        return a.dataset[dataKey];\n    }\n    var prop = a[key];\n    if (prop instanceof SVGAnimatedString) {\n        var value = prop.baseVal;\n        if (key === \"href\") {\n            return addPathPrefix(value, location.origin);\n        }\n        return value;\n    }\n    return prop;\n}\nvar AppProgressBar$1 = React.memo(function(_a) {\n    var _b = _a.color, color = _b === void 0 ? \"#0A2FFF\" : _b, _c = _a.height, height = _c === void 0 ? \"2px\" : _c, options = _a.options, _d = _a.shallowRouting, shallowRouting = _d === void 0 ? false : _d, _e = _a.startPosition, startPosition = _e === void 0 ? 0 : _e, _f = _a.delay, delay = _f === void 0 ? 0 : _f, style = _a.style, targetPreprocessor = _a.targetPreprocessor;\n    var styles = React.createElement(\"style\", null, style || \"\\n          #nprogress {\\n            pointer-events: none;\\n          }\\n\\n          #nprogress .bar {\\n            background: \".concat(color, \";\\n\\n            position: fixed;\\n            z-index: 1031;\\n            top: 0;\\n            left: 0;\\n\\n            width: 100%;\\n            height: \").concat(height, \";\\n          }\\n\\n          /* Fancy blur effect */\\n          #nprogress .peg {\\n            display: block;\\n            position: absolute;\\n            right: 0px;\\n            width: 100px;\\n            height: 100%;\\n            box-shadow: 0 0 10px \").concat(color, \", 0 0 5px \").concat(color, \";\\n            opacity: 1.0;\\n\\n            -webkit-transform: rotate(3deg) translate(0px, -4px);\\n                -ms-transform: rotate(3deg) translate(0px, -4px);\\n                    transform: rotate(3deg) translate(0px, -4px);\\n          }\\n\\n          /* Remove these to get rid of the spinner */\\n          #nprogress .spinner {\\n            display: block;\\n            position: fixed;\\n            z-index: 1031;\\n            top: 15px;\\n            right: 15px;\\n          }\\n\\n          #nprogress .spinner-icon {\\n            width: 18px;\\n            height: 18px;\\n            box-sizing: border-box;\\n\\n            border: solid 2px transparent;\\n            border-top-color: \").concat(color, \";\\n            border-left-color: \").concat(color, \";\\n            border-radius: 50%;\\n\\n            -webkit-animation: nprogress-spinner 400ms linear infinite;\\n                    animation: nprogress-spinner 400ms linear infinite;\\n          }\\n\\n          .nprogress-custom-parent {\\n            overflow: hidden;\\n            position: relative;\\n          }\\n\\n          .nprogress-custom-parent #nprogress .spinner,\\n          .nprogress-custom-parent #nprogress .bar {\\n            position: absolute;\\n          }\\n\\n          @-webkit-keyframes nprogress-spinner {\\n            0%   { -webkit-transform: rotate(0deg); }\\n            100% { -webkit-transform: rotate(360deg); }\\n          }\\n          @keyframes nprogress-spinner {\\n            0%   { transform: rotate(0deg); }\\n            100% { transform: rotate(360deg); }\\n          }\\n        \"));\n    NProgress.configure(options || {});\n    var pathname = navigation.usePathname();\n    var searchParams = navigation.useSearchParams();\n    React.useEffect(function() {\n        NProgress.done();\n    }, [\n        pathname,\n        searchParams\n    ]);\n    React.useEffect(function() {\n        var timer;\n        var startProgress = function() {\n            timer = setTimeout(function() {\n                if (startPosition > 0) NProgress.set(startPosition);\n                NProgress.start();\n            }, delay);\n        };\n        var stopProgress = function() {\n            clearTimeout(timer);\n            NProgress.done();\n        };\n        var handleAnchorClick = function(event) {\n            var anchorElement = event.currentTarget;\n            var anchorTarget = getAnchorProperty(anchorElement, \"target\");\n            // Skip anchors with target=\"_blank\"\n            if (anchorTarget === \"_blank\") return;\n            // Skip control/command/option/alt+click\n            if (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n            var targetHref = getAnchorProperty(anchorElement, \"href\");\n            var targetUrl = targetPreprocessor ? targetPreprocessor(new URL(targetHref)) : new URL(targetHref);\n            var currentUrl = new URL(location.href);\n            if (shallowRouting && isSameURLWithoutSearch(targetUrl, currentUrl)) return;\n            if (isSameURL(targetUrl, currentUrl)) return;\n            startProgress();\n        };\n        var handleMutation = function() {\n            var anchorElements = Array.from(document.querySelectorAll(\"a\"));\n            var validAnchorElements = anchorElements.filter(function(anchor) {\n                var href = getAnchorProperty(anchor, \"href\");\n                var isNProgressDisabled = anchor.getAttribute(\"data-disable-nprogress\") === \"true\";\n                var isNotTelOrMailto = href && !href.startsWith(\"tel:\") && !href.startsWith(\"mailto:\") && !href.startsWith(\"blob:\");\n                return !isNProgressDisabled && isNotTelOrMailto && getAnchorProperty(anchor, \"target\") !== \"_blank\";\n            });\n            validAnchorElements.forEach(function(anchor) {\n                anchor.addEventListener(\"click\", handleAnchorClick);\n            });\n        };\n        var mutationObserver = new MutationObserver(handleMutation);\n        mutationObserver.observe(document, {\n            childList: true,\n            subtree: true\n        });\n        window.history.pushState = new Proxy(window.history.pushState, {\n            apply: function(target, thisArg, argArray) {\n                stopProgress();\n                return target.apply(thisArg, argArray);\n            }\n        });\n    }, []);\n    return styles;\n}, function(prevProps, nextProps) {\n    if (!(nextProps === null || nextProps === void 0 ? void 0 : nextProps.shouldCompareComplexProps)) {\n        return true;\n    }\n    return (prevProps === null || prevProps === void 0 ? void 0 : prevProps.color) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.color) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.height) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.height) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.shallowRouting) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.shallowRouting) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.startPosition) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.startPosition) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.delay) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.delay) && JSON.stringify(prevProps === null || prevProps === void 0 ? void 0 : prevProps.options) === JSON.stringify(nextProps === null || nextProps === void 0 ? void 0 : nextProps.options) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.style) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.style);\n});\nfunction useRouter() {\n    var router = navigation.useRouter();\n    var startProgress = React.useCallback(function(startPosition) {\n        if (startPosition && startPosition > 0) NProgress.set(startPosition);\n        NProgress.start();\n    }, [\n        router\n    ]);\n    var progress = React.useCallback(function(href, options, NProgressOptions) {\n        if ((NProgressOptions === null || NProgressOptions === void 0 ? void 0 : NProgressOptions.showProgressBar) === false) {\n            return router.push(href, options);\n        }\n        var currentUrl = new URL(location.href);\n        var targetUrl = new URL(href, location.href);\n        if (isSameURL(targetUrl, currentUrl)) return router.push(href, options);\n        startProgress(NProgressOptions === null || NProgressOptions === void 0 ? void 0 : NProgressOptions.startPosition);\n    }, [\n        router\n    ]);\n    var push = React.useCallback(function(href, options, NProgressOptions) {\n        progress(href, options, NProgressOptions);\n        return router.push(href, options);\n    }, [\n        router,\n        startProgress\n    ]);\n    var replace = React.useCallback(function(href, options, NProgressOptions) {\n        progress(href, options, NProgressOptions);\n        return router.replace(href, options);\n    }, [\n        router,\n        startProgress\n    ]);\n    var back = React.useCallback(function(NProgressOptions) {\n        if ((NProgressOptions === null || NProgressOptions === void 0 ? void 0 : NProgressOptions.showProgressBar) === false) return router.back();\n        startProgress(NProgressOptions === null || NProgressOptions === void 0 ? void 0 : NProgressOptions.startPosition);\n        return router.back();\n    }, [\n        router\n    ]);\n    var enhancedRouter = React.useMemo(function() {\n        return __assign(__assign({}, router), {\n            push: push,\n            replace: replace,\n            back: back\n        });\n    }, [\n        router,\n        push,\n        replace,\n        back\n    ]);\n    return enhancedRouter;\n}\nfunction withSuspense(Component) {\n    return function WithSuspenseComponent(props) {\n        return React.createElement(React.Suspense, null, React.createElement(Component, __assign({}, props)));\n    };\n}\nvar PagesProgressBar = React.memo(function(_a) {\n    var _b = _a.color, color = _b === void 0 ? \"#0A2FFF\" : _b, _c = _a.height, height = _c === void 0 ? \"2px\" : _c, options = _a.options, _d = _a.shallowRouting, shallowRouting = _d === void 0 ? false : _d, _e = _a.startPosition, startPosition = _e === void 0 ? 0 : _e, _f = _a.delay, delay = _f === void 0 ? 0 : _f, style = _a.style;\n    var styles = React.createElement(\"style\", null, style || \"\\n          #nprogress {\\n            pointer-events: none;\\n          }\\n          \\n          #nprogress .bar {\\n            background: \".concat(color, \";\\n          \\n            position: fixed;\\n            z-index: 1031;\\n            top: 0;\\n            left: 0;\\n          \\n            width: 100%;\\n            height: \").concat(height, \";\\n          }\\n          \\n          /* Fancy blur effect */\\n          #nprogress .peg {\\n            display: block;\\n            position: absolute;\\n            right: 0px;\\n            width: 100px;\\n            height: 100%;\\n            box-shadow: 0 0 10px \").concat(color, \", 0 0 5px \").concat(color, \";\\n            opacity: 1.0;\\n          \\n            -webkit-transform: rotate(3deg) translate(0px, -4px);\\n                -ms-transform: rotate(3deg) translate(0px, -4px);\\n                    transform: rotate(3deg) translate(0px, -4px);\\n          }\\n          \\n          /* Remove these to get rid of the spinner */\\n          #nprogress .spinner {\\n            display: block;\\n            position: fixed;\\n            z-index: 1031;\\n            top: 15px;\\n            right: 15px;\\n          }\\n          \\n          #nprogress .spinner-icon {\\n            width: 18px;\\n            height: 18px;\\n            box-sizing: border-box;\\n          \\n            border: solid 2px transparent;\\n            border-top-color: \").concat(color, \";\\n            border-left-color: \").concat(color, \";\\n            border-radius: 50%;\\n          \\n            -webkit-animation: nprogress-spinner 400ms linear infinite;\\n                    animation: nprogress-spinner 400ms linear infinite;\\n          }\\n          \\n          .nprogress-custom-parent {\\n            overflow: hidden;\\n            position: relative;\\n          }\\n          \\n          .nprogress-custom-parent #nprogress .spinner,\\n          .nprogress-custom-parent #nprogress .bar {\\n            position: absolute;\\n          }\\n          \\n          @-webkit-keyframes nprogress-spinner {\\n            0%   { -webkit-transform: rotate(0deg); }\\n            100% { -webkit-transform: rotate(360deg); }\\n          }\\n          @keyframes nprogress-spinner {\\n            0%   { transform: rotate(0deg); }\\n            100% { transform: rotate(360deg); }\\n          }\\n        \"));\n    NProgress.configure(options || {});\n    React.useEffect(function() {\n        var timer;\n        var startProgress = function() {\n            timer = setTimeout(function() {\n                if (startPosition > 0) NProgress.set(startPosition);\n                NProgress.start();\n            }, delay);\n        };\n        var stopProgress = function() {\n            clearTimeout(timer);\n            NProgress.done();\n        };\n        var handleRouteStart = function(url) {\n            var targetUrl = new URL(url, location.href);\n            var currentUrl = new URL(Router.route, location.href);\n            if (!shallowRouting || !isSameURL(targetUrl, currentUrl)) {\n                startProgress();\n            }\n        };\n        var handleRouteDone = function() {\n            return stopProgress();\n        };\n        Router.events.on(\"routeChangeStart\", handleRouteStart);\n        Router.events.on(\"routeChangeComplete\", handleRouteDone);\n        Router.events.on(\"routeChangeError\", handleRouteDone);\n        return function() {\n            // Make sure to remove the event handler on unmount!\n            Router.events.off(\"routeChangeStart\", handleRouteStart);\n            Router.events.off(\"routeChangeComplete\", handleRouteDone);\n            Router.events.off(\"routeChangeError\", handleRouteDone);\n        };\n    }, []);\n    return styles;\n}, function(prevProps, nextProps) {\n    if (!(nextProps === null || nextProps === void 0 ? void 0 : nextProps.shouldCompareComplexProps)) {\n        return true;\n    }\n    return (prevProps === null || prevProps === void 0 ? void 0 : prevProps.color) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.color) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.height) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.height) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.shallowRouting) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.shallowRouting) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.startPosition) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.startPosition) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.delay) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.delay) && JSON.stringify(prevProps === null || prevProps === void 0 ? void 0 : prevProps.options) === JSON.stringify(nextProps === null || nextProps === void 0 ? void 0 : nextProps.options) && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.style) === (nextProps === null || nextProps === void 0 ? void 0 : nextProps.style);\n});\n/**\n * @param color Color of the progress bar. @default #0A2FFF\n * @param height Height of the progress bar. @default 2px\n * @param options NProgress options. @default undefined\n * @param shallowRouting If the progress bar is not displayed when you use shallow routing - @default false\n * @param startPosition The position of the progress bar at the start of the page load - @default 0\n * @param delay When the page loads faster than the progress bar, it does not display - @default 0\n * @param style Custom css - @default undefined\n * @param shouldCompareComplexProps If you want to compare props in the React.memo return - @default false\n * @param targetPreprocessor If you want to./AppProgressBaress the target URL - @default undefined\n */ var AppProgressBar = withSuspense(AppProgressBar$1);\nexports.AppProgressBar = AppProgressBar;\nexports.PagesProgressBar = PagesProgressBar;\nexports.useRouter = useRouter; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-nprogress-bar/dist/index.js\n");

/***/ })

};
;