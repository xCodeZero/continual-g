"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nodemailer";
exports.ids = ["vendor-chunks/nodemailer"];
exports.modules = {

/***/ "(rsc)/./node_modules/nodemailer/lib/addressparser/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/addressparser/index.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */ function _handleAddress(tokens) {\n    let token;\n    let isGroup = false;\n    let state = \"text\";\n    let address;\n    let addresses = [];\n    let data = {\n        address: [],\n        comment: [],\n        group: [],\n        text: []\n    };\n    let i;\n    let len;\n    // Filter out <addresses>, (comments) and regular text\n    for(i = 0, len = tokens.length; i < len; i++){\n        token = tokens[i];\n        if (token.type === \"operator\") {\n            switch(token.value){\n                case \"<\":\n                    state = \"address\";\n                    break;\n                case \"(\":\n                    state = \"comment\";\n                    break;\n                case \":\":\n                    state = \"group\";\n                    isGroup = true;\n                    break;\n                default:\n                    state = \"text\";\n            }\n        } else if (token.value) {\n            if (state === \"address\") {\n                // handle use case where unquoted name includes a \"<\"\n                // Apple Mail truncates everything between an unexpected < and an address\n                // and so will we\n                token.value = token.value.replace(/^[^<]*<\\s*/, \"\");\n            }\n            data[state].push(token.value);\n        }\n    }\n    // If there is no text but a comment, replace the two\n    if (!data.text.length && data.comment.length) {\n        data.text = data.comment;\n        data.comment = [];\n    }\n    if (isGroup) {\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n        data.text = data.text.join(\" \");\n        addresses.push({\n            name: data.text || address && address.name,\n            group: data.group.length ? addressparser(data.group.join(\",\")) : []\n        });\n    } else {\n        // If no address was found, try to detect one from regular text\n        if (!data.address.length && data.text.length) {\n            for(i = data.text.length - 1; i >= 0; i--){\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    data.address = data.text.splice(i, 1);\n                    break;\n                }\n            }\n            let _regexHandler = function(address) {\n                if (!data.address.length) {\n                    data.address = [\n                        address.trim()\n                    ];\n                    return \" \";\n                } else {\n                    return address;\n                }\n            };\n            // still no address\n            if (!data.address.length) {\n                for(i = data.text.length - 1; i >= 0; i--){\n                    // fixed the regex to parse email address correctly when email address has more than one @\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n                    if (data.address.length) {\n                        break;\n                    }\n                }\n            }\n        }\n        // If there's still is no text but a comment exixts, replace the two\n        if (!data.text.length && data.comment.length) {\n            data.text = data.comment;\n            data.comment = [];\n        }\n        // Keep only the first address occurence, push others to regular text\n        if (data.address.length > 1) {\n            data.text = data.text.concat(data.address.splice(1));\n        }\n        // Join values with spaces\n        data.text = data.text.join(\" \");\n        data.address = data.address.join(\" \");\n        if (!data.address && isGroup) {\n            return [];\n        } else {\n            address = {\n                address: data.address || data.text || \"\",\n                name: data.text || data.address || \"\"\n            };\n            if (address.address === address.name) {\n                if ((address.address || \"\").match(/@/)) {\n                    address.name = \"\";\n                } else {\n                    address.address = \"\";\n                }\n            }\n            addresses.push(address);\n        }\n    }\n    return addresses;\n}\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */ class Tokenizer {\n    constructor(str){\n        this.str = (str || \"\").toString();\n        this.operatorCurrent = \"\";\n        this.operatorExpecting = \"\";\n        this.node = null;\n        this.escaped = false;\n        this.list = [];\n        /**\n         * Operator tokens and which tokens are expected to end the sequence\n         */ this.operators = {\n            '\"': '\"',\n            \"(\": \")\",\n            \"<\": \">\",\n            \",\": \"\",\n            \":\": \";\",\n            // Semicolons are not a legal delimiter per the RFC2822 grammar other\n            // than for terminating a group, but they are also not valid for any\n            // other use in this context.  Given that some mail clients have\n            // historically allowed the semicolon as a delimiter equivalent to the\n            // comma in their UI, it makes sense to treat them the same as a comma\n            // when used outside of a group.\n            \";\": \"\"\n        };\n    }\n    /**\n     * Tokenizes the original input string\n     *\n     * @return {Array} An array of operator|text tokens\n     */ tokenize() {\n        let chr, list = [];\n        for(let i = 0, len = this.str.length; i < len; i++){\n            chr = this.str.charAt(i);\n            this.checkChar(chr);\n        }\n        this.list.forEach((node)=>{\n            node.value = (node.value || \"\").toString().trim();\n            if (node.value) {\n                list.push(node);\n            }\n        });\n        return list;\n    }\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */ checkChar(chr) {\n        if (this.escaped) {\n        // ignore next condition blocks\n        } else if (chr === this.operatorExpecting) {\n            this.node = {\n                type: \"operator\",\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = \"\";\n            this.escaped = false;\n            return;\n        } else if (!this.operatorExpecting && chr in this.operators) {\n            this.node = {\n                type: \"operator\",\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = this.operators[chr];\n            this.escaped = false;\n            return;\n        } else if ([\n            '\"',\n            \"'\"\n        ].includes(this.operatorExpecting) && chr === \"\\\\\") {\n            this.escaped = true;\n            return;\n        }\n        if (!this.node) {\n            this.node = {\n                type: \"text\",\n                value: \"\"\n            };\n            this.list.push(this.node);\n        }\n        if (chr === \"\\n\") {\n            // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n            // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n            chr = \" \";\n        }\n        if (chr.charCodeAt(0) >= 0x21 || [\n            \" \",\n            \"\t\"\n        ].includes(chr)) {\n            // skip command bytes\n            this.node.value += chr;\n        }\n        this.escaped = false;\n    }\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */ function addressparser(str, options) {\n    options = options || {};\n    let tokenizer = new Tokenizer(str);\n    let tokens = tokenizer.tokenize();\n    let addresses = [];\n    let address = [];\n    let parsedAddresses = [];\n    tokens.forEach((token)=>{\n        if (token.type === \"operator\" && (token.value === \",\" || token.value === \";\")) {\n            if (address.length) {\n                addresses.push(address);\n            }\n            address = [];\n        } else {\n            address.push(token);\n        }\n    });\n    if (address.length) {\n        addresses.push(address);\n    }\n    addresses.forEach((address)=>{\n        address = _handleAddress(address);\n        if (address.length) {\n            parsedAddresses = parsedAddresses.concat(address);\n        }\n    });\n    if (options.flatten) {\n        let addresses = [];\n        let walkAddressList = (list)=>{\n            list.forEach((address)=>{\n                if (address.group) {\n                    return walkAddressList(address.group);\n                } else {\n                    addresses.push(address);\n                }\n            });\n        };\n        walkAddressList(parsedAddresses);\n        return addresses;\n    }\n    return parsedAddresses;\n}\n// expose to the world\nmodule.exports = addressparser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/addressparser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/base64/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/base64/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */ function encode(buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer, \"utf-8\");\n    }\n    return buffer.toString(\"base64\");\n}\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */ function wrap(str, lineLength) {\n    str = (str || \"\").toString();\n    lineLength = lineLength || 76;\n    if (str.length <= lineLength) {\n        return str;\n    }\n    let result = [];\n    let pos = 0;\n    let chunkLength = lineLength * 1024;\n    while(pos < str.length){\n        let wrappedLines = str.substr(pos, chunkLength).replace(new RegExp(\".{\" + lineLength + \"}\", \"g\"), \"$&\\r\\n\").trim();\n        result.push(wrappedLines);\n        pos += chunkLength;\n    }\n    return result.join(\"\\r\\n\").trim();\n}\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */ class Encoder extends Transform {\n    constructor(options){\n        super();\n        // init Transform\n        this.options = options || {};\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n        this._curLine = \"\";\n        this._remainingBytes = false;\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n    _transform(chunk, encoding, done) {\n        if (encoding !== \"buffer\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n        this.inputBytes += chunk.length;\n        if (this._remainingBytes && this._remainingBytes.length) {\n            chunk = Buffer.concat([\n                this._remainingBytes,\n                chunk\n            ], this._remainingBytes.length + chunk.length);\n            this._remainingBytes = false;\n        }\n        if (chunk.length % 3) {\n            this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n            chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n        } else {\n            this._remainingBytes = false;\n        }\n        let b64 = this._curLine + encode(chunk);\n        if (this.options.lineLength) {\n            b64 = wrap(b64, this.options.lineLength);\n            // remove last line as it is still most probably incomplete\n            let lastLF = b64.lastIndexOf(\"\\n\");\n            if (lastLF < 0) {\n                this._curLine = b64;\n                b64 = \"\";\n            } else if (lastLF === b64.length - 1) {\n                this._curLine = \"\";\n            } else {\n                this._curLine = b64.substr(lastLF + 1);\n                b64 = b64.substr(0, lastLF + 1);\n            }\n        }\n        if (b64) {\n            this.outputBytes += b64.length;\n            this.push(Buffer.from(b64, \"ascii\"));\n        }\n        setImmediate(done);\n    }\n    _flush(done) {\n        if (this._remainingBytes && this._remainingBytes.length) {\n            this._curLine += encode(this._remainingBytes);\n        }\n        if (this._curLine) {\n            this._curLine = wrap(this._curLine, this.options.lineLength);\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, \"ascii\");\n            this._curLine = \"\";\n        }\n        done();\n    }\n}\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/base64/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/index.js":
/*!***************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\nconst MessageParser = __webpack_require__(/*! ./message-parser */ \"(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js\");\nconst RelaxedBody = __webpack_require__(/*! ./relaxed-body */ \"(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js\");\nconst sign = __webpack_require__(/*! ./sign */ \"(rsc)/./node_modules/nodemailer/lib/dkim/sign.js\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst DKIM_ALGO = \"sha256\";\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/ class DKIMSigner {\n    constructor(options, keys, input, output){\n        this.options = options || {};\n        this.keys = keys;\n        this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n        this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n        this.cacheDir = this.options.cacheDir || false;\n        this.chunks = [];\n        this.chunklen = 0;\n        this.readPos = 0;\n        this.cachePath = this.cacheDir ? path.join(this.cacheDir, \"message.\" + Date.now() + \"-\" + crypto.randomBytes(14).toString(\"hex\")) : false;\n        this.cache = false;\n        this.headers = false;\n        this.bodyHash = false;\n        this.parser = false;\n        this.relaxedBody = false;\n        this.input = input;\n        this.output = output;\n        this.output.usingCache = false;\n        this.hasErrored = false;\n        this.input.on(\"error\", (err)=>{\n            this.hasErrored = true;\n            this.cleanup();\n            output.emit(\"error\", err);\n        });\n    }\n    cleanup() {\n        if (!this.cache || !this.cachePath) {\n            return;\n        }\n        fs.unlink(this.cachePath, ()=>false);\n    }\n    createReadCache() {\n        // pipe remainings to cache file\n        this.cache = fs.createReadStream(this.cachePath);\n        this.cache.once(\"error\", (err)=>{\n            this.cleanup();\n            this.output.emit(\"error\", err);\n        });\n        this.cache.once(\"close\", ()=>{\n            this.cleanup();\n        });\n        this.cache.pipe(this.output);\n    }\n    sendNextChunk() {\n        if (this.hasErrored) {\n            return;\n        }\n        if (this.readPos >= this.chunks.length) {\n            if (!this.cache) {\n                return this.output.end();\n            }\n            return this.createReadCache();\n        }\n        let chunk = this.chunks[this.readPos++];\n        if (this.output.write(chunk) === false) {\n            return this.output.once(\"drain\", ()=>{\n                this.sendNextChunk();\n            });\n        }\n        setImmediate(()=>this.sendNextChunk());\n    }\n    sendSignedOutput() {\n        let keyPos = 0;\n        let signNextKey = ()=>{\n            if (keyPos >= this.keys.length) {\n                this.output.write(this.parser.rawHeaders);\n                return setImmediate(()=>this.sendNextChunk());\n            }\n            let key = this.keys[keyPos++];\n            let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n                domainName: key.domainName,\n                keySelector: key.keySelector,\n                privateKey: key.privateKey,\n                headerFieldNames: this.options.headerFieldNames,\n                skipFields: this.options.skipFields\n            });\n            if (dkimField) {\n                this.output.write(Buffer.from(dkimField + \"\\r\\n\"));\n            }\n            return setImmediate(signNextKey);\n        };\n        if (this.bodyHash && this.headers) {\n            return signNextKey();\n        }\n        this.output.write(this.parser.rawHeaders);\n        this.sendNextChunk();\n    }\n    createWriteCache() {\n        this.output.usingCache = true;\n        // pipe remainings to cache file\n        this.cache = fs.createWriteStream(this.cachePath);\n        this.cache.once(\"error\", (err)=>{\n            this.cleanup();\n            // drain input\n            this.relaxedBody.unpipe(this.cache);\n            this.relaxedBody.on(\"readable\", ()=>{\n                while(this.relaxedBody.read() !== null){\n                // do nothing\n                }\n            });\n            this.hasErrored = true;\n            // emit error\n            this.output.emit(\"error\", err);\n        });\n        this.cache.once(\"close\", ()=>{\n            this.sendSignedOutput();\n        });\n        this.relaxedBody.removeAllListeners(\"readable\");\n        this.relaxedBody.pipe(this.cache);\n    }\n    signStream() {\n        this.parser = new MessageParser();\n        this.relaxedBody = new RelaxedBody({\n            hashAlgo: this.hashAlgo\n        });\n        this.parser.on(\"headers\", (value)=>{\n            this.headers = value;\n        });\n        this.relaxedBody.on(\"hash\", (value)=>{\n            this.bodyHash = value;\n        });\n        this.relaxedBody.on(\"readable\", ()=>{\n            let chunk;\n            if (this.cache) {\n                return;\n            }\n            while((chunk = this.relaxedBody.read()) !== null){\n                this.chunks.push(chunk);\n                this.chunklen += chunk.length;\n                if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n                    return this.createWriteCache();\n                }\n            }\n        });\n        this.relaxedBody.on(\"end\", ()=>{\n            if (this.cache) {\n                return;\n            }\n            this.sendSignedOutput();\n        });\n        this.parser.pipe(this.relaxedBody);\n        setImmediate(()=>this.input.pipe(this.parser));\n    }\n}\nclass DKIM {\n    constructor(options){\n        this.options = options || {};\n        this.keys = [].concat(this.options.keys || {\n            domainName: options.domainName,\n            keySelector: options.keySelector,\n            privateKey: options.privateKey\n        });\n    }\n    sign(input, extraOptions) {\n        let output = new PassThrough();\n        let inputStream = input;\n        let writeValue = false;\n        if (Buffer.isBuffer(input)) {\n            writeValue = input;\n            inputStream = new PassThrough();\n        } else if (typeof input === \"string\") {\n            writeValue = Buffer.from(input);\n            inputStream = new PassThrough();\n        }\n        let options = this.options;\n        if (extraOptions && Object.keys(extraOptions).length) {\n            options = {};\n            Object.keys(this.options || {}).forEach((key)=>{\n                options[key] = this.options[key];\n            });\n            Object.keys(extraOptions || {}).forEach((key)=>{\n                if (!(key in options)) {\n                    options[key] = extraOptions[key];\n                }\n            });\n        }\n        let signer = new DKIMSigner(options, this.keys, inputStream, output);\n        setImmediate(()=>{\n            signer.signStream();\n            if (writeValue) {\n                setImmediate(()=>{\n                    inputStream.end(writeValue);\n                });\n            }\n        });\n        return output;\n    }\n}\nmodule.exports = DKIM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/message-parser.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * MessageParser instance is a transform stream that separates message headers\n * from the rest of the body. Headers are emitted with the 'headers' event. Message\n * body is passed on as the resulting stream.\n */ class MessageParser extends Transform {\n    constructor(options){\n        super(options);\n        this.lastBytes = Buffer.alloc(4);\n        this.headersParsed = false;\n        this.headerBytes = 0;\n        this.headerChunks = [];\n        this.rawHeaders = false;\n        this.bodySize = 0;\n    }\n    /**\n     * Keeps count of the last 4 bytes in order to detect line breaks on chunk boundaries\n     *\n     * @param {Buffer} data Next data chunk from the stream\n     */ updateLastBytes(data) {\n        let lblen = this.lastBytes.length;\n        let nblen = Math.min(data.length, lblen);\n        // shift existing bytes\n        for(let i = 0, len = lblen - nblen; i < len; i++){\n            this.lastBytes[i] = this.lastBytes[i + nblen];\n        }\n        // add new bytes\n        for(let i = 1; i <= nblen; i++){\n            this.lastBytes[lblen - i] = data[data.length - i];\n        }\n    }\n    /**\n     * Finds and removes message headers from the remaining body. We want to keep\n     * headers separated until final delivery to be able to modify these\n     *\n     * @param {Buffer} data Next chunk of data\n     * @return {Boolean} Returns true if headers are already found or false otherwise\n     */ checkHeaders(data) {\n        if (this.headersParsed) {\n            return true;\n        }\n        let lblen = this.lastBytes.length;\n        let headerPos = 0;\n        this.curLinePos = 0;\n        for(let i = 0, len = this.lastBytes.length + data.length; i < len; i++){\n            let chr;\n            if (i < lblen) {\n                chr = this.lastBytes[i];\n            } else {\n                chr = data[i - lblen];\n            }\n            if (chr === 0x0a && i) {\n                let pr1 = i - 1 < lblen ? this.lastBytes[i - 1] : data[i - 1 - lblen];\n                let pr2 = i > 1 ? i - 2 < lblen ? this.lastBytes[i - 2] : data[i - 2 - lblen] : false;\n                if (pr1 === 0x0a) {\n                    this.headersParsed = true;\n                    headerPos = i - lblen + 1;\n                    this.headerBytes += headerPos;\n                    break;\n                } else if (pr1 === 0x0d && pr2 === 0x0a) {\n                    this.headersParsed = true;\n                    headerPos = i - lblen + 1;\n                    this.headerBytes += headerPos;\n                    break;\n                }\n            }\n        }\n        if (this.headersParsed) {\n            this.headerChunks.push(data.slice(0, headerPos));\n            this.rawHeaders = Buffer.concat(this.headerChunks, this.headerBytes);\n            this.headerChunks = null;\n            this.emit(\"headers\", this.parseHeaders());\n            if (data.length - 1 > headerPos) {\n                let chunk = data.slice(headerPos);\n                this.bodySize += chunk.length;\n                // this would be the first chunk of data sent downstream\n                setImmediate(()=>this.push(chunk));\n            }\n            return false;\n        } else {\n            this.headerBytes += data.length;\n            this.headerChunks.push(data);\n        }\n        // store last 4 bytes to catch header break\n        this.updateLastBytes(data);\n        return false;\n    }\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        let headersFound;\n        try {\n            headersFound = this.checkHeaders(chunk);\n        } catch (E) {\n            return callback(E);\n        }\n        if (headersFound) {\n            this.bodySize += chunk.length;\n            this.push(chunk);\n        }\n        setImmediate(callback);\n    }\n    _flush(callback) {\n        if (this.headerChunks) {\n            let chunk = Buffer.concat(this.headerChunks, this.headerBytes);\n            this.bodySize += chunk.length;\n            this.push(chunk);\n            this.headerChunks = null;\n        }\n        callback();\n    }\n    parseHeaders() {\n        let lines = (this.rawHeaders || \"\").toString().split(/\\r?\\n/);\n        for(let i = lines.length - 1; i > 0; i--){\n            if (/^\\s/.test(lines[i])) {\n                lines[i - 1] += \"\\n\" + lines[i];\n                lines.splice(i, 1);\n            }\n        }\n        return lines.filter((line)=>line.trim()).map((line)=>({\n                key: line.substr(0, line.indexOf(\":\")).trim().toLowerCase(),\n                line\n            }));\n    }\n}\nmodule.exports = MessageParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js":
/*!**********************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/relaxed-body.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// streams through a message body and calculates relaxed body hash\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nclass RelaxedBody extends Transform {\n    constructor(options){\n        super();\n        options = options || {};\n        this.chunkBuffer = [];\n        this.chunkBufferLen = 0;\n        this.bodyHash = crypto.createHash(options.hashAlgo || \"sha1\");\n        this.remainder = \"\";\n        this.byteLength = 0;\n        this.debug = options.debug;\n        this._debugBody = options.debug ? [] : false;\n    }\n    updateHash(chunk) {\n        let bodyStr;\n        // find next remainder\n        let nextRemainder = \"\";\n        // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n        // If we get another chunk that does not match this description then we can restore the previously processed data\n        let state = \"file\";\n        for(let i = chunk.length - 1; i >= 0; i--){\n            let c = chunk[i];\n            if (state === \"file\" && (c === 0x0a || c === 0x0d)) {\n            // do nothing, found \\n or \\r at the end of chunk, stil end of file\n            } else if (state === \"file\" && (c === 0x09 || c === 0x20)) {\n                // switch to line ending mode, this is the last non-empty line\n                state = \"line\";\n            } else if (state === \"line\" && (c === 0x09 || c === 0x20)) {\n            // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n            } else if (state === \"file\" || state === \"line\") {\n                // non line/file ending character found, switch to body mode\n                state = \"body\";\n                if (i === chunk.length - 1) {\n                    break;\n                }\n            }\n            if (i === 0) {\n                // reached to the beginning of the chunk, check if it is still about the ending\n                // and if the remainder also matches\n                if (state === \"file\" && (!this.remainder || /[\\r\\n]$/.test(this.remainder)) || state === \"line\" && (!this.remainder || /[ \\t]$/.test(this.remainder))) {\n                    // keep everything\n                    this.remainder += chunk.toString(\"binary\");\n                    return;\n                } else if (state === \"line\" || state === \"file\") {\n                    // process existing remainder as normal line but store the current chunk\n                    nextRemainder = chunk.toString(\"binary\");\n                    chunk = false;\n                    break;\n                }\n            }\n            if (state !== \"body\") {\n                continue;\n            }\n            // reached first non ending byte\n            nextRemainder = chunk.slice(i + 1).toString(\"binary\");\n            chunk = chunk.slice(0, i + 1);\n            break;\n        }\n        let needsFixing = !!this.remainder;\n        if (chunk && !needsFixing) {\n            // check if we even need to change anything\n            for(let i = 0, len = chunk.length; i < len; i++){\n                if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n                    // missing \\r before \\n\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n                    // trailing WSP found\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n                    // multiple spaces found, needs to be replaced with just one\n                    needsFixing = true;\n                    break;\n                } else if (chunk[i] === 0x09) {\n                    // TAB found, needs to be replaced with a space\n                    needsFixing = true;\n                    break;\n                }\n            }\n        }\n        if (needsFixing) {\n            bodyStr = this.remainder + (chunk ? chunk.toString(\"binary\") : \"\");\n            this.remainder = nextRemainder;\n            bodyStr = bodyStr.replace(/\\r?\\n/g, \"\\n\") // use js line endings\n            .replace(/[ \\t]*$/gm, \"\") // remove line endings, rtrim\n            .replace(/[ \\t]+/gm, \" \") // single spaces\n            .replace(/\\n/g, \"\\r\\n\"); // restore rfc822 line endings\n            chunk = Buffer.from(bodyStr, \"binary\");\n        } else if (nextRemainder) {\n            this.remainder = nextRemainder;\n        }\n        if (this.debug) {\n            this._debugBody.push(chunk);\n        }\n        this.bodyHash.update(chunk);\n    }\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        this.updateHash(chunk);\n        this.byteLength += chunk.length;\n        this.push(chunk);\n        callback();\n    }\n    _flush(callback) {\n        // generate final hash and emit it\n        if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n            // add terminating line end\n            this.bodyHash.update(Buffer.from(\"\\r\\n\"));\n        }\n        if (!this.byteLength) {\n            // emit empty line buffer to keep the stream flowing\n            this.push(Buffer.from(\"\\r\\n\"));\n        // this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n        this.emit(\"hash\", this.bodyHash.digest(\"base64\"), this.debug ? Buffer.concat(this._debugBody) : false);\n        callback();\n    }\n}\nmodule.exports = RelaxedBody;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/sign.js":
/*!**************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/sign.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst punycode = __webpack_require__(/*! ../punycode */ \"(rsc)/./node_modules/nodemailer/lib/punycode/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Returns DKIM signature header line\n *\n * @param {Object} headers Parsed headers object from MessageParser\n * @param {String} bodyHash Base64 encoded hash of the message\n * @param {Object} options DKIM options\n * @param {String} options.domainName Domain name to be signed for\n * @param {String} options.keySelector DKIM key selector to use\n * @param {String} options.privateKey DKIM private key to use\n * @return {String} Complete header line\n */ module.exports = (headers, hashAlgo, bodyHash, options)=>{\n    options = options || {};\n    // all listed fields from RFC4871 #5.5\n    let defaultFieldNames = \"From:Sender:Reply-To:Subject:Date:Message-ID:To:\" + \"Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:\" + \"Content-Description:Resent-Date:Resent-From:Resent-Sender:\" + \"Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:\" + \"List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:\" + \"List-Owner:List-Archive\";\n    let fieldNames = options.headerFieldNames || defaultFieldNames;\n    let canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);\n    let dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);\n    let signer, signature;\n    canonicalizedHeaderData.headers += \"dkim-signature:\" + relaxedHeaderLine(dkimHeader);\n    signer = crypto.createSign((\"rsa-\" + hashAlgo).toUpperCase());\n    signer.update(canonicalizedHeaderData.headers);\n    try {\n        signature = signer.sign(options.privateKey, \"base64\");\n    } catch (E) {\n        return false;\n    }\n    return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, \"$&\\r\\n \").trim();\n};\nmodule.exports.relaxedHeaders = relaxedHeaders;\nfunction generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {\n    let dkim = [\n        \"v=1\",\n        \"a=rsa-\" + hashAlgo,\n        \"c=relaxed/relaxed\",\n        \"d=\" + punycode.toASCII(domainName),\n        \"q=dns/txt\",\n        \"s=\" + keySelector,\n        \"bh=\" + bodyHash,\n        \"h=\" + fieldNames\n    ].join(\"; \");\n    return mimeFuncs.foldLines(\"DKIM-Signature: \" + dkim, 76) + \";\\r\\n b=\";\n}\nfunction relaxedHeaders(headers, fieldNames, skipFields) {\n    let includedFields = new Set();\n    let skip = new Set();\n    let headerFields = new Map();\n    (skipFields || \"\").toLowerCase().split(\":\").forEach((field)=>{\n        skip.add(field.trim());\n    });\n    (fieldNames || \"\").toLowerCase().split(\":\").filter((field)=>!skip.has(field.trim())).forEach((field)=>{\n        includedFields.add(field.trim());\n    });\n    for(let i = headers.length - 1; i >= 0; i--){\n        let line = headers[i];\n        // only include the first value from bottom to top\n        if (includedFields.has(line.key) && !headerFields.has(line.key)) {\n            headerFields.set(line.key, relaxedHeaderLine(line.line));\n        }\n    }\n    let headersList = [];\n    let fields = [];\n    includedFields.forEach((field)=>{\n        if (headerFields.has(field)) {\n            fields.push(field);\n            headersList.push(field + \":\" + headerFields.get(field));\n        }\n    });\n    return {\n        headers: headersList.join(\"\\r\\n\") + \"\\r\\n\",\n        fieldNames: fields.join(\":\")\n    };\n}\nfunction relaxedHeaderLine(line) {\n    return line.substr(line.indexOf(\":\") + 1).replace(/\\r?\\n/g, \"\").replace(/\\s+/g, \" \").trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js":
/*!******************************************************!*\
  !*** ./node_modules/nodemailer/lib/fetch/cookies.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// module to handle cookies\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst SESSION_TIMEOUT = 1800; // 30 min\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */ class Cookies {\n    constructor(options){\n        this.options = options || {};\n        this.cookies = [];\n    }\n    /**\n     * Stores a cookie string to the cookie storage\n     *\n     * @param {String} cookieStr Value from the 'Set-Cookie:' header\n     * @param {String} url Current URL\n     */ set(cookieStr, url) {\n        let urlparts = urllib.parse(url || \"\");\n        let cookie = this.parse(cookieStr);\n        let domain;\n        if (cookie.domain) {\n            domain = cookie.domain.replace(/^\\./, \"\");\n            // do not allow cross origin cookies\n            if (// can't be valid if the requested domain is shorter than current hostname\n            urlparts.hostname.length < domain.length || // prefix domains with dot to be sure that partial matches are not used\n            (\".\" + urlparts.hostname).substr(-domain.length + 1) !== \".\" + domain) {\n                cookie.domain = urlparts.hostname;\n            }\n        } else {\n            cookie.domain = urlparts.hostname;\n        }\n        if (!cookie.path) {\n            cookie.path = this.getPath(urlparts.pathname);\n        }\n        // if no expire date, then use sessionTimeout value\n        if (!cookie.expires) {\n            cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n        }\n        return this.add(cookie);\n    }\n    /**\n     * Returns cookie string for the 'Cookie:' header.\n     *\n     * @param {String} url URL to check for\n     * @returns {String} Cookie header or empty string if no matches were found\n     */ get(url) {\n        return this.list(url).map((cookie)=>cookie.name + \"=\" + cookie.value).join(\"; \");\n    }\n    /**\n     * Lists all valied cookie objects for the specified URL\n     *\n     * @param {String} url URL to check for\n     * @returns {Array} An array of cookie objects\n     */ list(url) {\n        let result = [];\n        let i;\n        let cookie;\n        for(i = this.cookies.length - 1; i >= 0; i--){\n            cookie = this.cookies[i];\n            if (this.isExpired(cookie)) {\n                this.cookies.splice(i, i);\n                continue;\n            }\n            if (this.match(cookie, url)) {\n                result.unshift(cookie);\n            }\n        }\n        return result;\n    }\n    /**\n     * Parses cookie string from the 'Set-Cookie:' header\n     *\n     * @param {String} cookieStr String from the 'Set-Cookie:' header\n     * @returns {Object} Cookie object\n     */ parse(cookieStr) {\n        let cookie = {};\n        (cookieStr || \"\").toString().split(\";\").forEach((cookiePart)=>{\n            let valueParts = cookiePart.split(\"=\");\n            let key = valueParts.shift().trim().toLowerCase();\n            let value = valueParts.join(\"=\").trim();\n            let domain;\n            if (!key) {\n                // skip empty parts\n                return;\n            }\n            switch(key){\n                case \"expires\":\n                    value = new Date(value);\n                    // ignore date if can not parse it\n                    if (value.toString() !== \"Invalid Date\") {\n                        cookie.expires = value;\n                    }\n                    break;\n                case \"path\":\n                    cookie.path = value;\n                    break;\n                case \"domain\":\n                    domain = value.toLowerCase();\n                    if (domain.length && domain.charAt(0) !== \".\") {\n                        domain = \".\" + domain; // ensure preceeding dot for user set domains\n                    }\n                    cookie.domain = domain;\n                    break;\n                case \"max-age\":\n                    cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n                    break;\n                case \"secure\":\n                    cookie.secure = true;\n                    break;\n                case \"httponly\":\n                    cookie.httponly = true;\n                    break;\n                default:\n                    if (!cookie.name) {\n                        cookie.name = key;\n                        cookie.value = value;\n                    }\n            }\n        });\n        return cookie;\n    }\n    /**\n     * Checks if a cookie object is valid for a specified URL\n     *\n     * @param {Object} cookie Cookie object\n     * @param {String} url URL to check for\n     * @returns {Boolean} true if cookie is valid for specifiec URL\n     */ match(cookie, url) {\n        let urlparts = urllib.parse(url || \"\");\n        // check if hostname matches\n        // .foo.com also matches subdomains, foo.com does not\n        if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== \".\" || (\".\" + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {\n            return false;\n        }\n        // check if path matches\n        let path = this.getPath(urlparts.pathname);\n        if (path.substr(0, cookie.path.length) !== cookie.path) {\n            return false;\n        }\n        // check secure argument\n        if (cookie.secure && urlparts.protocol !== \"https:\") {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Adds (or updates/removes if needed) a cookie object to the cookie storage\n     *\n     * @param {Object} cookie Cookie value to be stored\n     */ add(cookie) {\n        let i;\n        let len;\n        // nothing to do here\n        if (!cookie || !cookie.name) {\n            return false;\n        }\n        // overwrite if has same params\n        for(i = 0, len = this.cookies.length; i < len; i++){\n            if (this.compare(this.cookies[i], cookie)) {\n                // check if the cookie needs to be removed instead\n                if (this.isExpired(cookie)) {\n                    this.cookies.splice(i, 1); // remove expired/unset cookie\n                    return false;\n                }\n                this.cookies[i] = cookie;\n                return true;\n            }\n        }\n        // add as new if not already expired\n        if (!this.isExpired(cookie)) {\n            this.cookies.push(cookie);\n        }\n        return true;\n    }\n    /**\n     * Checks if two cookie objects are the same\n     *\n     * @param {Object} a Cookie to check against\n     * @param {Object} b Cookie to check against\n     * @returns {Boolean} True, if the cookies are the same\n     */ compare(a, b) {\n        return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n    }\n    /**\n     * Checks if a cookie is expired\n     *\n     * @param {Object} cookie Cookie object to check against\n     * @returns {Boolean} True, if the cookie is expired\n     */ isExpired(cookie) {\n        return cookie.expires && cookie.expires < new Date() || !cookie.value;\n    }\n    /**\n     * Returns normalized cookie path for an URL path argument\n     *\n     * @param {String} pathname\n     * @returns {String} Normalized path\n     */ getPath(pathname) {\n        let path = (pathname || \"/\").split(\"/\");\n        path.pop(); // remove filename part\n        path = path.join(\"/\").trim();\n        // ensure path prefix /\n        if (path.charAt(0) !== \"/\") {\n            path = \"/\" + path;\n        }\n        // ensure path suffix /\n        if (path.substr(-1) !== \"/\") {\n            path += \"/\";\n        }\n        return path;\n    }\n}\nmodule.exports = Cookies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/fetch/index.js":
/*!****************************************************!*\
  !*** ./node_modules/nodemailer/lib/fetch/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst Cookies = __webpack_require__(/*! ./cookies */ \"(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst MAX_REDIRECTS = 5;\nmodule.exports = function(url, options) {\n    return nmfetch(url, options);\n};\nmodule.exports.Cookies = Cookies;\nfunction nmfetch(url, options) {\n    options = options || {};\n    options.fetchRes = options.fetchRes || new PassThrough();\n    options.cookies = options.cookies || new Cookies();\n    options.redirects = options.redirects || 0;\n    options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;\n    if (options.cookie) {\n        [].concat(options.cookie || []).forEach((cookie)=>{\n            options.cookies.set(cookie, url);\n        });\n        options.cookie = false;\n    }\n    let fetchRes = options.fetchRes;\n    let parsed = urllib.parse(url);\n    let method = (options.method || \"\").toString().trim().toUpperCase() || \"GET\";\n    let finished = false;\n    let cookies;\n    let body;\n    let handler = parsed.protocol === \"https:\" ? https : http;\n    let headers = {\n        \"accept-encoding\": \"gzip,deflate\",\n        \"user-agent\": \"nodemailer/\" + packageData.version\n    };\n    Object.keys(options.headers || {}).forEach((key)=>{\n        headers[key.toLowerCase().trim()] = options.headers[key];\n    });\n    if (options.userAgent) {\n        headers[\"user-agent\"] = options.userAgent;\n    }\n    if (parsed.auth) {\n        headers.Authorization = \"Basic \" + Buffer.from(parsed.auth).toString(\"base64\");\n    }\n    if (cookies = options.cookies.get(url)) {\n        headers.cookie = cookies;\n    }\n    if (options.body) {\n        if (options.contentType !== false) {\n            headers[\"Content-Type\"] = options.contentType || \"application/x-www-form-urlencoded\";\n        }\n        if (typeof options.body.pipe === \"function\") {\n            // it's a stream\n            headers[\"Transfer-Encoding\"] = \"chunked\";\n            body = options.body;\n            body.on(\"error\", (err)=>{\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n            });\n        } else {\n            if (options.body instanceof Buffer) {\n                body = options.body;\n            } else if (typeof options.body === \"object\") {\n                try {\n                    // encodeURIComponent can fail on invalid input (partial emoji etc.)\n                    body = Buffer.from(Object.keys(options.body).map((key)=>{\n                        let value = options.body[key].toString().trim();\n                        return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n                    }).join(\"&\"));\n                } catch (E) {\n                    if (finished) {\n                        return;\n                    }\n                    finished = true;\n                    E.type = \"FETCH\";\n                    E.sourceUrl = url;\n                    fetchRes.emit(\"error\", E);\n                    return;\n                }\n            } else {\n                body = Buffer.from(options.body.toString().trim());\n            }\n            headers[\"Content-Type\"] = options.contentType || \"application/x-www-form-urlencoded\";\n            headers[\"Content-Length\"] = body.length;\n        }\n        // if method is not provided, use POST instead of GET\n        method = (options.method || \"\").toString().trim().toUpperCase() || \"POST\";\n    }\n    let req;\n    let reqOptions = {\n        method,\n        host: parsed.hostname,\n        path: parsed.path,\n        port: parsed.port ? parsed.port : parsed.protocol === \"https:\" ? 443 : 80,\n        headers,\n        rejectUnauthorized: false,\n        agent: false\n    };\n    if (options.tls) {\n        Object.keys(options.tls).forEach((key)=>{\n            reqOptions[key] = options.tls[key];\n        });\n    }\n    if (parsed.protocol === \"https:\" && parsed.hostname && parsed.hostname !== reqOptions.host && !net.isIP(parsed.hostname) && !reqOptions.servername) {\n        reqOptions.servername = parsed.hostname;\n    }\n    try {\n        req = handler.request(reqOptions);\n    } catch (E) {\n        finished = true;\n        setImmediate(()=>{\n            E.type = \"FETCH\";\n            E.sourceUrl = url;\n            fetchRes.emit(\"error\", E);\n        });\n        return fetchRes;\n    }\n    if (options.timeout) {\n        req.setTimeout(options.timeout, ()=>{\n            if (finished) {\n                return;\n            }\n            finished = true;\n            req.abort();\n            let err = new Error(\"Request Timeout\");\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n        });\n    }\n    req.on(\"error\", (err)=>{\n        if (finished) {\n            return;\n        }\n        finished = true;\n        err.type = \"FETCH\";\n        err.sourceUrl = url;\n        fetchRes.emit(\"error\", err);\n    });\n    req.on(\"response\", (res)=>{\n        let inflate;\n        if (finished) {\n            return;\n        }\n        switch(res.headers[\"content-encoding\"]){\n            case \"gzip\":\n            case \"deflate\":\n                inflate = zlib.createUnzip();\n                break;\n        }\n        if (res.headers[\"set-cookie\"]) {\n            [].concat(res.headers[\"set-cookie\"] || []).forEach((cookie)=>{\n                options.cookies.set(cookie, url);\n            });\n        }\n        if ([\n            301,\n            302,\n            303,\n            307,\n            308\n        ].includes(res.statusCode) && res.headers.location) {\n            // redirect\n            options.redirects++;\n            if (options.redirects > options.maxRedirects) {\n                finished = true;\n                let err = new Error(\"Maximum redirect count exceeded\");\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                req.abort();\n                return;\n            }\n            // redirect does not include POST body\n            options.method = \"GET\";\n            options.body = false;\n            return nmfetch(urllib.resolve(url, res.headers.location), options);\n        }\n        fetchRes.statusCode = res.statusCode;\n        fetchRes.headers = res.headers;\n        if (res.statusCode >= 300 && !options.allowErrorResponse) {\n            finished = true;\n            let err = new Error(\"Invalid status code \" + res.statusCode);\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n            req.abort();\n            return;\n        }\n        res.on(\"error\", (err)=>{\n            if (finished) {\n                return;\n            }\n            finished = true;\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n            req.abort();\n        });\n        if (inflate) {\n            res.pipe(inflate).pipe(fetchRes);\n            inflate.on(\"error\", (err)=>{\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                req.abort();\n            });\n        } else {\n            res.pipe(fetchRes);\n        }\n    });\n    setImmediate(()=>{\n        if (body) {\n            try {\n                if (typeof body.pipe === \"function\") {\n                    return body.pipe(req);\n                } else {\n                    req.write(body);\n                }\n            } catch (err) {\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                return;\n            }\n        }\n        req.end();\n    });\n    return fetchRes;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/fetch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/json-transport/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/json-transport/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class JSONTransport {\n    constructor(options){\n        options = options || {};\n        this.options = options || {};\n        this.name = \"JSONTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"json-transport\"\n        });\n    }\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Composing JSON structure of %s to <%s>\", messageId, recipients.join(\", \"));\n        setImmediate(()=>{\n            mail.normalize((err, data)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed building JSON structure for %s. %s\", messageId, err.message);\n                    return done(err);\n                }\n                delete data.envelope;\n                delete data.normalizedHeaders;\n                return done(null, {\n                    envelope,\n                    messageId,\n                    message: this.options.skipEncoding ? data : JSON.stringify(data)\n                });\n            });\n        });\n    }\n}\nmodule.exports = JSONTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvanNvbi10cmFuc3BvcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUM1QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUV2Qjs7Ozs7Q0FLQyxHQUNELE1BQU1FO0lBQ0ZDLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQkEsVUFBVUEsV0FBVyxDQUFDO1FBRXRCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFFM0IsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE9BQU8sR0FBR1AsWUFBWU8sT0FBTztRQUVsQyxJQUFJLENBQUNDLE1BQU0sR0FBR04sT0FBT08sU0FBUyxDQUFDLElBQUksQ0FBQ0osT0FBTyxFQUFFO1lBQ3pDSyxXQUFXLElBQUksQ0FBQ0wsT0FBTyxDQUFDSyxTQUFTLElBQUk7UUFDekM7SUFDSjtJQUVBOzs7OztLQUtDLEdBQ0RDLEtBQUtDLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ2IsNkNBQTZDO1FBQzdDRCxLQUFLRSxPQUFPLENBQUNDLE9BQU8sR0FBRztRQUV2QixJQUFJQyxXQUFXSixLQUFLSyxJQUFJLENBQUNELFFBQVEsSUFBSUosS0FBS0UsT0FBTyxDQUFDSSxXQUFXO1FBQzdELElBQUlDLFlBQVlQLEtBQUtFLE9BQU8sQ0FBQ0ssU0FBUztRQUV0QyxJQUFJQyxhQUFhLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDTCxTQUFTTSxFQUFFLElBQUksRUFBRTtRQUM1QyxJQUFJRixXQUFXRyxNQUFNLEdBQUcsR0FBRztZQUN2QkgsV0FBV0ksSUFBSSxDQUFDLFlBQVlKLFdBQVdLLE1BQU0sQ0FBQyxHQUFHRixNQUFNLEdBQUc7UUFDOUQ7UUFDQSxJQUFJLENBQUNmLE1BQU0sQ0FBQ2tCLElBQUksQ0FDWjtZQUNJQyxLQUFLO1lBQ0xSO1FBQ0osR0FDQSwwQ0FDQUEsV0FDQUMsV0FBV1EsSUFBSSxDQUFDO1FBR3BCQyxhQUFhO1lBQ1RqQixLQUFLa0IsU0FBUyxDQUFDLENBQUNDLEtBQUtkO2dCQUNqQixJQUFJYyxLQUFLO29CQUNMLElBQUksQ0FBQ3ZCLE1BQU0sQ0FBQ3dCLEtBQUssQ0FDYjt3QkFDSUQ7d0JBQ0FKLEtBQUs7d0JBQ0xSO29CQUNKLEdBQ0EsNkNBQ0FBLFdBQ0FZLElBQUlqQixPQUFPO29CQUVmLE9BQU9ELEtBQUtrQjtnQkFDaEI7Z0JBRUEsT0FBT2QsS0FBS0QsUUFBUTtnQkFDcEIsT0FBT0MsS0FBS2dCLGlCQUFpQjtnQkFFN0IsT0FBT3BCLEtBQUssTUFBTTtvQkFDZEc7b0JBQ0FHO29CQUNBTCxTQUFTLElBQUksQ0FBQ1QsT0FBTyxDQUFDNkIsWUFBWSxHQUFHakIsT0FBT2tCLEtBQUtDLFNBQVMsQ0FBQ25CO2dCQUMvRDtZQUNKO1FBQ0o7SUFDSjtBQUNKO0FBRUFvQixPQUFPQyxPQUFPLEdBQUduQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRpbnVhbGcvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvanNvbi10cmFuc3BvcnQvaW5kZXguanM/NmM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhY2thZ2VEYXRhID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJyk7XG5jb25zdCBzaGFyZWQgPSByZXF1aXJlKCcuLi9zaGFyZWQnKTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBUcmFuc3BvcnQgb2JqZWN0IHRvIGdlbmVyYXRlIEpTT04gb3V0cHV0XG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uYWwgY29uZmlnIHBhcmFtZXRlclxuICovXG5jbGFzcyBKU09OVHJhbnNwb3J0IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ0pTT05UcmFuc3BvcnQnO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBwYWNrYWdlRGF0YS52ZXJzaW9uO1xuXG4gICAgICAgIHRoaXMubG9nZ2VyID0gc2hhcmVkLmdldExvZ2dlcih0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcy5vcHRpb25zLmNvbXBvbmVudCB8fCAnanNvbi10cmFuc3BvcnQnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDxwPkNvbXBpbGVzIGEgbWFpbGNvbXBvc2VyIG1lc3NhZ2UgYW5kIGZvcndhcmRzIGl0IHRvIGhhbmRsZXIgdGhhdCBzZW5kcyBpdC48L3A+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZW1haWxNZXNzYWdlIE1haWxDb21wb3NlciBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0byBydW4gd2hlbiB0aGUgc2VuZGluZyBpcyBjb21wbGV0ZWRcbiAgICAgKi9cbiAgICBzZW5kKG1haWwsIGRvbmUpIHtcbiAgICAgICAgLy8gU2VuZG1haWwgc3RyaXBzIHRoaXMgaGVhZGVyIGxpbmUgYnkgaXRzZWxmXG4gICAgICAgIG1haWwubWVzc2FnZS5rZWVwQmNjID0gdHJ1ZTtcblxuICAgICAgICBsZXQgZW52ZWxvcGUgPSBtYWlsLmRhdGEuZW52ZWxvcGUgfHwgbWFpbC5tZXNzYWdlLmdldEVudmVsb3BlKCk7XG4gICAgICAgIGxldCBtZXNzYWdlSWQgPSBtYWlsLm1lc3NhZ2UubWVzc2FnZUlkKCk7XG5cbiAgICAgICAgbGV0IHJlY2lwaWVudHMgPSBbXS5jb25jYXQoZW52ZWxvcGUudG8gfHwgW10pO1xuICAgICAgICBpZiAocmVjaXBpZW50cy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICByZWNpcGllbnRzLnB1c2goJy4uLmFuZCAnICsgcmVjaXBpZW50cy5zcGxpY2UoMikubGVuZ3RoICsgJyBtb3JlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0bng6ICdzZW5kJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlSWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnQ29tcG9zaW5nIEpTT04gc3RydWN0dXJlIG9mICVzIHRvIDwlcz4nLFxuICAgICAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICAgICAgcmVjaXBpZW50cy5qb2luKCcsICcpXG4gICAgICAgICk7XG5cbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgIG1haWwubm9ybWFsaXplKChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bng6ICdzZW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIGJ1aWxkaW5nIEpTT04gc3RydWN0dXJlIGZvciAlcy4gJXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS5lbnZlbG9wZTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS5ub3JtYWxpemVkSGVhZGVycztcblxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZW52ZWxvcGUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5vcHRpb25zLnNraXBFbmNvZGluZyA/IGRhdGEgOiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBKU09OVHJhbnNwb3J0O1xuIl0sIm5hbWVzIjpbInBhY2thZ2VEYXRhIiwicmVxdWlyZSIsInNoYXJlZCIsIkpTT05UcmFuc3BvcnQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJuYW1lIiwidmVyc2lvbiIsImxvZ2dlciIsImdldExvZ2dlciIsImNvbXBvbmVudCIsInNlbmQiLCJtYWlsIiwiZG9uZSIsIm1lc3NhZ2UiLCJrZWVwQmNjIiwiZW52ZWxvcGUiLCJkYXRhIiwiZ2V0RW52ZWxvcGUiLCJtZXNzYWdlSWQiLCJyZWNpcGllbnRzIiwiY29uY2F0IiwidG8iLCJsZW5ndGgiLCJwdXNoIiwic3BsaWNlIiwiaW5mbyIsInRueCIsImpvaW4iLCJzZXRJbW1lZGlhdGUiLCJub3JtYWxpemUiLCJlcnIiLCJlcnJvciIsIm5vcm1hbGl6ZWRIZWFkZXJzIiwic2tpcEVuY29kaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/json-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mail-composer/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-undefined: 0 */ \nconst MimeNode = __webpack_require__(/*! ../mime-node */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nconst parseDataURI = (__webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\").parseDataURI);\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */ class MailComposer {\n    constructor(mail){\n        this.mail = mail || {};\n        this.message = false;\n    }\n    /**\n     * Builds MimeNode instance\n     */ compile() {\n        this._alternatives = this.getAlternatives();\n        this._htmlNode = this._alternatives.filter((alternative)=>/^text\\/html\\b/i.test(alternative.contentType)).pop();\n        this._attachments = this.getAttachments(!!this._htmlNode);\n        this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n        this._useAlternative = this._alternatives.length > 1;\n        this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1;\n        // Compose MIME tree\n        if (this.mail.raw) {\n            this.message = new MimeNode(\"message/rfc822\", {\n                newline: this.mail.newline\n            }).setRaw(this.mail.raw);\n        } else if (this._useMixed) {\n            this.message = this._createMixed();\n        } else if (this._useAlternative) {\n            this.message = this._createAlternative();\n        } else if (this._useRelated) {\n            this.message = this._createRelated();\n        } else {\n            this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {\n                contentType: \"text/plain\",\n                content: \"\"\n            });\n        }\n        // Add custom headers\n        if (this.mail.headers) {\n            this.message.addHeader(this.mail.headers);\n        }\n        // Add headers to the root node, always overrides custom headers\n        [\n            \"from\",\n            \"sender\",\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"reply-to\",\n            \"in-reply-to\",\n            \"references\",\n            \"subject\",\n            \"message-id\",\n            \"date\"\n        ].forEach((header)=>{\n            let key = header.replace(/-(\\w)/g, (o, c)=>c.toUpperCase());\n            if (this.mail[key]) {\n                this.message.setHeader(header, this.mail[key]);\n            }\n        });\n        // Sets custom envelope\n        if (this.mail.envelope) {\n            this.message.setEnvelope(this.mail.envelope);\n        }\n        // ensure Message-Id value\n        this.message.messageId();\n        return this.message;\n    }\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */ getAttachments(findRelated) {\n        let icalEvent, eventObject;\n        let attachments = [].concat(this.mail.attachments || []).map((attachment, i)=>{\n            let data;\n            let isMessageNode = /^message\\//i.test(attachment.contentType);\n            if (/^data:/i.test(attachment.path || attachment.href)) {\n                attachment = this._processDataUrl(attachment);\n            }\n            let contentType = attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || \"bin\");\n            let isImage = /^image\\//i.test(contentType);\n            let contentDisposition = attachment.contentDisposition || (isMessageNode || isImage && attachment.cid ? \"inline\" : \"attachment\");\n            data = {\n                contentType,\n                contentDisposition,\n                contentTransferEncoding: \"contentTransferEncoding\" in attachment ? attachment.contentTransferEncoding : \"base64\"\n            };\n            if (attachment.filename) {\n                data.filename = attachment.filename;\n            } else if (!isMessageNode && attachment.filename !== false) {\n                data.filename = (attachment.path || attachment.href || \"\").split(\"/\").pop().split(\"?\").shift() || \"attachment-\" + (i + 1);\n                if (data.filename.indexOf(\".\") < 0) {\n                    data.filename += \".\" + mimeFuncs.detectExtension(data.contentType);\n                }\n            }\n            if (/^https?:\\/\\//i.test(attachment.path)) {\n                attachment.href = attachment.path;\n                attachment.path = undefined;\n            }\n            if (attachment.cid) {\n                data.cid = attachment.cid;\n            }\n            if (attachment.raw) {\n                data.raw = attachment.raw;\n            } else if (attachment.path) {\n                data.content = {\n                    path: attachment.path\n                };\n            } else if (attachment.href) {\n                data.content = {\n                    href: attachment.href,\n                    httpHeaders: attachment.httpHeaders\n                };\n            } else {\n                data.content = attachment.content || \"\";\n            }\n            if (attachment.encoding) {\n                data.encoding = attachment.encoding;\n            }\n            if (attachment.headers) {\n                data.headers = attachment.headers;\n            }\n            return data;\n        });\n        if (this.mail.icalEvent) {\n            if (typeof this.mail.icalEvent === \"object\" && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n            eventObject = {};\n            Object.keys(icalEvent).forEach((key)=>{\n                eventObject[key] = icalEvent[key];\n            });\n            eventObject.contentType = \"application/ics\";\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n            eventObject.filename = eventObject.filename || \"invite.ics\";\n            eventObject.headers[\"Content-Disposition\"] = \"attachment\";\n            eventObject.headers[\"Content-Transfer-Encoding\"] = \"base64\";\n        }\n        if (!findRelated) {\n            return {\n                attached: attachments.concat(eventObject || []),\n                related: []\n            };\n        } else {\n            return {\n                attached: attachments.filter((attachment)=>!attachment.cid).concat(eventObject || []),\n                related: attachments.filter((attachment)=>!!attachment.cid)\n            };\n        }\n    }\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */ getAlternatives() {\n        let alternatives = [], text, html, watchHtml, amp, icalEvent, eventObject;\n        if (this.mail.text) {\n            if (typeof this.mail.text === \"object\" && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n                text = this.mail.text;\n            } else {\n                text = {\n                    content: this.mail.text\n                };\n            }\n            text.contentType = \"text/plain; charset=utf-8\";\n        }\n        if (this.mail.watchHtml) {\n            if (typeof this.mail.watchHtml === \"object\" && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {\n                watchHtml = this.mail.watchHtml;\n            } else {\n                watchHtml = {\n                    content: this.mail.watchHtml\n                };\n            }\n            watchHtml.contentType = \"text/watch-html; charset=utf-8\";\n        }\n        if (this.mail.amp) {\n            if (typeof this.mail.amp === \"object\" && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n                amp = this.mail.amp;\n            } else {\n                amp = {\n                    content: this.mail.amp\n                };\n            }\n            amp.contentType = \"text/x-amp-html; charset=utf-8\";\n        }\n        // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n        if (this.mail.icalEvent) {\n            if (typeof this.mail.icalEvent === \"object\" && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n            eventObject = {};\n            Object.keys(icalEvent).forEach((key)=>{\n                eventObject[key] = icalEvent[key];\n            });\n            if (eventObject.content && typeof eventObject.content === \"object\") {\n                // we are going to have the same attachment twice, so mark this to be\n                // resolved just once\n                eventObject.content._resolve = true;\n            }\n            eventObject.filename = false;\n            eventObject.contentType = \"text/calendar; charset=utf-8; method=\" + (eventObject.method || \"PUBLISH\").toString().trim().toUpperCase();\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n        }\n        if (this.mail.html) {\n            if (typeof this.mail.html === \"object\" && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n                html = this.mail.html;\n            } else {\n                html = {\n                    content: this.mail.html\n                };\n            }\n            html.contentType = \"text/html; charset=utf-8\";\n        }\n        [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach((alternative)=>{\n            let data;\n            if (/^data:/i.test(alternative.path || alternative.href)) {\n                alternative = this._processDataUrl(alternative);\n            }\n            data = {\n                contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || \"txt\"),\n                contentTransferEncoding: alternative.contentTransferEncoding\n            };\n            if (alternative.filename) {\n                data.filename = alternative.filename;\n            }\n            if (/^https?:\\/\\//i.test(alternative.path)) {\n                alternative.href = alternative.path;\n                alternative.path = undefined;\n            }\n            if (alternative.raw) {\n                data.raw = alternative.raw;\n            } else if (alternative.path) {\n                data.content = {\n                    path: alternative.path\n                };\n            } else if (alternative.href) {\n                data.content = {\n                    href: alternative.href\n                };\n            } else {\n                data.content = alternative.content || \"\";\n            }\n            if (alternative.encoding) {\n                data.encoding = alternative.encoding;\n            }\n            if (alternative.headers) {\n                data.headers = alternative.headers;\n            }\n            alternatives.push(data);\n        });\n        return alternatives;\n    }\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createMixed(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode(\"multipart/mixed\", {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(\"multipart/mixed\", {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        if (this._useAlternative) {\n            this._createAlternative(node);\n        } else if (this._useRelated) {\n            this._createRelated(node);\n        }\n        [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach((element)=>{\n            // if the element is a html node from related subpart then ignore it\n            if (!this._useRelated || element !== this._htmlNode) {\n                this._createContentNode(node, element);\n            }\n        });\n        return node;\n    }\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createAlternative(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode(\"multipart/alternative\", {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(\"multipart/alternative\", {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        this._alternatives.forEach((alternative)=>{\n            if (this._useRelated && this._htmlNode === alternative) {\n                this._createRelated(node);\n            } else {\n                this._createContentNode(node, alternative);\n            }\n        });\n        return node;\n    }\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createRelated(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode('multipart/related; type=\"text/html\"', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        this._createContentNode(node, this._htmlNode);\n        this._attachments.related.forEach((alternative)=>this._createContentNode(node, alternative));\n        return node;\n    }\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */ _createContentNode(parentNode, element) {\n        element = element || {};\n        element.content = element.content || \"\";\n        let node;\n        let encoding = (element.encoding || \"utf8\").toString().toLowerCase().replace(/[-_\\s]/g, \"\");\n        if (!parentNode) {\n            node = new MimeNode(element.contentType, {\n                filename: element.filename,\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(element.contentType, {\n                filename: element.filename,\n                textEncoding: this.mail.textEncoding,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        // add custom headers\n        if (element.headers) {\n            node.addHeader(element.headers);\n        }\n        if (element.cid) {\n            node.setHeader(\"Content-Id\", \"<\" + element.cid.replace(/[<>]/g, \"\") + \">\");\n        }\n        if (element.contentTransferEncoding) {\n            node.setHeader(\"Content-Transfer-Encoding\", element.contentTransferEncoding);\n        } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n            node.setHeader(\"Content-Transfer-Encoding\", this.mail.encoding);\n        }\n        if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n            node.setHeader(\"Content-Disposition\", element.contentDisposition || (element.cid && /^image\\//i.test(element.contentType) ? \"inline\" : \"attachment\"));\n        }\n        if (typeof element.content === \"string\" && ![\n            \"utf8\",\n            \"usascii\",\n            \"ascii\"\n        ].includes(encoding)) {\n            element.content = Buffer.from(element.content, encoding);\n        }\n        // prefer pregenerated raw content\n        if (element.raw) {\n            node.setRaw(element.raw);\n        } else {\n            node.setContent(element.content);\n        }\n        return node;\n    }\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */ _processDataUrl(element) {\n        let parsedDataUri;\n        if ((element.path || element.href).match(/^data:/)) {\n            parsedDataUri = parseDataURI(element.path || element.href);\n        }\n        if (!parsedDataUri) {\n            return element;\n        }\n        element.content = parsedDataUri.data;\n        element.contentType = element.contentType || parsedDataUri.contentType;\n        if (\"path\" in element) {\n            element.path = false;\n        }\n        if (\"href\" in element) {\n            element.href = false;\n        }\n        return element;\n    }\n}\nmodule.exports = MailComposer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mailer/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/mailer/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst mimeTypes = __webpack_require__(/*! ../mime-funcs/mime-types */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\");\nconst MailComposer = __webpack_require__(/*! ../mail-composer */ \"(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js\");\nconst DKIM = __webpack_require__(/*! ../dkim */ \"(rsc)/./node_modules/nodemailer/lib/dkim/index.js\");\nconst httpProxyClient = __webpack_require__(/*! ../smtp-connection/http-proxy-client */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst MailMessage = __webpack_require__(/*! ./mail-message */ \"(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Creates an object for exposing the Mail API\n *\n * @constructor\n * @param {Object} transporter Transport object instance to pass the mails to\n */ class Mail extends EventEmitter {\n    constructor(transporter, options, defaults){\n        super();\n        this.options = options || {};\n        this._defaults = defaults || {};\n        this._defaultPlugins = {\n            compile: [\n                (...args)=>this._convertDataImages(...args)\n            ],\n            stream: []\n        };\n        this._userPlugins = {\n            compile: [],\n            stream: []\n        };\n        this.meta = new Map();\n        this.dkim = this.options.dkim ? new DKIM(this.options.dkim) : false;\n        this.transporter = transporter;\n        this.transporter.mailer = this;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"mail\"\n        });\n        this.logger.debug({\n            tnx: \"create\"\n        }, \"Creating transport: %s\", this.getVersionString());\n        // setup emit handlers for the transporter\n        if (typeof this.transporter.on === \"function\") {\n            // deprecated log interface\n            this.transporter.on(\"log\", (log)=>{\n                this.logger.debug({\n                    tnx: \"transport\"\n                }, \"%s: %s\", log.type, log.message);\n            });\n            // transporter errors\n            this.transporter.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"transport\"\n                }, \"Transport Error: %s\", err.message);\n                this.emit(\"error\", err);\n            });\n            // indicates if the sender has became idle\n            this.transporter.on(\"idle\", (...args)=>{\n                this.emit(\"idle\", ...args);\n            });\n        }\n        /**\n         * Optional methods passed to the underlying transport object\n         */ [\n            \"close\",\n            \"isIdle\",\n            \"verify\"\n        ].forEach((method)=>{\n            this[method] = (...args)=>{\n                if (typeof this.transporter[method] === \"function\") {\n                    if (method === \"verify\" && typeof this.getSocket === \"function\") {\n                        this.transporter.getSocket = this.getSocket;\n                        this.getSocket = false;\n                    }\n                    return this.transporter[method](...args);\n                } else {\n                    this.logger.warn({\n                        tnx: \"transport\",\n                        methodName: method\n                    }, \"Non existing method %s called for transport\", method);\n                    return false;\n                }\n            };\n        });\n        // setup proxy handling\n        if (this.options.proxy && typeof this.options.proxy === \"string\") {\n            this.setupProxy(this.options.proxy);\n        }\n    }\n    use(step, plugin) {\n        step = (step || \"\").toString();\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            this._userPlugins[step] = [\n                plugin\n            ];\n        } else {\n            this._userPlugins[step].push(plugin);\n        }\n        return this;\n    }\n    /**\n     * Sends an email using the preselected transport object\n     *\n     * @param {Object} data E-data description\n     * @param {Function?} callback Callback to run once the sending succeeded or failed\n     */ sendMail(data, callback = null) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        if (typeof this.getSocket === \"function\") {\n            this.transporter.getSocket = this.getSocket;\n            this.getSocket = false;\n        }\n        let mail = new MailMessage(this, data);\n        this.logger.debug({\n            tnx: \"transport\",\n            name: this.transporter.name,\n            version: this.transporter.version,\n            action: \"send\"\n        }, \"Sending mail using %s/%s\", this.transporter.name, this.transporter.version);\n        this._processPlugins(\"compile\", mail, (err)=>{\n            if (err) {\n                this.logger.error({\n                    err,\n                    tnx: \"plugin\",\n                    action: \"compile\"\n                }, \"PluginCompile Error: %s\", err.message);\n                return callback(err);\n            }\n            mail.message = new MailComposer(mail.data).compile();\n            mail.setMailerHeader();\n            mail.setPriorityHeaders();\n            mail.setListHeaders();\n            this._processPlugins(\"stream\", mail, (err)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"plugin\",\n                        action: \"stream\"\n                    }, \"PluginStream Error: %s\", err.message);\n                    return callback(err);\n                }\n                if (mail.data.dkim || this.dkim) {\n                    mail.message.processFunc((input)=>{\n                        let dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : this.dkim;\n                        this.logger.debug({\n                            tnx: \"DKIM\",\n                            messageId: mail.message.messageId(),\n                            dkimDomains: dkim.keys.map((key)=>key.keySelector + \".\" + key.domainName).join(\", \")\n                        }, \"Signing outgoing message with %s keys\", dkim.keys.length);\n                        return dkim.sign(input, mail.data._dkim);\n                    });\n                }\n                this.transporter.send(mail, (...args)=>{\n                    if (args[0]) {\n                        this.logger.error({\n                            err: args[0],\n                            tnx: \"transport\",\n                            action: \"send\"\n                        }, \"Send Error: %s\", args[0].message);\n                    }\n                    callback(...args);\n                });\n            });\n        });\n        return promise;\n    }\n    getVersionString() {\n        return util.format(\"%s (%s; +%s; %s/%s)\", packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);\n    }\n    _processPlugins(step, mail, callback) {\n        step = (step || \"\").toString();\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            return callback();\n        }\n        let userPlugins = this._userPlugins[step] || [];\n        let defaultPlugins = this._defaultPlugins[step] || [];\n        if (userPlugins.length) {\n            this.logger.debug({\n                tnx: \"transaction\",\n                pluginCount: userPlugins.length,\n                step\n            }, \"Using %s plugins for %s\", userPlugins.length, step);\n        }\n        if (userPlugins.length + defaultPlugins.length === 0) {\n            return callback();\n        }\n        let pos = 0;\n        let block = \"default\";\n        let processPlugins = ()=>{\n            let curplugins = block === \"default\" ? defaultPlugins : userPlugins;\n            if (pos >= curplugins.length) {\n                if (block === \"default\" && userPlugins.length) {\n                    block = \"user\";\n                    pos = 0;\n                    curplugins = userPlugins;\n                } else {\n                    return callback();\n                }\n            }\n            let plugin = curplugins[pos++];\n            plugin(mail, (err)=>{\n                if (err) {\n                    return callback(err);\n                }\n                processPlugins();\n            });\n        };\n        processPlugins();\n    }\n    /**\n     * Sets up proxy handler for a Nodemailer object\n     *\n     * @param {String} proxyUrl Proxy configuration url\n     */ setupProxy(proxyUrl) {\n        let proxy = urllib.parse(proxyUrl);\n        // setup socket handler for the mailer object\n        this.getSocket = (options, callback)=>{\n            let protocol = proxy.protocol.replace(/:$/, \"\").toLowerCase();\n            if (this.meta.has(\"proxy_handler_\" + protocol)) {\n                return this.meta.get(\"proxy_handler_\" + protocol)(proxy, options, callback);\n            }\n            switch(protocol){\n                // Connect using a HTTP CONNECT method\n                case \"http\":\n                case \"https\":\n                    httpProxyClient(proxy.href, options.port, options.host, (err, socket)=>{\n                        if (err) {\n                            return callback(err);\n                        }\n                        return callback(null, {\n                            connection: socket\n                        });\n                    });\n                    return;\n                case \"socks\":\n                case \"socks5\":\n                case \"socks4\":\n                case \"socks4a\":\n                    {\n                        if (!this.meta.has(\"proxy_socks_module\")) {\n                            return callback(new Error(\"Socks module not loaded\"));\n                        }\n                        let connect = (ipaddress)=>{\n                            let proxyV2 = !!this.meta.get(\"proxy_socks_module\").SocksClient;\n                            let socksClient = proxyV2 ? this.meta.get(\"proxy_socks_module\").SocksClient : this.meta.get(\"proxy_socks_module\");\n                            let proxyType = Number(proxy.protocol.replace(/\\D/g, \"\")) || 5;\n                            let connectionOpts = {\n                                proxy: {\n                                    ipaddress,\n                                    port: Number(proxy.port),\n                                    type: proxyType\n                                },\n                                [proxyV2 ? \"destination\" : \"target\"]: {\n                                    host: options.host,\n                                    port: options.port\n                                },\n                                command: \"connect\"\n                            };\n                            if (proxy.auth) {\n                                let username = decodeURIComponent(proxy.auth.split(\":\").shift());\n                                let password = decodeURIComponent(proxy.auth.split(\":\").pop());\n                                if (proxyV2) {\n                                    connectionOpts.proxy.userId = username;\n                                    connectionOpts.proxy.password = password;\n                                } else if (proxyType === 4) {\n                                    connectionOpts.userid = username;\n                                } else {\n                                    connectionOpts.authentication = {\n                                        username,\n                                        password\n                                    };\n                                }\n                            }\n                            socksClient.createConnection(connectionOpts, (err, info)=>{\n                                if (err) {\n                                    return callback(err);\n                                }\n                                return callback(null, {\n                                    connection: info.socket || info\n                                });\n                            });\n                        };\n                        if (net.isIP(proxy.hostname)) {\n                            return connect(proxy.hostname);\n                        }\n                        return dns.resolve(proxy.hostname, (err, address)=>{\n                            if (err) {\n                                return callback(err);\n                            }\n                            connect(Array.isArray(address) ? address[0] : address);\n                        });\n                    }\n            }\n            callback(new Error(\"Unknown proxy configuration\"));\n        };\n    }\n    _convertDataImages(mail, callback) {\n        if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {\n            return callback();\n        }\n        mail.resolveContent(mail.data, \"html\", (err, html)=>{\n            if (err) {\n                return callback(err);\n            }\n            let cidCounter = 0;\n            html = (html || \"\").toString().replace(/(<img\\b[^<>]{0,1024} src\\s{0,20}=[\\s\"']{0,20})(data:([^;]+);[^\"'>\\s]+)/gi, (match, prefix, dataUri, mimeType)=>{\n                let cid = crypto.randomBytes(10).toString(\"hex\") + \"@localhost\";\n                if (!mail.data.attachments) {\n                    mail.data.attachments = [];\n                }\n                if (!Array.isArray(mail.data.attachments)) {\n                    mail.data.attachments = [].concat(mail.data.attachments || []);\n                }\n                mail.data.attachments.push({\n                    path: dataUri,\n                    cid,\n                    filename: \"image-\" + ++cidCounter + \".\" + mimeTypes.detectExtension(mimeType)\n                });\n                return prefix + \"cid:\" + cid;\n            });\n            mail.data.html = html;\n            callback();\n        });\n    }\n    set(key, value) {\n        return this.meta.set(key, value);\n    }\n    get(key) {\n        return this.meta.get(key);\n    }\n}\nmodule.exports = Mail;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mailer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mailer/mail-message.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst MimeNode = __webpack_require__(/*! ../mime-node */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nclass MailMessage {\n    constructor(mailer, data){\n        this.mailer = mailer;\n        this.data = {};\n        this.message = null;\n        data = data || {};\n        let options = mailer.options || {};\n        let defaults = mailer._defaults || {};\n        Object.keys(data).forEach((key)=>{\n            this.data[key] = data[key];\n        });\n        this.data.headers = this.data.headers || {};\n        // apply defaults\n        Object.keys(defaults).forEach((key)=>{\n            if (!(key in this.data)) {\n                this.data[key] = defaults[key];\n            } else if (key === \"headers\") {\n                // headers is a special case. Allow setting individual default headers\n                Object.keys(defaults.headers).forEach((key)=>{\n                    if (!(key in this.data.headers)) {\n                        this.data.headers[key] = defaults.headers[key];\n                    }\n                });\n            }\n        });\n        // force specific keys from transporter options\n        [\n            \"disableFileAccess\",\n            \"disableUrlAccess\",\n            \"normalizeHeaderKey\"\n        ].forEach((key)=>{\n            if (key in options) {\n                this.data[key] = options[key];\n            }\n        });\n    }\n    resolveContent(...args) {\n        return shared.resolveContent(...args);\n    }\n    resolveAll(callback) {\n        let keys = [\n            [\n                this.data,\n                \"html\"\n            ],\n            [\n                this.data,\n                \"text\"\n            ],\n            [\n                this.data,\n                \"watchHtml\"\n            ],\n            [\n                this.data,\n                \"amp\"\n            ],\n            [\n                this.data,\n                \"icalEvent\"\n            ]\n        ];\n        if (this.data.alternatives && this.data.alternatives.length) {\n            this.data.alternatives.forEach((alternative, i)=>{\n                keys.push([\n                    this.data.alternatives,\n                    i\n                ]);\n            });\n        }\n        if (this.data.attachments && this.data.attachments.length) {\n            this.data.attachments.forEach((attachment, i)=>{\n                if (!attachment.filename) {\n                    attachment.filename = (attachment.path || attachment.href || \"\").split(\"/\").pop().split(\"?\").shift() || \"attachment-\" + (i + 1);\n                    if (attachment.filename.indexOf(\".\") < 0) {\n                        attachment.filename += \".\" + mimeFuncs.detectExtension(attachment.contentType);\n                    }\n                }\n                if (!attachment.contentType) {\n                    attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || \"bin\");\n                }\n                keys.push([\n                    this.data.attachments,\n                    i\n                ]);\n            });\n        }\n        let mimeNode = new MimeNode();\n        let addressKeys = [\n            \"from\",\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"sender\",\n            \"replyTo\"\n        ];\n        addressKeys.forEach((address)=>{\n            let value;\n            if (this.message) {\n                value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === \"replyTo\" ? \"reply-to\" : address)) || []);\n            } else if (this.data[address]) {\n                value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);\n            }\n            if (value && value.length) {\n                this.data[address] = value;\n            } else if (address in this.data) {\n                this.data[address] = null;\n            }\n        });\n        let singleKeys = [\n            \"from\",\n            \"sender\"\n        ];\n        singleKeys.forEach((address)=>{\n            if (this.data[address]) {\n                this.data[address] = this.data[address].shift();\n            }\n        });\n        let pos = 0;\n        let resolveNext = ()=>{\n            if (pos >= keys.length) {\n                return callback(null, this.data);\n            }\n            let args = keys[pos++];\n            if (!args[0] || !args[0][args[1]]) {\n                return resolveNext();\n            }\n            shared.resolveContent(...args, (err, value)=>{\n                if (err) {\n                    return callback(err);\n                }\n                let node = {\n                    content: value\n                };\n                if (args[0][args[1]] && typeof args[0][args[1]] === \"object\" && !Buffer.isBuffer(args[0][args[1]])) {\n                    Object.keys(args[0][args[1]]).forEach((key)=>{\n                        if (!(key in node) && ![\n                            \"content\",\n                            \"path\",\n                            \"href\",\n                            \"raw\"\n                        ].includes(key)) {\n                            node[key] = args[0][args[1]][key];\n                        }\n                    });\n                }\n                args[0][args[1]] = node;\n                resolveNext();\n            });\n        };\n        setImmediate(()=>resolveNext());\n    }\n    normalize(callback) {\n        let envelope = this.data.envelope || this.message.getEnvelope();\n        let messageId = this.message.messageId();\n        this.resolveAll((err, data)=>{\n            if (err) {\n                return callback(err);\n            }\n            data.envelope = envelope;\n            data.messageId = messageId;\n            [\n                \"html\",\n                \"text\",\n                \"watchHtml\",\n                \"amp\"\n            ].forEach((key)=>{\n                if (data[key] && data[key].content) {\n                    if (typeof data[key].content === \"string\") {\n                        data[key] = data[key].content;\n                    } else if (Buffer.isBuffer(data[key].content)) {\n                        data[key] = data[key].content.toString();\n                    }\n                }\n            });\n            if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n                data.icalEvent.content = data.icalEvent.content.toString(\"base64\");\n                data.icalEvent.encoding = \"base64\";\n            }\n            if (data.alternatives && data.alternatives.length) {\n                data.alternatives.forEach((alternative)=>{\n                    if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n                        alternative.content = alternative.content.toString(\"base64\");\n                        alternative.encoding = \"base64\";\n                    }\n                });\n            }\n            if (data.attachments && data.attachments.length) {\n                data.attachments.forEach((attachment)=>{\n                    if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n                        attachment.content = attachment.content.toString(\"base64\");\n                        attachment.encoding = \"base64\";\n                    }\n                });\n            }\n            data.normalizedHeaders = {};\n            Object.keys(data.headers || {}).forEach((key)=>{\n                let value = [].concat(data.headers[key] || []).shift();\n                value = value && value.value || value;\n                if (value) {\n                    if ([\n                        \"references\",\n                        \"in-reply-to\",\n                        \"message-id\",\n                        \"content-id\"\n                    ].includes(key)) {\n                        value = this.message._encodeHeaderValue(key, value);\n                    }\n                    data.normalizedHeaders[key] = value;\n                }\n            });\n            if (data.list && typeof data.list === \"object\") {\n                let listHeaders = this._getListHeaders(data.list);\n                listHeaders.forEach((entry)=>{\n                    data.normalizedHeaders[entry.key] = entry.value.map((val)=>val && val.value || val).join(\", \");\n                });\n            }\n            if (data.references) {\n                data.normalizedHeaders.references = this.message._encodeHeaderValue(\"references\", data.references);\n            }\n            if (data.inReplyTo) {\n                data.normalizedHeaders[\"in-reply-to\"] = this.message._encodeHeaderValue(\"in-reply-to\", data.inReplyTo);\n            }\n            return callback(null, data);\n        });\n    }\n    setMailerHeader() {\n        if (!this.message || !this.data.xMailer) {\n            return;\n        }\n        this.message.setHeader(\"X-Mailer\", this.data.xMailer);\n    }\n    setPriorityHeaders() {\n        if (!this.message || !this.data.priority) {\n            return;\n        }\n        switch((this.data.priority || \"\").toString().toLowerCase()){\n            case \"high\":\n                this.message.setHeader(\"X-Priority\", \"1 (Highest)\");\n                this.message.setHeader(\"X-MSMail-Priority\", \"High\");\n                this.message.setHeader(\"Importance\", \"High\");\n                break;\n            case \"low\":\n                this.message.setHeader(\"X-Priority\", \"5 (Lowest)\");\n                this.message.setHeader(\"X-MSMail-Priority\", \"Low\");\n                this.message.setHeader(\"Importance\", \"Low\");\n                break;\n            default:\n        }\n    }\n    setListHeaders() {\n        if (!this.message || !this.data.list || typeof this.data.list !== \"object\") {\n            return;\n        }\n        // add optional List-* headers\n        if (this.data.list && typeof this.data.list === \"object\") {\n            this._getListHeaders(this.data.list).forEach((listHeader)=>{\n                listHeader.value.forEach((value)=>{\n                    this.message.addHeader(listHeader.key, value);\n                });\n            });\n        }\n    }\n    _getListHeaders(listData) {\n        // make sure an url looks like <protocol:url>\n        return Object.keys(listData).map((key)=>({\n                key: \"list-\" + key.toLowerCase().trim(),\n                value: [].concat(listData[key] || []).map((value)=>({\n                        prepared: true,\n                        foldLines: true,\n                        value: [].concat(value || []).map((value)=>{\n                            if (typeof value === \"string\") {\n                                value = {\n                                    url: value\n                                };\n                            }\n                            if (value && value.url) {\n                                if (key.toLowerCase().trim() === \"id\") {\n                                    // List-ID: \"comment\" <domain>\n                                    let comment = value.comment || \"\";\n                                    if (mimeFuncs.isPlainText(comment)) {\n                                        comment = '\"' + comment + '\"';\n                                    } else {\n                                        comment = mimeFuncs.encodeWord(comment);\n                                    }\n                                    return (value.comment ? comment + \" \" : \"\") + this._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, \"\");\n                                }\n                                // List-*: <http://domain> (comment)\n                                let comment = value.comment || \"\";\n                                if (!mimeFuncs.isPlainText(comment)) {\n                                    comment = mimeFuncs.encodeWord(comment);\n                                }\n                                return this._formatListUrl(value.url) + (value.comment ? \" (\" + comment + \")\" : \"\");\n                            }\n                            return \"\";\n                        }).filter((value)=>value).join(\", \")\n                    }))\n            }));\n    }\n    _formatListUrl(url) {\n        url = url.replace(/[\\s<]+|[\\s>]+/g, \"\");\n        if (/^(https?|mailto|ftp):/.test(url)) {\n            return \"<\" + url + \">\";\n        }\n        if (/^[^@]+@[^@]+$/.test(url)) {\n            return \"<mailto:\" + url + \">\";\n        }\n        return \"<http://\" + url + \">\";\n    }\n}\nmodule.exports = MailMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-funcs/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-control-regex:0 */ \nconst base64 = __webpack_require__(/*! ../base64 */ \"(rsc)/./node_modules/nodemailer/lib/base64/index.js\");\nconst qp = __webpack_require__(/*! ../qp */ \"(rsc)/./node_modules/nodemailer/lib/qp/index.js\");\nconst mimeTypes = __webpack_require__(/*! ./mime-types */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\");\nmodule.exports = {\n    /**\n     * Checks if a value is plaintext string (uses only printable 7bit chars)\n     *\n     * @param {String} value String to be tested\n     * @returns {Boolean} true if it is a plaintext string\n     */ isPlainText (value, isParam) {\n        const re = isParam ? /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\"\\u0080-\\uFFFF]/ : /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/;\n        if (typeof value !== \"string\" || re.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    },\n    /**\n     * Checks if a multi line string containes lines longer than the selected value.\n     *\n     * Useful when detecting if a mail message needs any processing at all –\n     * if only plaintext characters are used and lines are short, then there is\n     * no need to encode the values in any way. If the value is plaintext but has\n     * longer lines then allowed, then use format=flowed\n     *\n     * @param {Number} lineLength Max line length to check for\n     * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n     */ hasLongerLines (str, lineLength) {\n        if (str.length > 128 * 1024) {\n            // do not test strings longer than 128kB\n            return true;\n        }\n        return new RegExp(\"^.{\" + (lineLength + 1) + \",}\", \"m\").test(str);\n    },\n    /**\n     * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @return {String} Single or several mime words joined together\n     */ encodeWord (data, mimeWordEncoding, maxLength) {\n        mimeWordEncoding = (mimeWordEncoding || \"Q\").toString().toUpperCase().trim().charAt(0);\n        maxLength = maxLength || 0;\n        let encodedStr;\n        let toCharset = \"UTF-8\";\n        if (maxLength && maxLength > 7 + toCharset.length) {\n            maxLength -= 7 + toCharset.length;\n        }\n        if (mimeWordEncoding === \"Q\") {\n            // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n            encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, (chr)=>{\n                let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n                if (chr === \" \") {\n                    return \"_\";\n                } else {\n                    return \"=\" + (ord.length === 1 ? \"0\" + ord : ord);\n                }\n            });\n        } else if (mimeWordEncoding === \"B\") {\n            encodedStr = typeof data === \"string\" ? data : base64.encode(data);\n            maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;\n        }\n        if (maxLength && (mimeWordEncoding !== \"B\" ? encodedStr : base64.encode(data)).length > maxLength) {\n            if (mimeWordEncoding === \"Q\") {\n                encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join(\"?= =?\" + toCharset + \"?\" + mimeWordEncoding + \"?\");\n            } else {\n                // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n                let parts = [];\n                let lpart = \"\";\n                for(let i = 0, len = encodedStr.length; i < len; i++){\n                    let chr = encodedStr.charAt(i);\n                    if (/[\\ud83c\\ud83d\\ud83e]/.test(chr) && i < len - 1) {\n                        // composite emoji byte, so add the next byte as well\n                        chr += encodedStr.charAt(++i);\n                    }\n                    // check if we can add this character to the existing string\n                    // without breaking byte length limit\n                    if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n                        lpart += chr;\n                    } else {\n                        // we hit the length limit, so push the existing string and start over\n                        parts.push(base64.encode(lpart));\n                        lpart = chr;\n                    }\n                }\n                if (lpart) {\n                    parts.push(base64.encode(lpart));\n                }\n                if (parts.length > 1) {\n                    encodedStr = parts.join(\"?= =?\" + toCharset + \"?\" + mimeWordEncoding + \"?\");\n                } else {\n                    encodedStr = parts.join(\"\");\n                }\n            }\n        } else if (mimeWordEncoding === \"B\") {\n            encodedStr = base64.encode(data);\n        }\n        return \"=?\" + toCharset + \"?\" + mimeWordEncoding + \"?\" + encodedStr + (encodedStr.substr(-2) === \"?=\" ? \"\" : \"?=\");\n    },\n    /**\n     * Finds word sequences with non ascii text and converts these to mime words\n     *\n     * @param {String} value String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match\n     * @return {String} String with possible mime words\n     */ encodeWords (value, mimeWordEncoding, maxLength, encodeAll) {\n        maxLength = maxLength || 0;\n        let encodedValue;\n        // find first word with a non-printable ascii or special symbol in it\n        let firstMatch = value.match(/(?:^|\\s)([^\\s]*[\"\\u0080-\\uFFFF])/);\n        if (!firstMatch) {\n            return value;\n        }\n        if (encodeAll) {\n            // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything\n            return this.encodeWord(value, mimeWordEncoding, maxLength);\n        }\n        // find the last word with a non-printable ascii in it\n        let lastMatch = value.match(/([\"\\u0080-\\uFFFF][^\\s]*)[^\"\\u0080-\\uFFFF]*$/);\n        if (!lastMatch) {\n            // should not happen\n            return value;\n        }\n        let startIndex = firstMatch.index + (firstMatch[0].match(/[^\\s]/) || {\n            index: 0\n        }).index;\n        let endIndex = lastMatch.index + (lastMatch[1] || \"\").length;\n        encodedValue = (startIndex ? value.substr(0, startIndex) : \"\") + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || \"Q\", maxLength) + (endIndex < value.length ? value.substr(endIndex) : \"\");\n        return encodedValue;\n    },\n    /**\n     * Joins parsed header value together as 'value; param1=value1; param2=value2'\n     * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n     *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     * @param {Object} structured Parsed header value\n     * @return {String} joined header value\n     */ buildHeaderValue (structured) {\n        let paramsArray = [];\n        Object.keys(structured.params || {}).forEach((param)=>{\n            // filename might include unicode characters so it is a special case\n            // other values probably do not\n            let value = structured.params[param];\n            if (!this.isPlainText(value, true) || value.length >= 75) {\n                this.buildHeaderParam(param, value, 50).forEach((encodedParam)=>{\n                    if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === \"*\") {\n                        paramsArray.push(encodedParam.key + \"=\" + encodedParam.value);\n                    } else {\n                        paramsArray.push(encodedParam.key + \"=\" + JSON.stringify(encodedParam.value));\n                    }\n                });\n            } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n                paramsArray.push(param + \"=\" + JSON.stringify(value));\n            } else {\n                paramsArray.push(param + \"=\" + value);\n            }\n        });\n        return structured.value + (paramsArray.length ? \"; \" + paramsArray.join(\"; \") : \"\");\n    },\n    /**\n     * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n     * Useful for splitting long parameter values.\n     *\n     * For example\n     *      title=\"unicode string\"\n     * becomes\n     *     title*0*=utf-8''unicode\n     *     title*1*=%20string\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {Number} [maxLength=50] Max length for generated chunks\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {Array} A list of encoded keys and headers\n     */ buildHeaderParam (key, data, maxLength) {\n        let list = [];\n        let encodedStr = typeof data === \"string\" ? data : (data || \"\").toString();\n        let encodedStrArr;\n        let chr, ord;\n        let line;\n        let startPos = 0;\n        let i, len;\n        maxLength = maxLength || 50;\n        // process ascii only text\n        if (this.isPlainText(data, true)) {\n            // check if conversion is even needed\n            if (encodedStr.length <= maxLength) {\n                return [\n                    {\n                        key,\n                        value: encodedStr\n                    }\n                ];\n            }\n            encodedStr = encodedStr.replace(new RegExp(\".{\" + maxLength + \"}\", \"g\"), (str)=>{\n                list.push({\n                    line: str\n                });\n                return \"\";\n            });\n            if (encodedStr) {\n                list.push({\n                    line: encodedStr\n                });\n            }\n        } else {\n            if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n                // string containts surrogate pairs, so normalize it to an array of bytes\n                encodedStrArr = [];\n                for(i = 0, len = encodedStr.length; i < len; i++){\n                    chr = encodedStr.charAt(i);\n                    ord = chr.charCodeAt(0);\n                    if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n                        chr += encodedStr.charAt(i + 1);\n                        encodedStrArr.push(chr);\n                        i++;\n                    } else {\n                        encodedStrArr.push(chr);\n                    }\n                }\n                encodedStr = encodedStrArr;\n            }\n            // first line includes the charset and language info and needs to be encoded\n            // even if it does not contain any unicode characters\n            line = \"utf-8''\";\n            let encoded = true;\n            startPos = 0;\n            // process text with unicode or special chars\n            for(i = 0, len = encodedStr.length; i < len; i++){\n                chr = encodedStr[i];\n                if (encoded) {\n                    chr = this.safeEncodeURIComponent(chr);\n                } else {\n                    // try to urlencode current char\n                    chr = chr === \" \" ? chr : this.safeEncodeURIComponent(chr);\n                    // By default it is not required to encode a line, the need\n                    // only appears when the string contains unicode or special chars\n                    // in this case we start processing the line over and encode all chars\n                    if (chr !== encodedStr[i]) {\n                        // Check if it is even possible to add the encoded char to the line\n                        // If not, there is no reason to use this line, just push it to the list\n                        // and start a new line with the char that needs encoding\n                        if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n                            list.push({\n                                line,\n                                encoded\n                            });\n                            line = \"\";\n                            startPos = i - 1;\n                        } else {\n                            encoded = true;\n                            i = startPos;\n                            line = \"\";\n                            continue;\n                        }\n                    }\n                }\n                // if the line is already too long, push it to the list and start a new one\n                if ((line + chr).length >= maxLength) {\n                    list.push({\n                        line,\n                        encoded\n                    });\n                    line = chr = encodedStr[i] === \" \" ? \" \" : this.safeEncodeURIComponent(encodedStr[i]);\n                    if (chr === encodedStr[i]) {\n                        encoded = false;\n                        startPos = i - 1;\n                    } else {\n                        encoded = true;\n                    }\n                } else {\n                    line += chr;\n                }\n            }\n            if (line) {\n                list.push({\n                    line,\n                    encoded\n                });\n            }\n        }\n        return list.map((item, i)=>({\n                // encoded lines: {name}*{part}*\n                // unencoded lines: {name}*{part}\n                // if any line needs to be encoded then the first line (part==0) is always encoded\n                key: key + \"*\" + i + (item.encoded ? \"*\" : \"\"),\n                value: item.line\n            }));\n    },\n    /**\n     * Parses a header value with key=value arguments into a structured\n     * object.\n     *\n     *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n     *   {\n     *     'value': 'text/plain',\n     *     'params': {\n     *       'charset': 'UTF-8'\n     *     }\n     *   }\n     *\n     * @param {String} str Header value\n     * @return {Object} Header value as a parsed structure\n     */ parseHeaderValue (str) {\n        let response = {\n            value: false,\n            params: {}\n        };\n        let key = false;\n        let value = \"\";\n        let type = \"value\";\n        let quote = false;\n        let escaped = false;\n        let chr;\n        for(let i = 0, len = str.length; i < len; i++){\n            chr = str.charAt(i);\n            if (type === \"key\") {\n                if (chr === \"=\") {\n                    key = value.trim().toLowerCase();\n                    type = \"value\";\n                    value = \"\";\n                    continue;\n                }\n                value += chr;\n            } else {\n                if (escaped) {\n                    value += chr;\n                } else if (chr === \"\\\\\") {\n                    escaped = true;\n                    continue;\n                } else if (quote && chr === quote) {\n                    quote = false;\n                } else if (!quote && chr === '\"') {\n                    quote = chr;\n                } else if (!quote && chr === \";\") {\n                    if (key === false) {\n                        response.value = value.trim();\n                    } else {\n                        response.params[key] = value.trim();\n                    }\n                    type = \"key\";\n                    value = \"\";\n                } else {\n                    value += chr;\n                }\n                escaped = false;\n            }\n        }\n        if (type === \"value\") {\n            if (key === false) {\n                response.value = value.trim();\n            } else {\n                response.params[key] = value.trim();\n            }\n        } else if (value.trim()) {\n            response.params[value.trim().toLowerCase()] = \"\";\n        }\n        // handle parameter value continuations\n        // https://tools.ietf.org/html/rfc2231#section-3\n        // preprocess values\n        Object.keys(response.params).forEach((key)=>{\n            let actualKey, nr, match, value;\n            if (match = key.match(/(\\*(\\d+)|\\*(\\d+)\\*|\\*)$/)) {\n                actualKey = key.substr(0, match.index);\n                nr = Number(match[2] || match[3]) || 0;\n                if (!response.params[actualKey] || typeof response.params[actualKey] !== \"object\") {\n                    response.params[actualKey] = {\n                        charset: false,\n                        values: []\n                    };\n                }\n                value = response.params[key];\n                if (nr === 0 && match[0].substr(-1) === \"*\" && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n                    response.params[actualKey].charset = match[1] || \"iso-8859-1\";\n                    value = match[2];\n                }\n                response.params[actualKey].values[nr] = value;\n                // remove the old reference\n                delete response.params[key];\n            }\n        });\n        // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n        Object.keys(response.params).forEach((key)=>{\n            let value;\n            if (response.params[key] && Array.isArray(response.params[key].values)) {\n                value = response.params[key].values.map((val)=>val || \"\").join(\"\");\n                if (response.params[key].charset) {\n                    // convert \"%AB\" to \"=?charset?Q?=AB?=\"\n                    response.params[key] = \"=?\" + response.params[key].charset + \"?Q?\" + value// fix invalidly encoded chars\n                    .replace(/[=?_\\s]/g, (s)=>{\n                        let c = s.charCodeAt(0).toString(16);\n                        if (s === \" \") {\n                            return \"_\";\n                        } else {\n                            return \"%\" + (c.length < 2 ? \"0\" : \"\") + c;\n                        }\n                    })// change from urlencoding to percent encoding\n                    .replace(/%/g, \"=\") + \"?=\";\n                } else {\n                    response.params[key] = value;\n                }\n            }\n        });\n        return response;\n    },\n    /**\n     * Returns file extension for a content type string. If no suitable extensions\n     * are found, 'bin' is used as the default extension\n     *\n     * @param {String} mimeType Content type to be checked for\n     * @return {String} File extension\n     */ detectExtension: (mimeType)=>mimeTypes.detectExtension(mimeType),\n    /**\n     * Returns content type for a file extension. If no suitable content types\n     * are found, 'application/octet-stream' is used as the default content type\n     *\n     * @param {String} extension Extension to be checked for\n     * @return {String} File extension\n     */ detectMimeType: (extension)=>mimeTypes.detectMimeType(extension),\n    /**\n     * Folds long lines, useful for folding header lines (afterSpace=false) and\n     * flowed text (afterSpace=true)\n     *\n     * @param {String} str String to be folded\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @param {Boolean} afterSpace If true, leave a space in th end of a line\n     * @return {String} String with folded lines\n     */ foldLines (str, lineLength, afterSpace) {\n        str = (str || \"\").toString();\n        lineLength = lineLength || 76;\n        let pos = 0, len = str.length, result = \"\", line, match;\n        while(pos < len){\n            line = str.substr(pos, lineLength);\n            if (line.length < lineLength) {\n                result += line;\n                break;\n            }\n            if (match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/)) {\n                line = match[0];\n                result += line;\n                pos += line.length;\n                continue;\n            } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || \"\").length : 0) < line.length) {\n                line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || \"\").length : 0)));\n            } else if (match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/)) {\n                line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || \"\").length : 0));\n            }\n            result += line;\n            pos += line.length;\n            if (pos < len) {\n                result += \"\\r\\n\";\n            }\n        }\n        return result;\n    },\n    /**\n     * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n     *\n     * @param {String} str Mime encoded string to be split up\n     * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n     * @return {Array} Split string\n     */ splitMimeEncodedString: (str, maxlen)=>{\n        let curLine, match, chr, done, lines = [];\n        // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n        maxlen = Math.max(maxlen || 0, 12);\n        while(str.length){\n            curLine = str.substr(0, maxlen);\n            // move incomplete escaped char back to main\n            if (match = curLine.match(/[=][0-9A-F]?$/i)) {\n                curLine = curLine.substr(0, match.index);\n            }\n            done = false;\n            while(!done){\n                done = true;\n                // check if not middle of a unicode char sequence\n                if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {\n                    chr = parseInt(match[1], 16);\n                    // invalid sequence, move one char back anc recheck\n                    if (chr < 0xc2 && chr > 0x7f) {\n                        curLine = curLine.substr(0, curLine.length - 3);\n                        done = false;\n                    }\n                }\n            }\n            if (curLine.length) {\n                lines.push(curLine);\n            }\n            str = str.substr(curLine.length);\n        }\n        return lines;\n    },\n    encodeURICharComponent: (chr)=>{\n        let res = \"\";\n        let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n        if (ord.length % 2) {\n            ord = \"0\" + ord;\n        }\n        if (ord.length > 2) {\n            for(let i = 0, len = ord.length / 2; i < len; i++){\n                res += \"%\" + ord.substr(i, 2);\n            }\n        } else {\n            res += \"%\" + ord;\n        }\n        return res;\n    },\n    safeEncodeURIComponent (str) {\n        str = (str || \"\").toString();\n        try {\n            // might throw if we try to encode invalid sequences, eg. partial emoji\n            str = encodeURIComponent(str);\n        } catch (E) {\n            // should never run\n            return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, \"\");\n        }\n        // ensure chars that are not handled by encodeURICompent are converted as well\n        return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, (chr)=>this.encodeURICharComponent(chr));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-funcs/mime-types.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint quote-props: 0 */ \nconst path = __webpack_require__(/*! path */ \"path\");\nconst defaultMimeType = \"application/octet-stream\";\nconst defaultExtension = \"bin\";\nconst mimeTypes = new Map([\n    [\n        \"application/acad\",\n        \"dwg\"\n    ],\n    [\n        \"application/applixware\",\n        \"aw\"\n    ],\n    [\n        \"application/arj\",\n        \"arj\"\n    ],\n    [\n        \"application/atom+xml\",\n        \"xml\"\n    ],\n    [\n        \"application/atomcat+xml\",\n        \"atomcat\"\n    ],\n    [\n        \"application/atomsvc+xml\",\n        \"atomsvc\"\n    ],\n    [\n        \"application/base64\",\n        [\n            \"mm\",\n            \"mme\"\n        ]\n    ],\n    [\n        \"application/binhex\",\n        \"hqx\"\n    ],\n    [\n        \"application/binhex4\",\n        \"hqx\"\n    ],\n    [\n        \"application/book\",\n        [\n            \"book\",\n            \"boo\"\n        ]\n    ],\n    [\n        \"application/ccxml+xml,\",\n        \"ccxml\"\n    ],\n    [\n        \"application/cdf\",\n        \"cdf\"\n    ],\n    [\n        \"application/cdmi-capability\",\n        \"cdmia\"\n    ],\n    [\n        \"application/cdmi-container\",\n        \"cdmic\"\n    ],\n    [\n        \"application/cdmi-domain\",\n        \"cdmid\"\n    ],\n    [\n        \"application/cdmi-object\",\n        \"cdmio\"\n    ],\n    [\n        \"application/cdmi-queue\",\n        \"cdmiq\"\n    ],\n    [\n        \"application/clariscad\",\n        \"ccad\"\n    ],\n    [\n        \"application/commonground\",\n        \"dp\"\n    ],\n    [\n        \"application/cu-seeme\",\n        \"cu\"\n    ],\n    [\n        \"application/davmount+xml\",\n        \"davmount\"\n    ],\n    [\n        \"application/drafting\",\n        \"drw\"\n    ],\n    [\n        \"application/dsptype\",\n        \"tsp\"\n    ],\n    [\n        \"application/dssc+der\",\n        \"dssc\"\n    ],\n    [\n        \"application/dssc+xml\",\n        \"xdssc\"\n    ],\n    [\n        \"application/dxf\",\n        \"dxf\"\n    ],\n    [\n        \"application/ecmascript\",\n        [\n            \"js\",\n            \"es\"\n        ]\n    ],\n    [\n        \"application/emma+xml\",\n        \"emma\"\n    ],\n    [\n        \"application/envoy\",\n        \"evy\"\n    ],\n    [\n        \"application/epub+zip\",\n        \"epub\"\n    ],\n    [\n        \"application/excel\",\n        [\n            \"xls\",\n            \"xl\",\n            \"xla\",\n            \"xlb\",\n            \"xlc\",\n            \"xld\",\n            \"xlk\",\n            \"xll\",\n            \"xlm\",\n            \"xlt\",\n            \"xlv\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/exi\",\n        \"exi\"\n    ],\n    [\n        \"application/font-tdpfr\",\n        \"pfr\"\n    ],\n    [\n        \"application/fractals\",\n        \"fif\"\n    ],\n    [\n        \"application/freeloader\",\n        \"frl\"\n    ],\n    [\n        \"application/futuresplash\",\n        \"spl\"\n    ],\n    [\n        \"application/gnutar\",\n        \"tgz\"\n    ],\n    [\n        \"application/groupwise\",\n        \"vew\"\n    ],\n    [\n        \"application/hlp\",\n        \"hlp\"\n    ],\n    [\n        \"application/hta\",\n        \"hta\"\n    ],\n    [\n        \"application/hyperstudio\",\n        \"stk\"\n    ],\n    [\n        \"application/i-deas\",\n        \"unv\"\n    ],\n    [\n        \"application/iges\",\n        [\n            \"iges\",\n            \"igs\"\n        ]\n    ],\n    [\n        \"application/inf\",\n        \"inf\"\n    ],\n    [\n        \"application/internet-property-stream\",\n        \"acx\"\n    ],\n    [\n        \"application/ipfix\",\n        \"ipfix\"\n    ],\n    [\n        \"application/java\",\n        \"class\"\n    ],\n    [\n        \"application/java-archive\",\n        \"jar\"\n    ],\n    [\n        \"application/java-byte-code\",\n        \"class\"\n    ],\n    [\n        \"application/java-serialized-object\",\n        \"ser\"\n    ],\n    [\n        \"application/java-vm\",\n        \"class\"\n    ],\n    [\n        \"application/javascript\",\n        \"js\"\n    ],\n    [\n        \"application/json\",\n        \"json\"\n    ],\n    [\n        \"application/lha\",\n        \"lha\"\n    ],\n    [\n        \"application/lzx\",\n        \"lzx\"\n    ],\n    [\n        \"application/mac-binary\",\n        \"bin\"\n    ],\n    [\n        \"application/mac-binhex\",\n        \"hqx\"\n    ],\n    [\n        \"application/mac-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/mac-compactpro\",\n        \"cpt\"\n    ],\n    [\n        \"application/macbinary\",\n        \"bin\"\n    ],\n    [\n        \"application/mads+xml\",\n        \"mads\"\n    ],\n    [\n        \"application/marc\",\n        \"mrc\"\n    ],\n    [\n        \"application/marcxml+xml\",\n        \"mrcx\"\n    ],\n    [\n        \"application/mathematica\",\n        \"ma\"\n    ],\n    [\n        \"application/mathml+xml\",\n        \"mathml\"\n    ],\n    [\n        \"application/mbedlet\",\n        \"mbd\"\n    ],\n    [\n        \"application/mbox\",\n        \"mbox\"\n    ],\n    [\n        \"application/mcad\",\n        \"mcd\"\n    ],\n    [\n        \"application/mediaservercontrol+xml\",\n        \"mscml\"\n    ],\n    [\n        \"application/metalink4+xml\",\n        \"meta4\"\n    ],\n    [\n        \"application/mets+xml\",\n        \"mets\"\n    ],\n    [\n        \"application/mime\",\n        \"aps\"\n    ],\n    [\n        \"application/mods+xml\",\n        \"mods\"\n    ],\n    [\n        \"application/mp21\",\n        \"m21\"\n    ],\n    [\n        \"application/mp4\",\n        \"mp4\"\n    ],\n    [\n        \"application/mspowerpoint\",\n        [\n            \"ppt\",\n            \"pot\",\n            \"pps\",\n            \"ppz\"\n        ]\n    ],\n    [\n        \"application/msword\",\n        [\n            \"doc\",\n            \"dot\",\n            \"w6w\",\n            \"wiz\",\n            \"word\"\n        ]\n    ],\n    [\n        \"application/mswrite\",\n        \"wri\"\n    ],\n    [\n        \"application/mxf\",\n        \"mxf\"\n    ],\n    [\n        \"application/netmc\",\n        \"mcp\"\n    ],\n    [\n        \"application/octet-stream\",\n        [\n            \"*\"\n        ]\n    ],\n    [\n        \"application/oda\",\n        \"oda\"\n    ],\n    [\n        \"application/oebps-package+xml\",\n        \"opf\"\n    ],\n    [\n        \"application/ogg\",\n        \"ogx\"\n    ],\n    [\n        \"application/olescript\",\n        \"axs\"\n    ],\n    [\n        \"application/onenote\",\n        \"onetoc\"\n    ],\n    [\n        \"application/patch-ops-error+xml\",\n        \"xer\"\n    ],\n    [\n        \"application/pdf\",\n        \"pdf\"\n    ],\n    [\n        \"application/pgp-encrypted\",\n        \"asc\"\n    ],\n    [\n        \"application/pgp-signature\",\n        \"pgp\"\n    ],\n    [\n        \"application/pics-rules\",\n        \"prf\"\n    ],\n    [\n        \"application/pkcs-12\",\n        \"p12\"\n    ],\n    [\n        \"application/pkcs-crl\",\n        \"crl\"\n    ],\n    [\n        \"application/pkcs10\",\n        \"p10\"\n    ],\n    [\n        \"application/pkcs7-mime\",\n        [\n            \"p7c\",\n            \"p7m\"\n        ]\n    ],\n    [\n        \"application/pkcs7-signature\",\n        \"p7s\"\n    ],\n    [\n        \"application/pkcs8\",\n        \"p8\"\n    ],\n    [\n        \"application/pkix-attr-cert\",\n        \"ac\"\n    ],\n    [\n        \"application/pkix-cert\",\n        [\n            \"cer\",\n            \"crt\"\n        ]\n    ],\n    [\n        \"application/pkix-crl\",\n        \"crl\"\n    ],\n    [\n        \"application/pkix-pkipath\",\n        \"pkipath\"\n    ],\n    [\n        \"application/pkixcmp\",\n        \"pki\"\n    ],\n    [\n        \"application/plain\",\n        \"text\"\n    ],\n    [\n        \"application/pls+xml\",\n        \"pls\"\n    ],\n    [\n        \"application/postscript\",\n        [\n            \"ps\",\n            \"ai\",\n            \"eps\"\n        ]\n    ],\n    [\n        \"application/powerpoint\",\n        \"ppt\"\n    ],\n    [\n        \"application/pro_eng\",\n        [\n            \"part\",\n            \"prt\"\n        ]\n    ],\n    [\n        \"application/prs.cww\",\n        \"cww\"\n    ],\n    [\n        \"application/pskc+xml\",\n        \"pskcxml\"\n    ],\n    [\n        \"application/rdf+xml\",\n        \"rdf\"\n    ],\n    [\n        \"application/reginfo+xml\",\n        \"rif\"\n    ],\n    [\n        \"application/relax-ng-compact-syntax\",\n        \"rnc\"\n    ],\n    [\n        \"application/resource-lists+xml\",\n        \"rl\"\n    ],\n    [\n        \"application/resource-lists-diff+xml\",\n        \"rld\"\n    ],\n    [\n        \"application/ringing-tones\",\n        \"rng\"\n    ],\n    [\n        \"application/rls-services+xml\",\n        \"rs\"\n    ],\n    [\n        \"application/rsd+xml\",\n        \"rsd\"\n    ],\n    [\n        \"application/rss+xml\",\n        \"xml\"\n    ],\n    [\n        \"application/rtf\",\n        [\n            \"rtf\",\n            \"rtx\"\n        ]\n    ],\n    [\n        \"application/sbml+xml\",\n        \"sbml\"\n    ],\n    [\n        \"application/scvp-cv-request\",\n        \"scq\"\n    ],\n    [\n        \"application/scvp-cv-response\",\n        \"scs\"\n    ],\n    [\n        \"application/scvp-vp-request\",\n        \"spq\"\n    ],\n    [\n        \"application/scvp-vp-response\",\n        \"spp\"\n    ],\n    [\n        \"application/sdp\",\n        \"sdp\"\n    ],\n    [\n        \"application/sea\",\n        \"sea\"\n    ],\n    [\n        \"application/set\",\n        \"set\"\n    ],\n    [\n        \"application/set-payment-initiation\",\n        \"setpay\"\n    ],\n    [\n        \"application/set-registration-initiation\",\n        \"setreg\"\n    ],\n    [\n        \"application/shf+xml\",\n        \"shf\"\n    ],\n    [\n        \"application/sla\",\n        \"stl\"\n    ],\n    [\n        \"application/smil\",\n        [\n            \"smi\",\n            \"smil\"\n        ]\n    ],\n    [\n        \"application/smil+xml\",\n        \"smi\"\n    ],\n    [\n        \"application/solids\",\n        \"sol\"\n    ],\n    [\n        \"application/sounder\",\n        \"sdr\"\n    ],\n    [\n        \"application/sparql-query\",\n        \"rq\"\n    ],\n    [\n        \"application/sparql-results+xml\",\n        \"srx\"\n    ],\n    [\n        \"application/srgs\",\n        \"gram\"\n    ],\n    [\n        \"application/srgs+xml\",\n        \"grxml\"\n    ],\n    [\n        \"application/sru+xml\",\n        \"sru\"\n    ],\n    [\n        \"application/ssml+xml\",\n        \"ssml\"\n    ],\n    [\n        \"application/step\",\n        [\n            \"step\",\n            \"stp\"\n        ]\n    ],\n    [\n        \"application/streamingmedia\",\n        \"ssm\"\n    ],\n    [\n        \"application/tei+xml\",\n        \"tei\"\n    ],\n    [\n        \"application/thraud+xml\",\n        \"tfi\"\n    ],\n    [\n        \"application/timestamped-data\",\n        \"tsd\"\n    ],\n    [\n        \"application/toolbook\",\n        \"tbk\"\n    ],\n    [\n        \"application/vda\",\n        \"vda\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-large\",\n        \"plb\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-small\",\n        \"psb\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-var\",\n        \"pvb\"\n    ],\n    [\n        \"application/vnd.3gpp2.tcap\",\n        \"tcap\"\n    ],\n    [\n        \"application/vnd.3m.post-it-notes\",\n        \"pwn\"\n    ],\n    [\n        \"application/vnd.accpac.simply.aso\",\n        \"aso\"\n    ],\n    [\n        \"application/vnd.accpac.simply.imp\",\n        \"imp\"\n    ],\n    [\n        \"application/vnd.acucobol\",\n        \"acu\"\n    ],\n    [\n        \"application/vnd.acucorp\",\n        \"atc\"\n    ],\n    [\n        \"application/vnd.adobe.air-application-installer-package+zip\",\n        \"air\"\n    ],\n    [\n        \"application/vnd.adobe.fxp\",\n        \"fxp\"\n    ],\n    [\n        \"application/vnd.adobe.xdp+xml\",\n        \"xdp\"\n    ],\n    [\n        \"application/vnd.adobe.xfdf\",\n        \"xfdf\"\n    ],\n    [\n        \"application/vnd.ahead.space\",\n        \"ahead\"\n    ],\n    [\n        \"application/vnd.airzip.filesecure.azf\",\n        \"azf\"\n    ],\n    [\n        \"application/vnd.airzip.filesecure.azs\",\n        \"azs\"\n    ],\n    [\n        \"application/vnd.amazon.ebook\",\n        \"azw\"\n    ],\n    [\n        \"application/vnd.americandynamics.acc\",\n        \"acc\"\n    ],\n    [\n        \"application/vnd.amiga.ami\",\n        \"ami\"\n    ],\n    [\n        \"application/vnd.android.package-archive\",\n        \"apk\"\n    ],\n    [\n        \"application/vnd.anser-web-certificate-issue-initiation\",\n        \"cii\"\n    ],\n    [\n        \"application/vnd.anser-web-funds-transfer-initiation\",\n        \"fti\"\n    ],\n    [\n        \"application/vnd.antix.game-component\",\n        \"atx\"\n    ],\n    [\n        \"application/vnd.apple.installer+xml\",\n        \"mpkg\"\n    ],\n    [\n        \"application/vnd.apple.mpegurl\",\n        \"m3u8\"\n    ],\n    [\n        \"application/vnd.aristanetworks.swi\",\n        \"swi\"\n    ],\n    [\n        \"application/vnd.audiograph\",\n        \"aep\"\n    ],\n    [\n        \"application/vnd.blueice.multipass\",\n        \"mpm\"\n    ],\n    [\n        \"application/vnd.bmi\",\n        \"bmi\"\n    ],\n    [\n        \"application/vnd.businessobjects\",\n        \"rep\"\n    ],\n    [\n        \"application/vnd.chemdraw+xml\",\n        \"cdxml\"\n    ],\n    [\n        \"application/vnd.chipnuts.karaoke-mmd\",\n        \"mmd\"\n    ],\n    [\n        \"application/vnd.cinderella\",\n        \"cdy\"\n    ],\n    [\n        \"application/vnd.claymore\",\n        \"cla\"\n    ],\n    [\n        \"application/vnd.cloanto.rp9\",\n        \"rp9\"\n    ],\n    [\n        \"application/vnd.clonk.c4group\",\n        \"c4g\"\n    ],\n    [\n        \"application/vnd.cluetrust.cartomobile-config\",\n        \"c11amc\"\n    ],\n    [\n        \"application/vnd.cluetrust.cartomobile-config-pkg\",\n        \"c11amz\"\n    ],\n    [\n        \"application/vnd.commonspace\",\n        \"csp\"\n    ],\n    [\n        \"application/vnd.contact.cmsg\",\n        \"cdbcmsg\"\n    ],\n    [\n        \"application/vnd.cosmocaller\",\n        \"cmc\"\n    ],\n    [\n        \"application/vnd.crick.clicker\",\n        \"clkx\"\n    ],\n    [\n        \"application/vnd.crick.clicker.keyboard\",\n        \"clkk\"\n    ],\n    [\n        \"application/vnd.crick.clicker.palette\",\n        \"clkp\"\n    ],\n    [\n        \"application/vnd.crick.clicker.template\",\n        \"clkt\"\n    ],\n    [\n        \"application/vnd.crick.clicker.wordbank\",\n        \"clkw\"\n    ],\n    [\n        \"application/vnd.criticaltools.wbs+xml\",\n        \"wbs\"\n    ],\n    [\n        \"application/vnd.ctc-posml\",\n        \"pml\"\n    ],\n    [\n        \"application/vnd.cups-ppd\",\n        \"ppd\"\n    ],\n    [\n        \"application/vnd.curl.car\",\n        \"car\"\n    ],\n    [\n        \"application/vnd.curl.pcurl\",\n        \"pcurl\"\n    ],\n    [\n        \"application/vnd.data-vision.rdz\",\n        \"rdz\"\n    ],\n    [\n        \"application/vnd.denovo.fcselayout-link\",\n        \"fe_launch\"\n    ],\n    [\n        \"application/vnd.dna\",\n        \"dna\"\n    ],\n    [\n        \"application/vnd.dolby.mlp\",\n        \"mlp\"\n    ],\n    [\n        \"application/vnd.dpgraph\",\n        \"dpg\"\n    ],\n    [\n        \"application/vnd.dreamfactory\",\n        \"dfac\"\n    ],\n    [\n        \"application/vnd.dvb.ait\",\n        \"ait\"\n    ],\n    [\n        \"application/vnd.dvb.service\",\n        \"svc\"\n    ],\n    [\n        \"application/vnd.dynageo\",\n        \"geo\"\n    ],\n    [\n        \"application/vnd.ecowin.chart\",\n        \"mag\"\n    ],\n    [\n        \"application/vnd.enliven\",\n        \"nml\"\n    ],\n    [\n        \"application/vnd.epson.esf\",\n        \"esf\"\n    ],\n    [\n        \"application/vnd.epson.msf\",\n        \"msf\"\n    ],\n    [\n        \"application/vnd.epson.quickanime\",\n        \"qam\"\n    ],\n    [\n        \"application/vnd.epson.salt\",\n        \"slt\"\n    ],\n    [\n        \"application/vnd.epson.ssf\",\n        \"ssf\"\n    ],\n    [\n        \"application/vnd.eszigno3+xml\",\n        \"es3\"\n    ],\n    [\n        \"application/vnd.ezpix-album\",\n        \"ez2\"\n    ],\n    [\n        \"application/vnd.ezpix-package\",\n        \"ez3\"\n    ],\n    [\n        \"application/vnd.fdf\",\n        \"fdf\"\n    ],\n    [\n        \"application/vnd.fdsn.seed\",\n        \"seed\"\n    ],\n    [\n        \"application/vnd.flographit\",\n        \"gph\"\n    ],\n    [\n        \"application/vnd.fluxtime.clip\",\n        \"ftc\"\n    ],\n    [\n        \"application/vnd.framemaker\",\n        \"fm\"\n    ],\n    [\n        \"application/vnd.frogans.fnc\",\n        \"fnc\"\n    ],\n    [\n        \"application/vnd.frogans.ltf\",\n        \"ltf\"\n    ],\n    [\n        \"application/vnd.fsc.weblaunch\",\n        \"fsc\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys\",\n        \"oas\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys2\",\n        \"oa2\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys3\",\n        \"oa3\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasysgp\",\n        \"fg5\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasysprs\",\n        \"bh2\"\n    ],\n    [\n        \"application/vnd.fujixerox.ddd\",\n        \"ddd\"\n    ],\n    [\n        \"application/vnd.fujixerox.docuworks\",\n        \"xdw\"\n    ],\n    [\n        \"application/vnd.fujixerox.docuworks.binder\",\n        \"xbd\"\n    ],\n    [\n        \"application/vnd.fuzzysheet\",\n        \"fzs\"\n    ],\n    [\n        \"application/vnd.genomatix.tuxedo\",\n        \"txd\"\n    ],\n    [\n        \"application/vnd.geogebra.file\",\n        \"ggb\"\n    ],\n    [\n        \"application/vnd.geogebra.tool\",\n        \"ggt\"\n    ],\n    [\n        \"application/vnd.geometry-explorer\",\n        \"gex\"\n    ],\n    [\n        \"application/vnd.geonext\",\n        \"gxt\"\n    ],\n    [\n        \"application/vnd.geoplan\",\n        \"g2w\"\n    ],\n    [\n        \"application/vnd.geospace\",\n        \"g3w\"\n    ],\n    [\n        \"application/vnd.gmx\",\n        \"gmx\"\n    ],\n    [\n        \"application/vnd.google-earth.kml+xml\",\n        \"kml\"\n    ],\n    [\n        \"application/vnd.google-earth.kmz\",\n        \"kmz\"\n    ],\n    [\n        \"application/vnd.grafeq\",\n        \"gqf\"\n    ],\n    [\n        \"application/vnd.groove-account\",\n        \"gac\"\n    ],\n    [\n        \"application/vnd.groove-help\",\n        \"ghf\"\n    ],\n    [\n        \"application/vnd.groove-identity-message\",\n        \"gim\"\n    ],\n    [\n        \"application/vnd.groove-injector\",\n        \"grv\"\n    ],\n    [\n        \"application/vnd.groove-tool-message\",\n        \"gtm\"\n    ],\n    [\n        \"application/vnd.groove-tool-template\",\n        \"tpl\"\n    ],\n    [\n        \"application/vnd.groove-vcard\",\n        \"vcg\"\n    ],\n    [\n        \"application/vnd.hal+xml\",\n        \"hal\"\n    ],\n    [\n        \"application/vnd.handheld-entertainment+xml\",\n        \"zmm\"\n    ],\n    [\n        \"application/vnd.hbci\",\n        \"hbci\"\n    ],\n    [\n        \"application/vnd.hhe.lesson-player\",\n        \"les\"\n    ],\n    [\n        \"application/vnd.hp-hpgl\",\n        [\n            \"hgl\",\n            \"hpg\",\n            \"hpgl\"\n        ]\n    ],\n    [\n        \"application/vnd.hp-hpid\",\n        \"hpid\"\n    ],\n    [\n        \"application/vnd.hp-hps\",\n        \"hps\"\n    ],\n    [\n        \"application/vnd.hp-jlyt\",\n        \"jlt\"\n    ],\n    [\n        \"application/vnd.hp-pcl\",\n        \"pcl\"\n    ],\n    [\n        \"application/vnd.hp-pclxl\",\n        \"pclxl\"\n    ],\n    [\n        \"application/vnd.hydrostatix.sof-data\",\n        \"sfd-hdstx\"\n    ],\n    [\n        \"application/vnd.hzn-3d-crossword\",\n        \"x3d\"\n    ],\n    [\n        \"application/vnd.ibm.minipay\",\n        \"mpy\"\n    ],\n    [\n        \"application/vnd.ibm.modcap\",\n        \"afp\"\n    ],\n    [\n        \"application/vnd.ibm.rights-management\",\n        \"irm\"\n    ],\n    [\n        \"application/vnd.ibm.secure-container\",\n        \"sc\"\n    ],\n    [\n        \"application/vnd.iccprofile\",\n        \"icc\"\n    ],\n    [\n        \"application/vnd.igloader\",\n        \"igl\"\n    ],\n    [\n        \"application/vnd.immervision-ivp\",\n        \"ivp\"\n    ],\n    [\n        \"application/vnd.immervision-ivu\",\n        \"ivu\"\n    ],\n    [\n        \"application/vnd.insors.igm\",\n        \"igm\"\n    ],\n    [\n        \"application/vnd.intercon.formnet\",\n        \"xpw\"\n    ],\n    [\n        \"application/vnd.intergeo\",\n        \"i2g\"\n    ],\n    [\n        \"application/vnd.intu.qbo\",\n        \"qbo\"\n    ],\n    [\n        \"application/vnd.intu.qfx\",\n        \"qfx\"\n    ],\n    [\n        \"application/vnd.ipunplugged.rcprofile\",\n        \"rcprofile\"\n    ],\n    [\n        \"application/vnd.irepository.package+xml\",\n        \"irp\"\n    ],\n    [\n        \"application/vnd.is-xpr\",\n        \"xpr\"\n    ],\n    [\n        \"application/vnd.isac.fcs\",\n        \"fcs\"\n    ],\n    [\n        \"application/vnd.jam\",\n        \"jam\"\n    ],\n    [\n        \"application/vnd.jcp.javame.midlet-rms\",\n        \"rms\"\n    ],\n    [\n        \"application/vnd.jisp\",\n        \"jisp\"\n    ],\n    [\n        \"application/vnd.joost.joda-archive\",\n        \"joda\"\n    ],\n    [\n        \"application/vnd.kahootz\",\n        \"ktz\"\n    ],\n    [\n        \"application/vnd.kde.karbon\",\n        \"karbon\"\n    ],\n    [\n        \"application/vnd.kde.kchart\",\n        \"chrt\"\n    ],\n    [\n        \"application/vnd.kde.kformula\",\n        \"kfo\"\n    ],\n    [\n        \"application/vnd.kde.kivio\",\n        \"flw\"\n    ],\n    [\n        \"application/vnd.kde.kontour\",\n        \"kon\"\n    ],\n    [\n        \"application/vnd.kde.kpresenter\",\n        \"kpr\"\n    ],\n    [\n        \"application/vnd.kde.kspread\",\n        \"ksp\"\n    ],\n    [\n        \"application/vnd.kde.kword\",\n        \"kwd\"\n    ],\n    [\n        \"application/vnd.kenameaapp\",\n        \"htke\"\n    ],\n    [\n        \"application/vnd.kidspiration\",\n        \"kia\"\n    ],\n    [\n        \"application/vnd.kinar\",\n        \"kne\"\n    ],\n    [\n        \"application/vnd.koan\",\n        \"skp\"\n    ],\n    [\n        \"application/vnd.kodak-descriptor\",\n        \"sse\"\n    ],\n    [\n        \"application/vnd.las.las+xml\",\n        \"lasxml\"\n    ],\n    [\n        \"application/vnd.llamagraphics.life-balance.desktop\",\n        \"lbd\"\n    ],\n    [\n        \"application/vnd.llamagraphics.life-balance.exchange+xml\",\n        \"lbe\"\n    ],\n    [\n        \"application/vnd.lotus-1-2-3\",\n        \"123\"\n    ],\n    [\n        \"application/vnd.lotus-approach\",\n        \"apr\"\n    ],\n    [\n        \"application/vnd.lotus-freelance\",\n        \"pre\"\n    ],\n    [\n        \"application/vnd.lotus-notes\",\n        \"nsf\"\n    ],\n    [\n        \"application/vnd.lotus-organizer\",\n        \"org\"\n    ],\n    [\n        \"application/vnd.lotus-screencam\",\n        \"scm\"\n    ],\n    [\n        \"application/vnd.lotus-wordpro\",\n        \"lwp\"\n    ],\n    [\n        \"application/vnd.macports.portpkg\",\n        \"portpkg\"\n    ],\n    [\n        \"application/vnd.mcd\",\n        \"mcd\"\n    ],\n    [\n        \"application/vnd.medcalcdata\",\n        \"mc1\"\n    ],\n    [\n        \"application/vnd.mediastation.cdkey\",\n        \"cdkey\"\n    ],\n    [\n        \"application/vnd.mfer\",\n        \"mwf\"\n    ],\n    [\n        \"application/vnd.mfmp\",\n        \"mfm\"\n    ],\n    [\n        \"application/vnd.micrografx.flo\",\n        \"flo\"\n    ],\n    [\n        \"application/vnd.micrografx.igx\",\n        \"igx\"\n    ],\n    [\n        \"application/vnd.mif\",\n        \"mif\"\n    ],\n    [\n        \"application/vnd.mobius.daf\",\n        \"daf\"\n    ],\n    [\n        \"application/vnd.mobius.dis\",\n        \"dis\"\n    ],\n    [\n        \"application/vnd.mobius.mbk\",\n        \"mbk\"\n    ],\n    [\n        \"application/vnd.mobius.mqy\",\n        \"mqy\"\n    ],\n    [\n        \"application/vnd.mobius.msl\",\n        \"msl\"\n    ],\n    [\n        \"application/vnd.mobius.plc\",\n        \"plc\"\n    ],\n    [\n        \"application/vnd.mobius.txf\",\n        \"txf\"\n    ],\n    [\n        \"application/vnd.mophun.application\",\n        \"mpn\"\n    ],\n    [\n        \"application/vnd.mophun.certificate\",\n        \"mpc\"\n    ],\n    [\n        \"application/vnd.mozilla.xul+xml\",\n        \"xul\"\n    ],\n    [\n        \"application/vnd.ms-artgalry\",\n        \"cil\"\n    ],\n    [\n        \"application/vnd.ms-cab-compressed\",\n        \"cab\"\n    ],\n    [\n        \"application/vnd.ms-excel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlc\",\n            \"xlm\",\n            \"xlt\",\n            \"xlw\",\n            \"xlb\",\n            \"xll\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-excel.addin.macroenabled.12\",\n        \"xlam\"\n    ],\n    [\n        \"application/vnd.ms-excel.sheet.binary.macroenabled.12\",\n        \"xlsb\"\n    ],\n    [\n        \"application/vnd.ms-excel.sheet.macroenabled.12\",\n        \"xlsm\"\n    ],\n    [\n        \"application/vnd.ms-excel.template.macroenabled.12\",\n        \"xltm\"\n    ],\n    [\n        \"application/vnd.ms-fontobject\",\n        \"eot\"\n    ],\n    [\n        \"application/vnd.ms-htmlhelp\",\n        \"chm\"\n    ],\n    [\n        \"application/vnd.ms-ims\",\n        \"ims\"\n    ],\n    [\n        \"application/vnd.ms-lrm\",\n        \"lrm\"\n    ],\n    [\n        \"application/vnd.ms-officetheme\",\n        \"thmx\"\n    ],\n    [\n        \"application/vnd.ms-outlook\",\n        \"msg\"\n    ],\n    [\n        \"application/vnd.ms-pki.certstore\",\n        \"sst\"\n    ],\n    [\n        \"application/vnd.ms-pki.pko\",\n        \"pko\"\n    ],\n    [\n        \"application/vnd.ms-pki.seccat\",\n        \"cat\"\n    ],\n    [\n        \"application/vnd.ms-pki.stl\",\n        \"stl\"\n    ],\n    [\n        \"application/vnd.ms-pkicertstore\",\n        \"sst\"\n    ],\n    [\n        \"application/vnd.ms-pkiseccat\",\n        \"cat\"\n    ],\n    [\n        \"application/vnd.ms-pkistl\",\n        \"stl\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint\",\n        [\n            \"ppt\",\n            \"pot\",\n            \"pps\",\n            \"ppa\",\n            \"pwz\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-powerpoint.addin.macroenabled.12\",\n        \"ppam\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.presentation.macroenabled.12\",\n        \"pptm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.slide.macroenabled.12\",\n        \"sldm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\",\n        \"ppsm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.template.macroenabled.12\",\n        \"potm\"\n    ],\n    [\n        \"application/vnd.ms-project\",\n        \"mpp\"\n    ],\n    [\n        \"application/vnd.ms-word.document.macroenabled.12\",\n        \"docm\"\n    ],\n    [\n        \"application/vnd.ms-word.template.macroenabled.12\",\n        \"dotm\"\n    ],\n    [\n        \"application/vnd.ms-works\",\n        [\n            \"wks\",\n            \"wcm\",\n            \"wdb\",\n            \"wps\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-wpl\",\n        \"wpl\"\n    ],\n    [\n        \"application/vnd.ms-xpsdocument\",\n        \"xps\"\n    ],\n    [\n        \"application/vnd.mseq\",\n        \"mseq\"\n    ],\n    [\n        \"application/vnd.musician\",\n        \"mus\"\n    ],\n    [\n        \"application/vnd.muvee.style\",\n        \"msty\"\n    ],\n    [\n        \"application/vnd.neurolanguage.nlu\",\n        \"nlu\"\n    ],\n    [\n        \"application/vnd.noblenet-directory\",\n        \"nnd\"\n    ],\n    [\n        \"application/vnd.noblenet-sealer\",\n        \"nns\"\n    ],\n    [\n        \"application/vnd.noblenet-web\",\n        \"nnw\"\n    ],\n    [\n        \"application/vnd.nokia.configuration-message\",\n        \"ncm\"\n    ],\n    [\n        \"application/vnd.nokia.n-gage.data\",\n        \"ngdat\"\n    ],\n    [\n        \"application/vnd.nokia.n-gage.symbian.install\",\n        \"n-gage\"\n    ],\n    [\n        \"application/vnd.nokia.radio-preset\",\n        \"rpst\"\n    ],\n    [\n        \"application/vnd.nokia.radio-presets\",\n        \"rpss\"\n    ],\n    [\n        \"application/vnd.nokia.ringing-tone\",\n        \"rng\"\n    ],\n    [\n        \"application/vnd.novadigm.edm\",\n        \"edm\"\n    ],\n    [\n        \"application/vnd.novadigm.edx\",\n        \"edx\"\n    ],\n    [\n        \"application/vnd.novadigm.ext\",\n        \"ext\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.chart\",\n        \"odc\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.chart-template\",\n        \"otc\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.database\",\n        \"odb\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.formula\",\n        \"odf\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.formula-template\",\n        \"odft\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.graphics\",\n        \"odg\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.graphics-template\",\n        \"otg\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.image\",\n        \"odi\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.image-template\",\n        \"oti\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.presentation\",\n        \"odp\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.presentation-template\",\n        \"otp\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.spreadsheet\",\n        \"ods\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.spreadsheet-template\",\n        \"ots\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text\",\n        \"odt\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-master\",\n        \"odm\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-template\",\n        \"ott\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-web\",\n        \"oth\"\n    ],\n    [\n        \"application/vnd.olpc-sugar\",\n        \"xo\"\n    ],\n    [\n        \"application/vnd.oma.dd2+xml\",\n        \"dd2\"\n    ],\n    [\n        \"application/vnd.openofficeorg.extension\",\n        \"oxt\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n        \"pptx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.slide\",\n        \"sldx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\",\n        \"ppsx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.template\",\n        \"potx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        \"xlsx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\",\n        \"xltx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        \"docx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\",\n        \"dotx\"\n    ],\n    [\n        \"application/vnd.osgeo.mapguide.package\",\n        \"mgp\"\n    ],\n    [\n        \"application/vnd.osgi.dp\",\n        \"dp\"\n    ],\n    [\n        \"application/vnd.palm\",\n        \"pdb\"\n    ],\n    [\n        \"application/vnd.pawaafile\",\n        \"paw\"\n    ],\n    [\n        \"application/vnd.pg.format\",\n        \"str\"\n    ],\n    [\n        \"application/vnd.pg.osasli\",\n        \"ei6\"\n    ],\n    [\n        \"application/vnd.picsel\",\n        \"efif\"\n    ],\n    [\n        \"application/vnd.pmi.widget\",\n        \"wg\"\n    ],\n    [\n        \"application/vnd.pocketlearn\",\n        \"plf\"\n    ],\n    [\n        \"application/vnd.powerbuilder6\",\n        \"pbd\"\n    ],\n    [\n        \"application/vnd.previewsystems.box\",\n        \"box\"\n    ],\n    [\n        \"application/vnd.proteus.magazine\",\n        \"mgz\"\n    ],\n    [\n        \"application/vnd.publishare-delta-tree\",\n        \"qps\"\n    ],\n    [\n        \"application/vnd.pvi.ptid1\",\n        \"ptid\"\n    ],\n    [\n        \"application/vnd.quark.quarkxpress\",\n        \"qxd\"\n    ],\n    [\n        \"application/vnd.realvnc.bed\",\n        \"bed\"\n    ],\n    [\n        \"application/vnd.recordare.musicxml\",\n        \"mxl\"\n    ],\n    [\n        \"application/vnd.recordare.musicxml+xml\",\n        \"musicxml\"\n    ],\n    [\n        \"application/vnd.rig.cryptonote\",\n        \"cryptonote\"\n    ],\n    [\n        \"application/vnd.rim.cod\",\n        \"cod\"\n    ],\n    [\n        \"application/vnd.rn-realmedia\",\n        \"rm\"\n    ],\n    [\n        \"application/vnd.rn-realplayer\",\n        \"rnx\"\n    ],\n    [\n        \"application/vnd.route66.link66+xml\",\n        \"link66\"\n    ],\n    [\n        \"application/vnd.sailingtracker.track\",\n        \"st\"\n    ],\n    [\n        \"application/vnd.seemail\",\n        \"see\"\n    ],\n    [\n        \"application/vnd.sema\",\n        \"sema\"\n    ],\n    [\n        \"application/vnd.semd\",\n        \"semd\"\n    ],\n    [\n        \"application/vnd.semf\",\n        \"semf\"\n    ],\n    [\n        \"application/vnd.shana.informed.formdata\",\n        \"ifm\"\n    ],\n    [\n        \"application/vnd.shana.informed.formtemplate\",\n        \"itp\"\n    ],\n    [\n        \"application/vnd.shana.informed.interchange\",\n        \"iif\"\n    ],\n    [\n        \"application/vnd.shana.informed.package\",\n        \"ipk\"\n    ],\n    [\n        \"application/vnd.simtech-mindmapper\",\n        \"twd\"\n    ],\n    [\n        \"application/vnd.smaf\",\n        \"mmf\"\n    ],\n    [\n        \"application/vnd.smart.teacher\",\n        \"teacher\"\n    ],\n    [\n        \"application/vnd.solent.sdkm+xml\",\n        \"sdkm\"\n    ],\n    [\n        \"application/vnd.spotfire.dxp\",\n        \"dxp\"\n    ],\n    [\n        \"application/vnd.spotfire.sfs\",\n        \"sfs\"\n    ],\n    [\n        \"application/vnd.stardivision.calc\",\n        \"sdc\"\n    ],\n    [\n        \"application/vnd.stardivision.draw\",\n        \"sda\"\n    ],\n    [\n        \"application/vnd.stardivision.impress\",\n        \"sdd\"\n    ],\n    [\n        \"application/vnd.stardivision.math\",\n        \"smf\"\n    ],\n    [\n        \"application/vnd.stardivision.writer\",\n        \"sdw\"\n    ],\n    [\n        \"application/vnd.stardivision.writer-global\",\n        \"sgl\"\n    ],\n    [\n        \"application/vnd.stepmania.stepchart\",\n        \"sm\"\n    ],\n    [\n        \"application/vnd.sun.xml.calc\",\n        \"sxc\"\n    ],\n    [\n        \"application/vnd.sun.xml.calc.template\",\n        \"stc\"\n    ],\n    [\n        \"application/vnd.sun.xml.draw\",\n        \"sxd\"\n    ],\n    [\n        \"application/vnd.sun.xml.draw.template\",\n        \"std\"\n    ],\n    [\n        \"application/vnd.sun.xml.impress\",\n        \"sxi\"\n    ],\n    [\n        \"application/vnd.sun.xml.impress.template\",\n        \"sti\"\n    ],\n    [\n        \"application/vnd.sun.xml.math\",\n        \"sxm\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer\",\n        \"sxw\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer.global\",\n        \"sxg\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer.template\",\n        \"stw\"\n    ],\n    [\n        \"application/vnd.sus-calendar\",\n        \"sus\"\n    ],\n    [\n        \"application/vnd.svd\",\n        \"svd\"\n    ],\n    [\n        \"application/vnd.symbian.install\",\n        \"sis\"\n    ],\n    [\n        \"application/vnd.syncml+xml\",\n        \"xsm\"\n    ],\n    [\n        \"application/vnd.syncml.dm+wbxml\",\n        \"bdm\"\n    ],\n    [\n        \"application/vnd.syncml.dm+xml\",\n        \"xdm\"\n    ],\n    [\n        \"application/vnd.tao.intent-module-archive\",\n        \"tao\"\n    ],\n    [\n        \"application/vnd.tmobile-livetv\",\n        \"tmo\"\n    ],\n    [\n        \"application/vnd.trid.tpt\",\n        \"tpt\"\n    ],\n    [\n        \"application/vnd.triscape.mxs\",\n        \"mxs\"\n    ],\n    [\n        \"application/vnd.trueapp\",\n        \"tra\"\n    ],\n    [\n        \"application/vnd.ufdl\",\n        \"ufd\"\n    ],\n    [\n        \"application/vnd.uiq.theme\",\n        \"utz\"\n    ],\n    [\n        \"application/vnd.umajin\",\n        \"umj\"\n    ],\n    [\n        \"application/vnd.unity\",\n        \"unityweb\"\n    ],\n    [\n        \"application/vnd.uoml+xml\",\n        \"uoml\"\n    ],\n    [\n        \"application/vnd.vcx\",\n        \"vcx\"\n    ],\n    [\n        \"application/vnd.visio\",\n        \"vsd\"\n    ],\n    [\n        \"application/vnd.visionary\",\n        \"vis\"\n    ],\n    [\n        \"application/vnd.vsf\",\n        \"vsf\"\n    ],\n    [\n        \"application/vnd.wap.wbxml\",\n        \"wbxml\"\n    ],\n    [\n        \"application/vnd.wap.wmlc\",\n        \"wmlc\"\n    ],\n    [\n        \"application/vnd.wap.wmlscriptc\",\n        \"wmlsc\"\n    ],\n    [\n        \"application/vnd.webturbo\",\n        \"wtb\"\n    ],\n    [\n        \"application/vnd.wolfram.player\",\n        \"nbp\"\n    ],\n    [\n        \"application/vnd.wordperfect\",\n        \"wpd\"\n    ],\n    [\n        \"application/vnd.wqd\",\n        \"wqd\"\n    ],\n    [\n        \"application/vnd.wt.stf\",\n        \"stf\"\n    ],\n    [\n        \"application/vnd.xara\",\n        [\n            \"web\",\n            \"xar\"\n        ]\n    ],\n    [\n        \"application/vnd.xfdl\",\n        \"xfdl\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-dic\",\n        \"hvd\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-script\",\n        \"hvs\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-voice\",\n        \"hvp\"\n    ],\n    [\n        \"application/vnd.yamaha.openscoreformat\",\n        \"osf\"\n    ],\n    [\n        \"application/vnd.yamaha.openscoreformat.osfpvg+xml\",\n        \"osfpvg\"\n    ],\n    [\n        \"application/vnd.yamaha.smaf-audio\",\n        \"saf\"\n    ],\n    [\n        \"application/vnd.yamaha.smaf-phrase\",\n        \"spf\"\n    ],\n    [\n        \"application/vnd.yellowriver-custom-menu\",\n        \"cmp\"\n    ],\n    [\n        \"application/vnd.zul\",\n        \"zir\"\n    ],\n    [\n        \"application/vnd.zzazz.deck+xml\",\n        \"zaz\"\n    ],\n    [\n        \"application/vocaltec-media-desc\",\n        \"vmd\"\n    ],\n    [\n        \"application/vocaltec-media-file\",\n        \"vmf\"\n    ],\n    [\n        \"application/voicexml+xml\",\n        \"vxml\"\n    ],\n    [\n        \"application/widget\",\n        \"wgt\"\n    ],\n    [\n        \"application/winhlp\",\n        \"hlp\"\n    ],\n    [\n        \"application/wordperfect\",\n        [\n            \"wp\",\n            \"wp5\",\n            \"wp6\",\n            \"wpd\"\n        ]\n    ],\n    [\n        \"application/wordperfect6.0\",\n        [\n            \"w60\",\n            \"wp5\"\n        ]\n    ],\n    [\n        \"application/wordperfect6.1\",\n        \"w61\"\n    ],\n    [\n        \"application/wsdl+xml\",\n        \"wsdl\"\n    ],\n    [\n        \"application/wspolicy+xml\",\n        \"wspolicy\"\n    ],\n    [\n        \"application/x-123\",\n        \"wk1\"\n    ],\n    [\n        \"application/x-7z-compressed\",\n        \"7z\"\n    ],\n    [\n        \"application/x-abiword\",\n        \"abw\"\n    ],\n    [\n        \"application/x-ace-compressed\",\n        \"ace\"\n    ],\n    [\n        \"application/x-aim\",\n        \"aim\"\n    ],\n    [\n        \"application/x-authorware-bin\",\n        \"aab\"\n    ],\n    [\n        \"application/x-authorware-map\",\n        \"aam\"\n    ],\n    [\n        \"application/x-authorware-seg\",\n        \"aas\"\n    ],\n    [\n        \"application/x-bcpio\",\n        \"bcpio\"\n    ],\n    [\n        \"application/x-binary\",\n        \"bin\"\n    ],\n    [\n        \"application/x-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/x-bittorrent\",\n        \"torrent\"\n    ],\n    [\n        \"application/x-bsh\",\n        [\n            \"bsh\",\n            \"sh\",\n            \"shar\"\n        ]\n    ],\n    [\n        \"application/x-bytecode.elisp\",\n        \"elc\"\n    ],\n    [\n        \"application/x-bytecode.python\",\n        \"pyc\"\n    ],\n    [\n        \"application/x-bzip\",\n        \"bz\"\n    ],\n    [\n        \"application/x-bzip2\",\n        [\n            \"boz\",\n            \"bz2\"\n        ]\n    ],\n    [\n        \"application/x-cdf\",\n        \"cdf\"\n    ],\n    [\n        \"application/x-cdlink\",\n        \"vcd\"\n    ],\n    [\n        \"application/x-chat\",\n        [\n            \"cha\",\n            \"chat\"\n        ]\n    ],\n    [\n        \"application/x-chess-pgn\",\n        \"pgn\"\n    ],\n    [\n        \"application/x-cmu-raster\",\n        \"ras\"\n    ],\n    [\n        \"application/x-cocoa\",\n        \"cco\"\n    ],\n    [\n        \"application/x-compactpro\",\n        \"cpt\"\n    ],\n    [\n        \"application/x-compress\",\n        \"z\"\n    ],\n    [\n        \"application/x-compressed\",\n        [\n            \"tgz\",\n            \"gz\",\n            \"z\",\n            \"zip\"\n        ]\n    ],\n    [\n        \"application/x-conference\",\n        \"nsc\"\n    ],\n    [\n        \"application/x-cpio\",\n        \"cpio\"\n    ],\n    [\n        \"application/x-cpt\",\n        \"cpt\"\n    ],\n    [\n        \"application/x-csh\",\n        \"csh\"\n    ],\n    [\n        \"application/x-debian-package\",\n        \"deb\"\n    ],\n    [\n        \"application/x-deepv\",\n        \"deepv\"\n    ],\n    [\n        \"application/x-director\",\n        [\n            \"dir\",\n            \"dcr\",\n            \"dxr\"\n        ]\n    ],\n    [\n        \"application/x-doom\",\n        \"wad\"\n    ],\n    [\n        \"application/x-dtbncx+xml\",\n        \"ncx\"\n    ],\n    [\n        \"application/x-dtbook+xml\",\n        \"dtb\"\n    ],\n    [\n        \"application/x-dtbresource+xml\",\n        \"res\"\n    ],\n    [\n        \"application/x-dvi\",\n        \"dvi\"\n    ],\n    [\n        \"application/x-elc\",\n        \"elc\"\n    ],\n    [\n        \"application/x-envoy\",\n        [\n            \"env\",\n            \"evy\"\n        ]\n    ],\n    [\n        \"application/x-esrehber\",\n        \"es\"\n    ],\n    [\n        \"application/x-excel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlb\",\n            \"xlc\",\n            \"xld\",\n            \"xlk\",\n            \"xll\",\n            \"xlm\",\n            \"xlt\",\n            \"xlv\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/x-font-bdf\",\n        \"bdf\"\n    ],\n    [\n        \"application/x-font-ghostscript\",\n        \"gsf\"\n    ],\n    [\n        \"application/x-font-linux-psf\",\n        \"psf\"\n    ],\n    [\n        \"application/x-font-otf\",\n        \"otf\"\n    ],\n    [\n        \"application/x-font-pcf\",\n        \"pcf\"\n    ],\n    [\n        \"application/x-font-snf\",\n        \"snf\"\n    ],\n    [\n        \"application/x-font-ttf\",\n        \"ttf\"\n    ],\n    [\n        \"application/x-font-type1\",\n        \"pfa\"\n    ],\n    [\n        \"application/x-font-woff\",\n        \"woff\"\n    ],\n    [\n        \"application/x-frame\",\n        \"mif\"\n    ],\n    [\n        \"application/x-freelance\",\n        \"pre\"\n    ],\n    [\n        \"application/x-futuresplash\",\n        \"spl\"\n    ],\n    [\n        \"application/x-gnumeric\",\n        \"gnumeric\"\n    ],\n    [\n        \"application/x-gsp\",\n        \"gsp\"\n    ],\n    [\n        \"application/x-gss\",\n        \"gss\"\n    ],\n    [\n        \"application/x-gtar\",\n        \"gtar\"\n    ],\n    [\n        \"application/x-gzip\",\n        [\n            \"gz\",\n            \"gzip\"\n        ]\n    ],\n    [\n        \"application/x-hdf\",\n        \"hdf\"\n    ],\n    [\n        \"application/x-helpfile\",\n        [\n            \"help\",\n            \"hlp\"\n        ]\n    ],\n    [\n        \"application/x-httpd-imap\",\n        \"imap\"\n    ],\n    [\n        \"application/x-ima\",\n        \"ima\"\n    ],\n    [\n        \"application/x-internet-signup\",\n        [\n            \"ins\",\n            \"isp\"\n        ]\n    ],\n    [\n        \"application/x-internett-signup\",\n        \"ins\"\n    ],\n    [\n        \"application/x-inventor\",\n        \"iv\"\n    ],\n    [\n        \"application/x-ip2\",\n        \"ip\"\n    ],\n    [\n        \"application/x-iphone\",\n        \"iii\"\n    ],\n    [\n        \"application/x-java-class\",\n        \"class\"\n    ],\n    [\n        \"application/x-java-commerce\",\n        \"jcm\"\n    ],\n    [\n        \"application/x-java-jnlp-file\",\n        \"jnlp\"\n    ],\n    [\n        \"application/x-javascript\",\n        \"js\"\n    ],\n    [\n        \"application/x-koan\",\n        [\n            \"skd\",\n            \"skm\",\n            \"skp\",\n            \"skt\"\n        ]\n    ],\n    [\n        \"application/x-ksh\",\n        \"ksh\"\n    ],\n    [\n        \"application/x-latex\",\n        [\n            \"latex\",\n            \"ltx\"\n        ]\n    ],\n    [\n        \"application/x-lha\",\n        \"lha\"\n    ],\n    [\n        \"application/x-lisp\",\n        \"lsp\"\n    ],\n    [\n        \"application/x-livescreen\",\n        \"ivy\"\n    ],\n    [\n        \"application/x-lotus\",\n        \"wq1\"\n    ],\n    [\n        \"application/x-lotusscreencam\",\n        \"scm\"\n    ],\n    [\n        \"application/x-lzh\",\n        \"lzh\"\n    ],\n    [\n        \"application/x-lzx\",\n        \"lzx\"\n    ],\n    [\n        \"application/x-mac-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/x-macbinary\",\n        \"bin\"\n    ],\n    [\n        \"application/x-magic-cap-package-1.0\",\n        \"mc$\"\n    ],\n    [\n        \"application/x-mathcad\",\n        \"mcd\"\n    ],\n    [\n        \"application/x-meme\",\n        \"mm\"\n    ],\n    [\n        \"application/x-midi\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"application/x-mif\",\n        \"mif\"\n    ],\n    [\n        \"application/x-mix-transfer\",\n        \"nix\"\n    ],\n    [\n        \"application/x-mobipocket-ebook\",\n        \"prc\"\n    ],\n    [\n        \"application/x-mplayer2\",\n        \"asx\"\n    ],\n    [\n        \"application/x-ms-application\",\n        \"application\"\n    ],\n    [\n        \"application/x-ms-wmd\",\n        \"wmd\"\n    ],\n    [\n        \"application/x-ms-wmz\",\n        \"wmz\"\n    ],\n    [\n        \"application/x-ms-xbap\",\n        \"xbap\"\n    ],\n    [\n        \"application/x-msaccess\",\n        \"mdb\"\n    ],\n    [\n        \"application/x-msbinder\",\n        \"obd\"\n    ],\n    [\n        \"application/x-mscardfile\",\n        \"crd\"\n    ],\n    [\n        \"application/x-msclip\",\n        \"clp\"\n    ],\n    [\n        \"application/x-msdownload\",\n        [\n            \"exe\",\n            \"dll\"\n        ]\n    ],\n    [\n        \"application/x-msexcel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/x-msmediaview\",\n        [\n            \"mvb\",\n            \"m13\",\n            \"m14\"\n        ]\n    ],\n    [\n        \"application/x-msmetafile\",\n        \"wmf\"\n    ],\n    [\n        \"application/x-msmoney\",\n        \"mny\"\n    ],\n    [\n        \"application/x-mspowerpoint\",\n        \"ppt\"\n    ],\n    [\n        \"application/x-mspublisher\",\n        \"pub\"\n    ],\n    [\n        \"application/x-msschedule\",\n        \"scd\"\n    ],\n    [\n        \"application/x-msterminal\",\n        \"trm\"\n    ],\n    [\n        \"application/x-mswrite\",\n        \"wri\"\n    ],\n    [\n        \"application/x-navi-animation\",\n        \"ani\"\n    ],\n    [\n        \"application/x-navidoc\",\n        \"nvd\"\n    ],\n    [\n        \"application/x-navimap\",\n        \"map\"\n    ],\n    [\n        \"application/x-navistyle\",\n        \"stl\"\n    ],\n    [\n        \"application/x-netcdf\",\n        [\n            \"cdf\",\n            \"nc\"\n        ]\n    ],\n    [\n        \"application/x-newton-compatible-pkg\",\n        \"pkg\"\n    ],\n    [\n        \"application/x-nokia-9000-communicator-add-on-software\",\n        \"aos\"\n    ],\n    [\n        \"application/x-omc\",\n        \"omc\"\n    ],\n    [\n        \"application/x-omcdatamaker\",\n        \"omcd\"\n    ],\n    [\n        \"application/x-omcregerator\",\n        \"omcr\"\n    ],\n    [\n        \"application/x-pagemaker\",\n        [\n            \"pm4\",\n            \"pm5\"\n        ]\n    ],\n    [\n        \"application/x-pcl\",\n        \"pcl\"\n    ],\n    [\n        \"application/x-perfmon\",\n        [\n            \"pma\",\n            \"pmc\",\n            \"pml\",\n            \"pmr\",\n            \"pmw\"\n        ]\n    ],\n    [\n        \"application/x-pixclscript\",\n        \"plx\"\n    ],\n    [\n        \"application/x-pkcs10\",\n        \"p10\"\n    ],\n    [\n        \"application/x-pkcs12\",\n        [\n            \"p12\",\n            \"pfx\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-certificates\",\n        [\n            \"p7b\",\n            \"spc\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-certreqresp\",\n        \"p7r\"\n    ],\n    [\n        \"application/x-pkcs7-mime\",\n        [\n            \"p7m\",\n            \"p7c\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-signature\",\n        [\n            \"p7s\",\n            \"p7a\"\n        ]\n    ],\n    [\n        \"application/x-pointplus\",\n        \"css\"\n    ],\n    [\n        \"application/x-portable-anymap\",\n        \"pnm\"\n    ],\n    [\n        \"application/x-project\",\n        [\n            \"mpc\",\n            \"mpt\",\n            \"mpv\",\n            \"mpx\"\n        ]\n    ],\n    [\n        \"application/x-qpro\",\n        \"wb1\"\n    ],\n    [\n        \"application/x-rar-compressed\",\n        \"rar\"\n    ],\n    [\n        \"application/x-rtf\",\n        \"rtf\"\n    ],\n    [\n        \"application/x-sdp\",\n        \"sdp\"\n    ],\n    [\n        \"application/x-sea\",\n        \"sea\"\n    ],\n    [\n        \"application/x-seelogo\",\n        \"sl\"\n    ],\n    [\n        \"application/x-sh\",\n        \"sh\"\n    ],\n    [\n        \"application/x-shar\",\n        [\n            \"shar\",\n            \"sh\"\n        ]\n    ],\n    [\n        \"application/x-shockwave-flash\",\n        \"swf\"\n    ],\n    [\n        \"application/x-silverlight-app\",\n        \"xap\"\n    ],\n    [\n        \"application/x-sit\",\n        \"sit\"\n    ],\n    [\n        \"application/x-sprite\",\n        [\n            \"spr\",\n            \"sprite\"\n        ]\n    ],\n    [\n        \"application/x-stuffit\",\n        \"sit\"\n    ],\n    [\n        \"application/x-stuffitx\",\n        \"sitx\"\n    ],\n    [\n        \"application/x-sv4cpio\",\n        \"sv4cpio\"\n    ],\n    [\n        \"application/x-sv4crc\",\n        \"sv4crc\"\n    ],\n    [\n        \"application/x-tar\",\n        \"tar\"\n    ],\n    [\n        \"application/x-tbook\",\n        [\n            \"sbk\",\n            \"tbk\"\n        ]\n    ],\n    [\n        \"application/x-tcl\",\n        \"tcl\"\n    ],\n    [\n        \"application/x-tex\",\n        \"tex\"\n    ],\n    [\n        \"application/x-tex-tfm\",\n        \"tfm\"\n    ],\n    [\n        \"application/x-texinfo\",\n        [\n            \"texi\",\n            \"texinfo\"\n        ]\n    ],\n    [\n        \"application/x-troff\",\n        [\n            \"roff\",\n            \"t\",\n            \"tr\"\n        ]\n    ],\n    [\n        \"application/x-troff-man\",\n        \"man\"\n    ],\n    [\n        \"application/x-troff-me\",\n        \"me\"\n    ],\n    [\n        \"application/x-troff-ms\",\n        \"ms\"\n    ],\n    [\n        \"application/x-troff-msvideo\",\n        \"avi\"\n    ],\n    [\n        \"application/x-ustar\",\n        \"ustar\"\n    ],\n    [\n        \"application/x-visio\",\n        [\n            \"vsd\",\n            \"vst\",\n            \"vsw\"\n        ]\n    ],\n    [\n        \"application/x-vnd.audioexplosion.mzz\",\n        \"mzz\"\n    ],\n    [\n        \"application/x-vnd.ls-xpix\",\n        \"xpix\"\n    ],\n    [\n        \"application/x-vrml\",\n        \"vrml\"\n    ],\n    [\n        \"application/x-wais-source\",\n        [\n            \"src\",\n            \"wsrc\"\n        ]\n    ],\n    [\n        \"application/x-winhelp\",\n        \"hlp\"\n    ],\n    [\n        \"application/x-wintalk\",\n        \"wtk\"\n    ],\n    [\n        \"application/x-world\",\n        [\n            \"wrl\",\n            \"svr\"\n        ]\n    ],\n    [\n        \"application/x-wpwin\",\n        \"wpd\"\n    ],\n    [\n        \"application/x-wri\",\n        \"wri\"\n    ],\n    [\n        \"application/x-x509-ca-cert\",\n        [\n            \"cer\",\n            \"crt\",\n            \"der\"\n        ]\n    ],\n    [\n        \"application/x-x509-user-cert\",\n        \"crt\"\n    ],\n    [\n        \"application/x-xfig\",\n        \"fig\"\n    ],\n    [\n        \"application/x-xpinstall\",\n        \"xpi\"\n    ],\n    [\n        \"application/x-zip-compressed\",\n        \"zip\"\n    ],\n    [\n        \"application/xcap-diff+xml\",\n        \"xdf\"\n    ],\n    [\n        \"application/xenc+xml\",\n        \"xenc\"\n    ],\n    [\n        \"application/xhtml+xml\",\n        \"xhtml\"\n    ],\n    [\n        \"application/xml\",\n        \"xml\"\n    ],\n    [\n        \"application/xml-dtd\",\n        \"dtd\"\n    ],\n    [\n        \"application/xop+xml\",\n        \"xop\"\n    ],\n    [\n        \"application/xslt+xml\",\n        \"xslt\"\n    ],\n    [\n        \"application/xspf+xml\",\n        \"xspf\"\n    ],\n    [\n        \"application/xv+xml\",\n        \"mxml\"\n    ],\n    [\n        \"application/yang\",\n        \"yang\"\n    ],\n    [\n        \"application/yin+xml\",\n        \"yin\"\n    ],\n    [\n        \"application/ynd.ms-pkipko\",\n        \"pko\"\n    ],\n    [\n        \"application/zip\",\n        \"zip\"\n    ],\n    [\n        \"audio/adpcm\",\n        \"adp\"\n    ],\n    [\n        \"audio/aiff\",\n        [\n            \"aiff\",\n            \"aif\",\n            \"aifc\"\n        ]\n    ],\n    [\n        \"audio/basic\",\n        [\n            \"snd\",\n            \"au\"\n        ]\n    ],\n    [\n        \"audio/it\",\n        \"it\"\n    ],\n    [\n        \"audio/make\",\n        [\n            \"funk\",\n            \"my\",\n            \"pfunk\"\n        ]\n    ],\n    [\n        \"audio/make.my.funk\",\n        \"pfunk\"\n    ],\n    [\n        \"audio/mid\",\n        [\n            \"mid\",\n            \"rmi\"\n        ]\n    ],\n    [\n        \"audio/midi\",\n        [\n            \"midi\",\n            \"kar\",\n            \"mid\"\n        ]\n    ],\n    [\n        \"audio/mod\",\n        \"mod\"\n    ],\n    [\n        \"audio/mp4\",\n        \"mp4a\"\n    ],\n    [\n        \"audio/mpeg\",\n        [\n            \"mpga\",\n            \"mp3\",\n            \"m2a\",\n            \"mp2\",\n            \"mpa\",\n            \"mpg\"\n        ]\n    ],\n    [\n        \"audio/mpeg3\",\n        \"mp3\"\n    ],\n    [\n        \"audio/nspaudio\",\n        [\n            \"la\",\n            \"lma\"\n        ]\n    ],\n    [\n        \"audio/ogg\",\n        \"oga\"\n    ],\n    [\n        \"audio/s3m\",\n        \"s3m\"\n    ],\n    [\n        \"audio/tsp-audio\",\n        \"tsi\"\n    ],\n    [\n        \"audio/tsplayer\",\n        \"tsp\"\n    ],\n    [\n        \"audio/vnd.dece.audio\",\n        \"uva\"\n    ],\n    [\n        \"audio/vnd.digital-winds\",\n        \"eol\"\n    ],\n    [\n        \"audio/vnd.dra\",\n        \"dra\"\n    ],\n    [\n        \"audio/vnd.dts\",\n        \"dts\"\n    ],\n    [\n        \"audio/vnd.dts.hd\",\n        \"dtshd\"\n    ],\n    [\n        \"audio/vnd.lucent.voice\",\n        \"lvp\"\n    ],\n    [\n        \"audio/vnd.ms-playready.media.pya\",\n        \"pya\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp4800\",\n        \"ecelp4800\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp7470\",\n        \"ecelp7470\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp9600\",\n        \"ecelp9600\"\n    ],\n    [\n        \"audio/vnd.qcelp\",\n        \"qcp\"\n    ],\n    [\n        \"audio/vnd.rip\",\n        \"rip\"\n    ],\n    [\n        \"audio/voc\",\n        \"voc\"\n    ],\n    [\n        \"audio/voxware\",\n        \"vox\"\n    ],\n    [\n        \"audio/wav\",\n        \"wav\"\n    ],\n    [\n        \"audio/webm\",\n        \"weba\"\n    ],\n    [\n        \"audio/x-aac\",\n        \"aac\"\n    ],\n    [\n        \"audio/x-adpcm\",\n        \"snd\"\n    ],\n    [\n        \"audio/x-aiff\",\n        [\n            \"aiff\",\n            \"aif\",\n            \"aifc\"\n        ]\n    ],\n    [\n        \"audio/x-au\",\n        \"au\"\n    ],\n    [\n        \"audio/x-gsm\",\n        [\n            \"gsd\",\n            \"gsm\"\n        ]\n    ],\n    [\n        \"audio/x-jam\",\n        \"jam\"\n    ],\n    [\n        \"audio/x-liveaudio\",\n        \"lam\"\n    ],\n    [\n        \"audio/x-mid\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"audio/x-midi\",\n        [\n            \"midi\",\n            \"mid\"\n        ]\n    ],\n    [\n        \"audio/x-mod\",\n        \"mod\"\n    ],\n    [\n        \"audio/x-mpeg\",\n        \"mp2\"\n    ],\n    [\n        \"audio/x-mpeg-3\",\n        \"mp3\"\n    ],\n    [\n        \"audio/x-mpegurl\",\n        \"m3u\"\n    ],\n    [\n        \"audio/x-mpequrl\",\n        \"m3u\"\n    ],\n    [\n        \"audio/x-ms-wax\",\n        \"wax\"\n    ],\n    [\n        \"audio/x-ms-wma\",\n        \"wma\"\n    ],\n    [\n        \"audio/x-nspaudio\",\n        [\n            \"la\",\n            \"lma\"\n        ]\n    ],\n    [\n        \"audio/x-pn-realaudio\",\n        [\n            \"ra\",\n            \"ram\",\n            \"rm\",\n            \"rmm\",\n            \"rmp\"\n        ]\n    ],\n    [\n        \"audio/x-pn-realaudio-plugin\",\n        [\n            \"ra\",\n            \"rmp\",\n            \"rpm\"\n        ]\n    ],\n    [\n        \"audio/x-psid\",\n        \"sid\"\n    ],\n    [\n        \"audio/x-realaudio\",\n        \"ra\"\n    ],\n    [\n        \"audio/x-twinvq\",\n        \"vqf\"\n    ],\n    [\n        \"audio/x-twinvq-plugin\",\n        [\n            \"vqe\",\n            \"vql\"\n        ]\n    ],\n    [\n        \"audio/x-vnd.audioexplosion.mjuicemediafile\",\n        \"mjf\"\n    ],\n    [\n        \"audio/x-voc\",\n        \"voc\"\n    ],\n    [\n        \"audio/x-wav\",\n        \"wav\"\n    ],\n    [\n        \"audio/xm\",\n        \"xm\"\n    ],\n    [\n        \"chemical/x-cdx\",\n        \"cdx\"\n    ],\n    [\n        \"chemical/x-cif\",\n        \"cif\"\n    ],\n    [\n        \"chemical/x-cmdf\",\n        \"cmdf\"\n    ],\n    [\n        \"chemical/x-cml\",\n        \"cml\"\n    ],\n    [\n        \"chemical/x-csml\",\n        \"csml\"\n    ],\n    [\n        \"chemical/x-pdb\",\n        [\n            \"pdb\",\n            \"xyz\"\n        ]\n    ],\n    [\n        \"chemical/x-xyz\",\n        \"xyz\"\n    ],\n    [\n        \"drawing/x-dwf\",\n        \"dwf\"\n    ],\n    [\n        \"i-world/i-vrml\",\n        \"ivr\"\n    ],\n    [\n        \"image/bmp\",\n        [\n            \"bmp\",\n            \"bm\"\n        ]\n    ],\n    [\n        \"image/cgm\",\n        \"cgm\"\n    ],\n    [\n        \"image/cis-cod\",\n        \"cod\"\n    ],\n    [\n        \"image/cmu-raster\",\n        [\n            \"ras\",\n            \"rast\"\n        ]\n    ],\n    [\n        \"image/fif\",\n        \"fif\"\n    ],\n    [\n        \"image/florian\",\n        [\n            \"flo\",\n            \"turbot\"\n        ]\n    ],\n    [\n        \"image/g3fax\",\n        \"g3\"\n    ],\n    [\n        \"image/gif\",\n        \"gif\"\n    ],\n    [\n        \"image/ief\",\n        [\n            \"ief\",\n            \"iefs\"\n        ]\n    ],\n    [\n        \"image/jpeg\",\n        [\n            \"jpeg\",\n            \"jpe\",\n            \"jpg\",\n            \"jfif\",\n            \"jfif-tbnl\"\n        ]\n    ],\n    [\n        \"image/jutvision\",\n        \"jut\"\n    ],\n    [\n        \"image/ktx\",\n        \"ktx\"\n    ],\n    [\n        \"image/naplps\",\n        [\n            \"nap\",\n            \"naplps\"\n        ]\n    ],\n    [\n        \"image/pict\",\n        [\n            \"pic\",\n            \"pict\"\n        ]\n    ],\n    [\n        \"image/pipeg\",\n        \"jfif\"\n    ],\n    [\n        \"image/pjpeg\",\n        [\n            \"jfif\",\n            \"jpe\",\n            \"jpeg\",\n            \"jpg\"\n        ]\n    ],\n    [\n        \"image/png\",\n        [\n            \"png\",\n            \"x-png\"\n        ]\n    ],\n    [\n        \"image/prs.btif\",\n        \"btif\"\n    ],\n    [\n        \"image/svg+xml\",\n        \"svg\"\n    ],\n    [\n        \"image/tiff\",\n        [\n            \"tif\",\n            \"tiff\"\n        ]\n    ],\n    [\n        \"image/vasa\",\n        \"mcf\"\n    ],\n    [\n        \"image/vnd.adobe.photoshop\",\n        \"psd\"\n    ],\n    [\n        \"image/vnd.dece.graphic\",\n        \"uvi\"\n    ],\n    [\n        \"image/vnd.djvu\",\n        \"djvu\"\n    ],\n    [\n        \"image/vnd.dvb.subtitle\",\n        \"sub\"\n    ],\n    [\n        \"image/vnd.dwg\",\n        [\n            \"dwg\",\n            \"dxf\",\n            \"svf\"\n        ]\n    ],\n    [\n        \"image/vnd.dxf\",\n        \"dxf\"\n    ],\n    [\n        \"image/vnd.fastbidsheet\",\n        \"fbs\"\n    ],\n    [\n        \"image/vnd.fpx\",\n        \"fpx\"\n    ],\n    [\n        \"image/vnd.fst\",\n        \"fst\"\n    ],\n    [\n        \"image/vnd.fujixerox.edmics-mmr\",\n        \"mmr\"\n    ],\n    [\n        \"image/vnd.fujixerox.edmics-rlc\",\n        \"rlc\"\n    ],\n    [\n        \"image/vnd.ms-modi\",\n        \"mdi\"\n    ],\n    [\n        \"image/vnd.net-fpx\",\n        [\n            \"fpx\",\n            \"npx\"\n        ]\n    ],\n    [\n        \"image/vnd.rn-realflash\",\n        \"rf\"\n    ],\n    [\n        \"image/vnd.rn-realpix\",\n        \"rp\"\n    ],\n    [\n        \"image/vnd.wap.wbmp\",\n        \"wbmp\"\n    ],\n    [\n        \"image/vnd.xiff\",\n        \"xif\"\n    ],\n    [\n        \"image/webp\",\n        \"webp\"\n    ],\n    [\n        \"image/x-cmu-raster\",\n        \"ras\"\n    ],\n    [\n        \"image/x-cmx\",\n        \"cmx\"\n    ],\n    [\n        \"image/x-dwg\",\n        [\n            \"dwg\",\n            \"dxf\",\n            \"svf\"\n        ]\n    ],\n    [\n        \"image/x-freehand\",\n        \"fh\"\n    ],\n    [\n        \"image/x-icon\",\n        \"ico\"\n    ],\n    [\n        \"image/x-jg\",\n        \"art\"\n    ],\n    [\n        \"image/x-jps\",\n        \"jps\"\n    ],\n    [\n        \"image/x-niff\",\n        [\n            \"niff\",\n            \"nif\"\n        ]\n    ],\n    [\n        \"image/x-pcx\",\n        \"pcx\"\n    ],\n    [\n        \"image/x-pict\",\n        [\n            \"pct\",\n            \"pic\"\n        ]\n    ],\n    [\n        \"image/x-portable-anymap\",\n        \"pnm\"\n    ],\n    [\n        \"image/x-portable-bitmap\",\n        \"pbm\"\n    ],\n    [\n        \"image/x-portable-graymap\",\n        \"pgm\"\n    ],\n    [\n        \"image/x-portable-greymap\",\n        \"pgm\"\n    ],\n    [\n        \"image/x-portable-pixmap\",\n        \"ppm\"\n    ],\n    [\n        \"image/x-quicktime\",\n        [\n            \"qif\",\n            \"qti\",\n            \"qtif\"\n        ]\n    ],\n    [\n        \"image/x-rgb\",\n        \"rgb\"\n    ],\n    [\n        \"image/x-tiff\",\n        [\n            \"tif\",\n            \"tiff\"\n        ]\n    ],\n    [\n        \"image/x-windows-bmp\",\n        \"bmp\"\n    ],\n    [\n        \"image/x-xbitmap\",\n        \"xbm\"\n    ],\n    [\n        \"image/x-xbm\",\n        \"xbm\"\n    ],\n    [\n        \"image/x-xpixmap\",\n        [\n            \"xpm\",\n            \"pm\"\n        ]\n    ],\n    [\n        \"image/x-xwd\",\n        \"xwd\"\n    ],\n    [\n        \"image/x-xwindowdump\",\n        \"xwd\"\n    ],\n    [\n        \"image/xbm\",\n        \"xbm\"\n    ],\n    [\n        \"image/xpm\",\n        \"xpm\"\n    ],\n    [\n        \"message/rfc822\",\n        [\n            \"eml\",\n            \"mht\",\n            \"mhtml\",\n            \"nws\",\n            \"mime\"\n        ]\n    ],\n    [\n        \"model/iges\",\n        [\n            \"iges\",\n            \"igs\"\n        ]\n    ],\n    [\n        \"model/mesh\",\n        \"msh\"\n    ],\n    [\n        \"model/vnd.collada+xml\",\n        \"dae\"\n    ],\n    [\n        \"model/vnd.dwf\",\n        \"dwf\"\n    ],\n    [\n        \"model/vnd.gdl\",\n        \"gdl\"\n    ],\n    [\n        \"model/vnd.gtw\",\n        \"gtw\"\n    ],\n    [\n        \"model/vnd.mts\",\n        \"mts\"\n    ],\n    [\n        \"model/vnd.vtu\",\n        \"vtu\"\n    ],\n    [\n        \"model/vrml\",\n        [\n            \"vrml\",\n            \"wrl\",\n            \"wrz\"\n        ]\n    ],\n    [\n        \"model/x-pov\",\n        \"pov\"\n    ],\n    [\n        \"multipart/x-gzip\",\n        \"gzip\"\n    ],\n    [\n        \"multipart/x-ustar\",\n        \"ustar\"\n    ],\n    [\n        \"multipart/x-zip\",\n        \"zip\"\n    ],\n    [\n        \"music/crescendo\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"music/x-karaoke\",\n        \"kar\"\n    ],\n    [\n        \"paleovu/x-pv\",\n        \"pvu\"\n    ],\n    [\n        \"text/asp\",\n        \"asp\"\n    ],\n    [\n        \"text/calendar\",\n        \"ics\"\n    ],\n    [\n        \"text/css\",\n        \"css\"\n    ],\n    [\n        \"text/csv\",\n        \"csv\"\n    ],\n    [\n        \"text/ecmascript\",\n        \"js\"\n    ],\n    [\n        \"text/h323\",\n        \"323\"\n    ],\n    [\n        \"text/html\",\n        [\n            \"html\",\n            \"htm\",\n            \"stm\",\n            \"acgi\",\n            \"htmls\",\n            \"htx\",\n            \"shtml\"\n        ]\n    ],\n    [\n        \"text/iuls\",\n        \"uls\"\n    ],\n    [\n        \"text/javascript\",\n        \"js\"\n    ],\n    [\n        \"text/mcf\",\n        \"mcf\"\n    ],\n    [\n        \"text/n3\",\n        \"n3\"\n    ],\n    [\n        \"text/pascal\",\n        \"pas\"\n    ],\n    [\n        \"text/plain\",\n        [\n            \"txt\",\n            \"bas\",\n            \"c\",\n            \"h\",\n            \"c++\",\n            \"cc\",\n            \"com\",\n            \"conf\",\n            \"cxx\",\n            \"def\",\n            \"f\",\n            \"f90\",\n            \"for\",\n            \"g\",\n            \"hh\",\n            \"idc\",\n            \"jav\",\n            \"java\",\n            \"list\",\n            \"log\",\n            \"lst\",\n            \"m\",\n            \"mar\",\n            \"pl\",\n            \"sdml\",\n            \"text\"\n        ]\n    ],\n    [\n        \"text/plain-bas\",\n        \"par\"\n    ],\n    [\n        \"text/prs.lines.tag\",\n        \"dsc\"\n    ],\n    [\n        \"text/richtext\",\n        [\n            \"rtx\",\n            \"rt\",\n            \"rtf\"\n        ]\n    ],\n    [\n        \"text/scriplet\",\n        \"wsc\"\n    ],\n    [\n        \"text/scriptlet\",\n        \"sct\"\n    ],\n    [\n        \"text/sgml\",\n        [\n            \"sgm\",\n            \"sgml\"\n        ]\n    ],\n    [\n        \"text/tab-separated-values\",\n        \"tsv\"\n    ],\n    [\n        \"text/troff\",\n        \"t\"\n    ],\n    [\n        \"text/turtle\",\n        \"ttl\"\n    ],\n    [\n        \"text/uri-list\",\n        [\n            \"uni\",\n            \"unis\",\n            \"uri\",\n            \"uris\"\n        ]\n    ],\n    [\n        \"text/vnd.abc\",\n        \"abc\"\n    ],\n    [\n        \"text/vnd.curl\",\n        \"curl\"\n    ],\n    [\n        \"text/vnd.curl.dcurl\",\n        \"dcurl\"\n    ],\n    [\n        \"text/vnd.curl.mcurl\",\n        \"mcurl\"\n    ],\n    [\n        \"text/vnd.curl.scurl\",\n        \"scurl\"\n    ],\n    [\n        \"text/vnd.fly\",\n        \"fly\"\n    ],\n    [\n        \"text/vnd.fmi.flexstor\",\n        \"flx\"\n    ],\n    [\n        \"text/vnd.graphviz\",\n        \"gv\"\n    ],\n    [\n        \"text/vnd.in3d.3dml\",\n        \"3dml\"\n    ],\n    [\n        \"text/vnd.in3d.spot\",\n        \"spot\"\n    ],\n    [\n        \"text/vnd.rn-realtext\",\n        \"rt\"\n    ],\n    [\n        \"text/vnd.sun.j2me.app-descriptor\",\n        \"jad\"\n    ],\n    [\n        \"text/vnd.wap.wml\",\n        \"wml\"\n    ],\n    [\n        \"text/vnd.wap.wmlscript\",\n        \"wmls\"\n    ],\n    [\n        \"text/webviewhtml\",\n        \"htt\"\n    ],\n    [\n        \"text/x-asm\",\n        [\n            \"asm\",\n            \"s\"\n        ]\n    ],\n    [\n        \"text/x-audiosoft-intra\",\n        \"aip\"\n    ],\n    [\n        \"text/x-c\",\n        [\n            \"c\",\n            \"cc\",\n            \"cpp\"\n        ]\n    ],\n    [\n        \"text/x-component\",\n        \"htc\"\n    ],\n    [\n        \"text/x-fortran\",\n        [\n            \"for\",\n            \"f\",\n            \"f77\",\n            \"f90\"\n        ]\n    ],\n    [\n        \"text/x-h\",\n        [\n            \"h\",\n            \"hh\"\n        ]\n    ],\n    [\n        \"text/x-java-source\",\n        [\n            \"java\",\n            \"jav\"\n        ]\n    ],\n    [\n        \"text/x-java-source,java\",\n        \"java\"\n    ],\n    [\n        \"text/x-la-asf\",\n        \"lsx\"\n    ],\n    [\n        \"text/x-m\",\n        \"m\"\n    ],\n    [\n        \"text/x-pascal\",\n        \"p\"\n    ],\n    [\n        \"text/x-script\",\n        \"hlb\"\n    ],\n    [\n        \"text/x-script.csh\",\n        \"csh\"\n    ],\n    [\n        \"text/x-script.elisp\",\n        \"el\"\n    ],\n    [\n        \"text/x-script.guile\",\n        \"scm\"\n    ],\n    [\n        \"text/x-script.ksh\",\n        \"ksh\"\n    ],\n    [\n        \"text/x-script.lisp\",\n        \"lsp\"\n    ],\n    [\n        \"text/x-script.perl\",\n        \"pl\"\n    ],\n    [\n        \"text/x-script.perl-module\",\n        \"pm\"\n    ],\n    [\n        \"text/x-script.phyton\",\n        \"py\"\n    ],\n    [\n        \"text/x-script.rexx\",\n        \"rexx\"\n    ],\n    [\n        \"text/x-script.scheme\",\n        \"scm\"\n    ],\n    [\n        \"text/x-script.sh\",\n        \"sh\"\n    ],\n    [\n        \"text/x-script.tcl\",\n        \"tcl\"\n    ],\n    [\n        \"text/x-script.tcsh\",\n        \"tcsh\"\n    ],\n    [\n        \"text/x-script.zsh\",\n        \"zsh\"\n    ],\n    [\n        \"text/x-server-parsed-html\",\n        [\n            \"shtml\",\n            \"ssi\"\n        ]\n    ],\n    [\n        \"text/x-setext\",\n        \"etx\"\n    ],\n    [\n        \"text/x-sgml\",\n        [\n            \"sgm\",\n            \"sgml\"\n        ]\n    ],\n    [\n        \"text/x-speech\",\n        [\n            \"spc\",\n            \"talk\"\n        ]\n    ],\n    [\n        \"text/x-uil\",\n        \"uil\"\n    ],\n    [\n        \"text/x-uuencode\",\n        [\n            \"uu\",\n            \"uue\"\n        ]\n    ],\n    [\n        \"text/x-vcalendar\",\n        \"vcs\"\n    ],\n    [\n        \"text/x-vcard\",\n        \"vcf\"\n    ],\n    [\n        \"text/xml\",\n        \"xml\"\n    ],\n    [\n        \"video/3gpp\",\n        \"3gp\"\n    ],\n    [\n        \"video/3gpp2\",\n        \"3g2\"\n    ],\n    [\n        \"video/animaflex\",\n        \"afl\"\n    ],\n    [\n        \"video/avi\",\n        \"avi\"\n    ],\n    [\n        \"video/avs-video\",\n        \"avs\"\n    ],\n    [\n        \"video/dl\",\n        \"dl\"\n    ],\n    [\n        \"video/fli\",\n        \"fli\"\n    ],\n    [\n        \"video/gl\",\n        \"gl\"\n    ],\n    [\n        \"video/h261\",\n        \"h261\"\n    ],\n    [\n        \"video/h263\",\n        \"h263\"\n    ],\n    [\n        \"video/h264\",\n        \"h264\"\n    ],\n    [\n        \"video/jpeg\",\n        \"jpgv\"\n    ],\n    [\n        \"video/jpm\",\n        \"jpm\"\n    ],\n    [\n        \"video/mj2\",\n        \"mj2\"\n    ],\n    [\n        \"video/mp4\",\n        \"mp4\"\n    ],\n    [\n        \"video/mpeg\",\n        [\n            \"mpeg\",\n            \"mp2\",\n            \"mpa\",\n            \"mpe\",\n            \"mpg\",\n            \"mpv2\",\n            \"m1v\",\n            \"m2v\",\n            \"mp3\"\n        ]\n    ],\n    [\n        \"video/msvideo\",\n        \"avi\"\n    ],\n    [\n        \"video/ogg\",\n        \"ogv\"\n    ],\n    [\n        \"video/quicktime\",\n        [\n            \"mov\",\n            \"qt\",\n            \"moov\"\n        ]\n    ],\n    [\n        \"video/vdo\",\n        \"vdo\"\n    ],\n    [\n        \"video/vivo\",\n        [\n            \"viv\",\n            \"vivo\"\n        ]\n    ],\n    [\n        \"video/vnd.dece.hd\",\n        \"uvh\"\n    ],\n    [\n        \"video/vnd.dece.mobile\",\n        \"uvm\"\n    ],\n    [\n        \"video/vnd.dece.pd\",\n        \"uvp\"\n    ],\n    [\n        \"video/vnd.dece.sd\",\n        \"uvs\"\n    ],\n    [\n        \"video/vnd.dece.video\",\n        \"uvv\"\n    ],\n    [\n        \"video/vnd.fvt\",\n        \"fvt\"\n    ],\n    [\n        \"video/vnd.mpegurl\",\n        \"mxu\"\n    ],\n    [\n        \"video/vnd.ms-playready.media.pyv\",\n        \"pyv\"\n    ],\n    [\n        \"video/vnd.rn-realvideo\",\n        \"rv\"\n    ],\n    [\n        \"video/vnd.uvvu.mp4\",\n        \"uvu\"\n    ],\n    [\n        \"video/vnd.vivo\",\n        [\n            \"viv\",\n            \"vivo\"\n        ]\n    ],\n    [\n        \"video/vosaic\",\n        \"vos\"\n    ],\n    [\n        \"video/webm\",\n        \"webm\"\n    ],\n    [\n        \"video/x-amt-demorun\",\n        \"xdr\"\n    ],\n    [\n        \"video/x-amt-showrun\",\n        \"xsr\"\n    ],\n    [\n        \"video/x-atomic3d-feature\",\n        \"fmf\"\n    ],\n    [\n        \"video/x-dl\",\n        \"dl\"\n    ],\n    [\n        \"video/x-dv\",\n        [\n            \"dif\",\n            \"dv\"\n        ]\n    ],\n    [\n        \"video/x-f4v\",\n        \"f4v\"\n    ],\n    [\n        \"video/x-fli\",\n        \"fli\"\n    ],\n    [\n        \"video/x-flv\",\n        \"flv\"\n    ],\n    [\n        \"video/x-gl\",\n        \"gl\"\n    ],\n    [\n        \"video/x-isvideo\",\n        \"isu\"\n    ],\n    [\n        \"video/x-la-asf\",\n        [\n            \"lsf\",\n            \"lsx\"\n        ]\n    ],\n    [\n        \"video/x-m4v\",\n        \"m4v\"\n    ],\n    [\n        \"video/x-motion-jpeg\",\n        \"mjpg\"\n    ],\n    [\n        \"video/x-mpeg\",\n        [\n            \"mp3\",\n            \"mp2\"\n        ]\n    ],\n    [\n        \"video/x-mpeq2a\",\n        \"mp2\"\n    ],\n    [\n        \"video/x-ms-asf\",\n        [\n            \"asf\",\n            \"asr\",\n            \"asx\"\n        ]\n    ],\n    [\n        \"video/x-ms-asf-plugin\",\n        \"asx\"\n    ],\n    [\n        \"video/x-ms-wm\",\n        \"wm\"\n    ],\n    [\n        \"video/x-ms-wmv\",\n        \"wmv\"\n    ],\n    [\n        \"video/x-ms-wmx\",\n        \"wmx\"\n    ],\n    [\n        \"video/x-ms-wvx\",\n        \"wvx\"\n    ],\n    [\n        \"video/x-msvideo\",\n        \"avi\"\n    ],\n    [\n        \"video/x-qtc\",\n        \"qtc\"\n    ],\n    [\n        \"video/x-scm\",\n        \"scm\"\n    ],\n    [\n        \"video/x-sgi-movie\",\n        [\n            \"movie\",\n            \"mv\"\n        ]\n    ],\n    [\n        \"windows/metafile\",\n        \"wmf\"\n    ],\n    [\n        \"www/mime\",\n        \"mime\"\n    ],\n    [\n        \"x-conference/x-cooltalk\",\n        \"ice\"\n    ],\n    [\n        \"x-music/x-midi\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"x-world/x-3dmf\",\n        [\n            \"3dm\",\n            \"3dmf\",\n            \"qd3\",\n            \"qd3d\"\n        ]\n    ],\n    [\n        \"x-world/x-svr\",\n        \"svr\"\n    ],\n    [\n        \"x-world/x-vrml\",\n        [\n            \"flr\",\n            \"vrml\",\n            \"wrl\",\n            \"wrz\",\n            \"xaf\",\n            \"xof\"\n        ]\n    ],\n    [\n        \"x-world/x-vrt\",\n        \"vrt\"\n    ],\n    [\n        \"xgl/drawing\",\n        \"xgz\"\n    ],\n    [\n        \"xgl/movie\",\n        \"xmz\"\n    ]\n]);\nconst extensions = new Map([\n    [\n        \"123\",\n        \"application/vnd.lotus-1-2-3\"\n    ],\n    [\n        \"323\",\n        \"text/h323\"\n    ],\n    [\n        \"*\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"3dm\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"3dmf\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"3dml\",\n        \"text/vnd.in3d.3dml\"\n    ],\n    [\n        \"3g2\",\n        \"video/3gpp2\"\n    ],\n    [\n        \"3gp\",\n        \"video/3gpp\"\n    ],\n    [\n        \"7z\",\n        \"application/x-7z-compressed\"\n    ],\n    [\n        \"a\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"aab\",\n        \"application/x-authorware-bin\"\n    ],\n    [\n        \"aac\",\n        \"audio/x-aac\"\n    ],\n    [\n        \"aam\",\n        \"application/x-authorware-map\"\n    ],\n    [\n        \"aas\",\n        \"application/x-authorware-seg\"\n    ],\n    [\n        \"abc\",\n        \"text/vnd.abc\"\n    ],\n    [\n        \"abw\",\n        \"application/x-abiword\"\n    ],\n    [\n        \"ac\",\n        \"application/pkix-attr-cert\"\n    ],\n    [\n        \"acc\",\n        \"application/vnd.americandynamics.acc\"\n    ],\n    [\n        \"ace\",\n        \"application/x-ace-compressed\"\n    ],\n    [\n        \"acgi\",\n        \"text/html\"\n    ],\n    [\n        \"acu\",\n        \"application/vnd.acucobol\"\n    ],\n    [\n        \"acx\",\n        \"application/internet-property-stream\"\n    ],\n    [\n        \"adp\",\n        \"audio/adpcm\"\n    ],\n    [\n        \"aep\",\n        \"application/vnd.audiograph\"\n    ],\n    [\n        \"afl\",\n        \"video/animaflex\"\n    ],\n    [\n        \"afp\",\n        \"application/vnd.ibm.modcap\"\n    ],\n    [\n        \"ahead\",\n        \"application/vnd.ahead.space\"\n    ],\n    [\n        \"ai\",\n        \"application/postscript\"\n    ],\n    [\n        \"aif\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aifc\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aiff\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aim\",\n        \"application/x-aim\"\n    ],\n    [\n        \"aip\",\n        \"text/x-audiosoft-intra\"\n    ],\n    [\n        \"air\",\n        \"application/vnd.adobe.air-application-installer-package+zip\"\n    ],\n    [\n        \"ait\",\n        \"application/vnd.dvb.ait\"\n    ],\n    [\n        \"ami\",\n        \"application/vnd.amiga.ami\"\n    ],\n    [\n        \"ani\",\n        \"application/x-navi-animation\"\n    ],\n    [\n        \"aos\",\n        \"application/x-nokia-9000-communicator-add-on-software\"\n    ],\n    [\n        \"apk\",\n        \"application/vnd.android.package-archive\"\n    ],\n    [\n        \"application\",\n        \"application/x-ms-application\"\n    ],\n    [\n        \"apr\",\n        \"application/vnd.lotus-approach\"\n    ],\n    [\n        \"aps\",\n        \"application/mime\"\n    ],\n    [\n        \"arc\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"arj\",\n        [\n            \"application/arj\",\n            \"application/octet-stream\"\n        ]\n    ],\n    [\n        \"art\",\n        \"image/x-jg\"\n    ],\n    [\n        \"asf\",\n        \"video/x-ms-asf\"\n    ],\n    [\n        \"asm\",\n        \"text/x-asm\"\n    ],\n    [\n        \"aso\",\n        \"application/vnd.accpac.simply.aso\"\n    ],\n    [\n        \"asp\",\n        \"text/asp\"\n    ],\n    [\n        \"asr\",\n        \"video/x-ms-asf\"\n    ],\n    [\n        \"asx\",\n        [\n            \"video/x-ms-asf\",\n            \"application/x-mplayer2\",\n            \"video/x-ms-asf-plugin\"\n        ]\n    ],\n    [\n        \"atc\",\n        \"application/vnd.acucorp\"\n    ],\n    [\n        \"atomcat\",\n        \"application/atomcat+xml\"\n    ],\n    [\n        \"atomsvc\",\n        \"application/atomsvc+xml\"\n    ],\n    [\n        \"atx\",\n        \"application/vnd.antix.game-component\"\n    ],\n    [\n        \"au\",\n        [\n            \"audio/basic\",\n            \"audio/x-au\"\n        ]\n    ],\n    [\n        \"avi\",\n        [\n            \"video/avi\",\n            \"video/msvideo\",\n            \"application/x-troff-msvideo\",\n            \"video/x-msvideo\"\n        ]\n    ],\n    [\n        \"avs\",\n        \"video/avs-video\"\n    ],\n    [\n        \"aw\",\n        \"application/applixware\"\n    ],\n    [\n        \"axs\",\n        \"application/olescript\"\n    ],\n    [\n        \"azf\",\n        \"application/vnd.airzip.filesecure.azf\"\n    ],\n    [\n        \"azs\",\n        \"application/vnd.airzip.filesecure.azs\"\n    ],\n    [\n        \"azw\",\n        \"application/vnd.amazon.ebook\"\n    ],\n    [\n        \"bas\",\n        \"text/plain\"\n    ],\n    [\n        \"bcpio\",\n        \"application/x-bcpio\"\n    ],\n    [\n        \"bdf\",\n        \"application/x-font-bdf\"\n    ],\n    [\n        \"bdm\",\n        \"application/vnd.syncml.dm+wbxml\"\n    ],\n    [\n        \"bed\",\n        \"application/vnd.realvnc.bed\"\n    ],\n    [\n        \"bh2\",\n        \"application/vnd.fujitsu.oasysprs\"\n    ],\n    [\n        \"bin\",\n        [\n            \"application/octet-stream\",\n            \"application/mac-binary\",\n            \"application/macbinary\",\n            \"application/x-macbinary\",\n            \"application/x-binary\"\n        ]\n    ],\n    [\n        \"bm\",\n        \"image/bmp\"\n    ],\n    [\n        \"bmi\",\n        \"application/vnd.bmi\"\n    ],\n    [\n        \"bmp\",\n        [\n            \"image/bmp\",\n            \"image/x-windows-bmp\"\n        ]\n    ],\n    [\n        \"boo\",\n        \"application/book\"\n    ],\n    [\n        \"book\",\n        \"application/book\"\n    ],\n    [\n        \"box\",\n        \"application/vnd.previewsystems.box\"\n    ],\n    [\n        \"boz\",\n        \"application/x-bzip2\"\n    ],\n    [\n        \"bsh\",\n        \"application/x-bsh\"\n    ],\n    [\n        \"btif\",\n        \"image/prs.btif\"\n    ],\n    [\n        \"bz\",\n        \"application/x-bzip\"\n    ],\n    [\n        \"bz2\",\n        \"application/x-bzip2\"\n    ],\n    [\n        \"c\",\n        [\n            \"text/plain\",\n            \"text/x-c\"\n        ]\n    ],\n    [\n        \"c++\",\n        \"text/plain\"\n    ],\n    [\n        \"c11amc\",\n        \"application/vnd.cluetrust.cartomobile-config\"\n    ],\n    [\n        \"c11amz\",\n        \"application/vnd.cluetrust.cartomobile-config-pkg\"\n    ],\n    [\n        \"c4g\",\n        \"application/vnd.clonk.c4group\"\n    ],\n    [\n        \"cab\",\n        \"application/vnd.ms-cab-compressed\"\n    ],\n    [\n        \"car\",\n        \"application/vnd.curl.car\"\n    ],\n    [\n        \"cat\",\n        [\n            \"application/vnd.ms-pkiseccat\",\n            \"application/vnd.ms-pki.seccat\"\n        ]\n    ],\n    [\n        \"cc\",\n        [\n            \"text/plain\",\n            \"text/x-c\"\n        ]\n    ],\n    [\n        \"ccad\",\n        \"application/clariscad\"\n    ],\n    [\n        \"cco\",\n        \"application/x-cocoa\"\n    ],\n    [\n        \"ccxml\",\n        \"application/ccxml+xml,\"\n    ],\n    [\n        \"cdbcmsg\",\n        \"application/vnd.contact.cmsg\"\n    ],\n    [\n        \"cdf\",\n        [\n            \"application/cdf\",\n            \"application/x-cdf\",\n            \"application/x-netcdf\"\n        ]\n    ],\n    [\n        \"cdkey\",\n        \"application/vnd.mediastation.cdkey\"\n    ],\n    [\n        \"cdmia\",\n        \"application/cdmi-capability\"\n    ],\n    [\n        \"cdmic\",\n        \"application/cdmi-container\"\n    ],\n    [\n        \"cdmid\",\n        \"application/cdmi-domain\"\n    ],\n    [\n        \"cdmio\",\n        \"application/cdmi-object\"\n    ],\n    [\n        \"cdmiq\",\n        \"application/cdmi-queue\"\n    ],\n    [\n        \"cdx\",\n        \"chemical/x-cdx\"\n    ],\n    [\n        \"cdxml\",\n        \"application/vnd.chemdraw+xml\"\n    ],\n    [\n        \"cdy\",\n        \"application/vnd.cinderella\"\n    ],\n    [\n        \"cer\",\n        [\n            \"application/pkix-cert\",\n            \"application/x-x509-ca-cert\"\n        ]\n    ],\n    [\n        \"cgm\",\n        \"image/cgm\"\n    ],\n    [\n        \"cha\",\n        \"application/x-chat\"\n    ],\n    [\n        \"chat\",\n        \"application/x-chat\"\n    ],\n    [\n        \"chm\",\n        \"application/vnd.ms-htmlhelp\"\n    ],\n    [\n        \"chrt\",\n        \"application/vnd.kde.kchart\"\n    ],\n    [\n        \"cif\",\n        \"chemical/x-cif\"\n    ],\n    [\n        \"cii\",\n        \"application/vnd.anser-web-certificate-issue-initiation\"\n    ],\n    [\n        \"cil\",\n        \"application/vnd.ms-artgalry\"\n    ],\n    [\n        \"cla\",\n        \"application/vnd.claymore\"\n    ],\n    [\n        \"class\",\n        [\n            \"application/octet-stream\",\n            \"application/java\",\n            \"application/java-byte-code\",\n            \"application/java-vm\",\n            \"application/x-java-class\"\n        ]\n    ],\n    [\n        \"clkk\",\n        \"application/vnd.crick.clicker.keyboard\"\n    ],\n    [\n        \"clkp\",\n        \"application/vnd.crick.clicker.palette\"\n    ],\n    [\n        \"clkt\",\n        \"application/vnd.crick.clicker.template\"\n    ],\n    [\n        \"clkw\",\n        \"application/vnd.crick.clicker.wordbank\"\n    ],\n    [\n        \"clkx\",\n        \"application/vnd.crick.clicker\"\n    ],\n    [\n        \"clp\",\n        \"application/x-msclip\"\n    ],\n    [\n        \"cmc\",\n        \"application/vnd.cosmocaller\"\n    ],\n    [\n        \"cmdf\",\n        \"chemical/x-cmdf\"\n    ],\n    [\n        \"cml\",\n        \"chemical/x-cml\"\n    ],\n    [\n        \"cmp\",\n        \"application/vnd.yellowriver-custom-menu\"\n    ],\n    [\n        \"cmx\",\n        \"image/x-cmx\"\n    ],\n    [\n        \"cod\",\n        [\n            \"image/cis-cod\",\n            \"application/vnd.rim.cod\"\n        ]\n    ],\n    [\n        \"com\",\n        [\n            \"application/octet-stream\",\n            \"text/plain\"\n        ]\n    ],\n    [\n        \"conf\",\n        \"text/plain\"\n    ],\n    [\n        \"cpio\",\n        \"application/x-cpio\"\n    ],\n    [\n        \"cpp\",\n        \"text/x-c\"\n    ],\n    [\n        \"cpt\",\n        [\n            \"application/mac-compactpro\",\n            \"application/x-compactpro\",\n            \"application/x-cpt\"\n        ]\n    ],\n    [\n        \"crd\",\n        \"application/x-mscardfile\"\n    ],\n    [\n        \"crl\",\n        [\n            \"application/pkix-crl\",\n            \"application/pkcs-crl\"\n        ]\n    ],\n    [\n        \"crt\",\n        [\n            \"application/pkix-cert\",\n            \"application/x-x509-user-cert\",\n            \"application/x-x509-ca-cert\"\n        ]\n    ],\n    [\n        \"cryptonote\",\n        \"application/vnd.rig.cryptonote\"\n    ],\n    [\n        \"csh\",\n        [\n            \"text/x-script.csh\",\n            \"application/x-csh\"\n        ]\n    ],\n    [\n        \"csml\",\n        \"chemical/x-csml\"\n    ],\n    [\n        \"csp\",\n        \"application/vnd.commonspace\"\n    ],\n    [\n        \"css\",\n        [\n            \"text/css\",\n            \"application/x-pointplus\"\n        ]\n    ],\n    [\n        \"csv\",\n        \"text/csv\"\n    ],\n    [\n        \"cu\",\n        \"application/cu-seeme\"\n    ],\n    [\n        \"curl\",\n        \"text/vnd.curl\"\n    ],\n    [\n        \"cww\",\n        \"application/prs.cww\"\n    ],\n    [\n        \"cxx\",\n        \"text/plain\"\n    ],\n    [\n        \"dae\",\n        \"model/vnd.collada+xml\"\n    ],\n    [\n        \"daf\",\n        \"application/vnd.mobius.daf\"\n    ],\n    [\n        \"davmount\",\n        \"application/davmount+xml\"\n    ],\n    [\n        \"dcr\",\n        \"application/x-director\"\n    ],\n    [\n        \"dcurl\",\n        \"text/vnd.curl.dcurl\"\n    ],\n    [\n        \"dd2\",\n        \"application/vnd.oma.dd2+xml\"\n    ],\n    [\n        \"ddd\",\n        \"application/vnd.fujixerox.ddd\"\n    ],\n    [\n        \"deb\",\n        \"application/x-debian-package\"\n    ],\n    [\n        \"deepv\",\n        \"application/x-deepv\"\n    ],\n    [\n        \"def\",\n        \"text/plain\"\n    ],\n    [\n        \"der\",\n        \"application/x-x509-ca-cert\"\n    ],\n    [\n        \"dfac\",\n        \"application/vnd.dreamfactory\"\n    ],\n    [\n        \"dif\",\n        \"video/x-dv\"\n    ],\n    [\n        \"dir\",\n        \"application/x-director\"\n    ],\n    [\n        \"dis\",\n        \"application/vnd.mobius.dis\"\n    ],\n    [\n        \"djvu\",\n        \"image/vnd.djvu\"\n    ],\n    [\n        \"dl\",\n        [\n            \"video/dl\",\n            \"video/x-dl\"\n        ]\n    ],\n    [\n        \"dll\",\n        \"application/x-msdownload\"\n    ],\n    [\n        \"dms\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"dna\",\n        \"application/vnd.dna\"\n    ],\n    [\n        \"doc\",\n        \"application/msword\"\n    ],\n    [\n        \"docm\",\n        \"application/vnd.ms-word.document.macroenabled.12\"\n    ],\n    [\n        \"docx\",\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    ],\n    [\n        \"dot\",\n        \"application/msword\"\n    ],\n    [\n        \"dotm\",\n        \"application/vnd.ms-word.template.macroenabled.12\"\n    ],\n    [\n        \"dotx\",\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\"\n    ],\n    [\n        \"dp\",\n        [\n            \"application/commonground\",\n            \"application/vnd.osgi.dp\"\n        ]\n    ],\n    [\n        \"dpg\",\n        \"application/vnd.dpgraph\"\n    ],\n    [\n        \"dra\",\n        \"audio/vnd.dra\"\n    ],\n    [\n        \"drw\",\n        \"application/drafting\"\n    ],\n    [\n        \"dsc\",\n        \"text/prs.lines.tag\"\n    ],\n    [\n        \"dssc\",\n        \"application/dssc+der\"\n    ],\n    [\n        \"dtb\",\n        \"application/x-dtbook+xml\"\n    ],\n    [\n        \"dtd\",\n        \"application/xml-dtd\"\n    ],\n    [\n        \"dts\",\n        \"audio/vnd.dts\"\n    ],\n    [\n        \"dtshd\",\n        \"audio/vnd.dts.hd\"\n    ],\n    [\n        \"dump\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"dv\",\n        \"video/x-dv\"\n    ],\n    [\n        \"dvi\",\n        \"application/x-dvi\"\n    ],\n    [\n        \"dwf\",\n        [\n            \"model/vnd.dwf\",\n            \"drawing/x-dwf\"\n        ]\n    ],\n    [\n        \"dwg\",\n        [\n            \"application/acad\",\n            \"image/vnd.dwg\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"dxf\",\n        [\n            \"application/dxf\",\n            \"image/vnd.dwg\",\n            \"image/vnd.dxf\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"dxp\",\n        \"application/vnd.spotfire.dxp\"\n    ],\n    [\n        \"dxr\",\n        \"application/x-director\"\n    ],\n    [\n        \"ecelp4800\",\n        \"audio/vnd.nuera.ecelp4800\"\n    ],\n    [\n        \"ecelp7470\",\n        \"audio/vnd.nuera.ecelp7470\"\n    ],\n    [\n        \"ecelp9600\",\n        \"audio/vnd.nuera.ecelp9600\"\n    ],\n    [\n        \"edm\",\n        \"application/vnd.novadigm.edm\"\n    ],\n    [\n        \"edx\",\n        \"application/vnd.novadigm.edx\"\n    ],\n    [\n        \"efif\",\n        \"application/vnd.picsel\"\n    ],\n    [\n        \"ei6\",\n        \"application/vnd.pg.osasli\"\n    ],\n    [\n        \"el\",\n        \"text/x-script.elisp\"\n    ],\n    [\n        \"elc\",\n        [\n            \"application/x-elc\",\n            \"application/x-bytecode.elisp\"\n        ]\n    ],\n    [\n        \"eml\",\n        \"message/rfc822\"\n    ],\n    [\n        \"emma\",\n        \"application/emma+xml\"\n    ],\n    [\n        \"env\",\n        \"application/x-envoy\"\n    ],\n    [\n        \"eol\",\n        \"audio/vnd.digital-winds\"\n    ],\n    [\n        \"eot\",\n        \"application/vnd.ms-fontobject\"\n    ],\n    [\n        \"eps\",\n        \"application/postscript\"\n    ],\n    [\n        \"epub\",\n        \"application/epub+zip\"\n    ],\n    [\n        \"es\",\n        [\n            \"application/ecmascript\",\n            \"application/x-esrehber\"\n        ]\n    ],\n    [\n        \"es3\",\n        \"application/vnd.eszigno3+xml\"\n    ],\n    [\n        \"esf\",\n        \"application/vnd.epson.esf\"\n    ],\n    [\n        \"etx\",\n        \"text/x-setext\"\n    ],\n    [\n        \"evy\",\n        [\n            \"application/envoy\",\n            \"application/x-envoy\"\n        ]\n    ],\n    [\n        \"exe\",\n        [\n            \"application/octet-stream\",\n            \"application/x-msdownload\"\n        ]\n    ],\n    [\n        \"exi\",\n        \"application/exi\"\n    ],\n    [\n        \"ext\",\n        \"application/vnd.novadigm.ext\"\n    ],\n    [\n        \"ez2\",\n        \"application/vnd.ezpix-album\"\n    ],\n    [\n        \"ez3\",\n        \"application/vnd.ezpix-package\"\n    ],\n    [\n        \"f\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"f4v\",\n        \"video/x-f4v\"\n    ],\n    [\n        \"f77\",\n        \"text/x-fortran\"\n    ],\n    [\n        \"f90\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"fbs\",\n        \"image/vnd.fastbidsheet\"\n    ],\n    [\n        \"fcs\",\n        \"application/vnd.isac.fcs\"\n    ],\n    [\n        \"fdf\",\n        \"application/vnd.fdf\"\n    ],\n    [\n        \"fe_launch\",\n        \"application/vnd.denovo.fcselayout-link\"\n    ],\n    [\n        \"fg5\",\n        \"application/vnd.fujitsu.oasysgp\"\n    ],\n    [\n        \"fh\",\n        \"image/x-freehand\"\n    ],\n    [\n        \"fif\",\n        [\n            \"application/fractals\",\n            \"image/fif\"\n        ]\n    ],\n    [\n        \"fig\",\n        \"application/x-xfig\"\n    ],\n    [\n        \"fli\",\n        [\n            \"video/fli\",\n            \"video/x-fli\"\n        ]\n    ],\n    [\n        \"flo\",\n        [\n            \"image/florian\",\n            \"application/vnd.micrografx.flo\"\n        ]\n    ],\n    [\n        \"flr\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"flv\",\n        \"video/x-flv\"\n    ],\n    [\n        \"flw\",\n        \"application/vnd.kde.kivio\"\n    ],\n    [\n        \"flx\",\n        \"text/vnd.fmi.flexstor\"\n    ],\n    [\n        \"fly\",\n        \"text/vnd.fly\"\n    ],\n    [\n        \"fm\",\n        \"application/vnd.framemaker\"\n    ],\n    [\n        \"fmf\",\n        \"video/x-atomic3d-feature\"\n    ],\n    [\n        \"fnc\",\n        \"application/vnd.frogans.fnc\"\n    ],\n    [\n        \"for\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"fpx\",\n        [\n            \"image/vnd.fpx\",\n            \"image/vnd.net-fpx\"\n        ]\n    ],\n    [\n        \"frl\",\n        \"application/freeloader\"\n    ],\n    [\n        \"fsc\",\n        \"application/vnd.fsc.weblaunch\"\n    ],\n    [\n        \"fst\",\n        \"image/vnd.fst\"\n    ],\n    [\n        \"ftc\",\n        \"application/vnd.fluxtime.clip\"\n    ],\n    [\n        \"fti\",\n        \"application/vnd.anser-web-funds-transfer-initiation\"\n    ],\n    [\n        \"funk\",\n        \"audio/make\"\n    ],\n    [\n        \"fvt\",\n        \"video/vnd.fvt\"\n    ],\n    [\n        \"fxp\",\n        \"application/vnd.adobe.fxp\"\n    ],\n    [\n        \"fzs\",\n        \"application/vnd.fuzzysheet\"\n    ],\n    [\n        \"g\",\n        \"text/plain\"\n    ],\n    [\n        \"g2w\",\n        \"application/vnd.geoplan\"\n    ],\n    [\n        \"g3\",\n        \"image/g3fax\"\n    ],\n    [\n        \"g3w\",\n        \"application/vnd.geospace\"\n    ],\n    [\n        \"gac\",\n        \"application/vnd.groove-account\"\n    ],\n    [\n        \"gdl\",\n        \"model/vnd.gdl\"\n    ],\n    [\n        \"geo\",\n        \"application/vnd.dynageo\"\n    ],\n    [\n        \"gex\",\n        \"application/vnd.geometry-explorer\"\n    ],\n    [\n        \"ggb\",\n        \"application/vnd.geogebra.file\"\n    ],\n    [\n        \"ggt\",\n        \"application/vnd.geogebra.tool\"\n    ],\n    [\n        \"ghf\",\n        \"application/vnd.groove-help\"\n    ],\n    [\n        \"gif\",\n        \"image/gif\"\n    ],\n    [\n        \"gim\",\n        \"application/vnd.groove-identity-message\"\n    ],\n    [\n        \"gl\",\n        [\n            \"video/gl\",\n            \"video/x-gl\"\n        ]\n    ],\n    [\n        \"gmx\",\n        \"application/vnd.gmx\"\n    ],\n    [\n        \"gnumeric\",\n        \"application/x-gnumeric\"\n    ],\n    [\n        \"gph\",\n        \"application/vnd.flographit\"\n    ],\n    [\n        \"gqf\",\n        \"application/vnd.grafeq\"\n    ],\n    [\n        \"gram\",\n        \"application/srgs\"\n    ],\n    [\n        \"grv\",\n        \"application/vnd.groove-injector\"\n    ],\n    [\n        \"grxml\",\n        \"application/srgs+xml\"\n    ],\n    [\n        \"gsd\",\n        \"audio/x-gsm\"\n    ],\n    [\n        \"gsf\",\n        \"application/x-font-ghostscript\"\n    ],\n    [\n        \"gsm\",\n        \"audio/x-gsm\"\n    ],\n    [\n        \"gsp\",\n        \"application/x-gsp\"\n    ],\n    [\n        \"gss\",\n        \"application/x-gss\"\n    ],\n    [\n        \"gtar\",\n        \"application/x-gtar\"\n    ],\n    [\n        \"gtm\",\n        \"application/vnd.groove-tool-message\"\n    ],\n    [\n        \"gtw\",\n        \"model/vnd.gtw\"\n    ],\n    [\n        \"gv\",\n        \"text/vnd.graphviz\"\n    ],\n    [\n        \"gxt\",\n        \"application/vnd.geonext\"\n    ],\n    [\n        \"gz\",\n        [\n            \"application/x-gzip\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"gzip\",\n        [\n            \"multipart/x-gzip\",\n            \"application/x-gzip\"\n        ]\n    ],\n    [\n        \"h\",\n        [\n            \"text/plain\",\n            \"text/x-h\"\n        ]\n    ],\n    [\n        \"h261\",\n        \"video/h261\"\n    ],\n    [\n        \"h263\",\n        \"video/h263\"\n    ],\n    [\n        \"h264\",\n        \"video/h264\"\n    ],\n    [\n        \"hal\",\n        \"application/vnd.hal+xml\"\n    ],\n    [\n        \"hbci\",\n        \"application/vnd.hbci\"\n    ],\n    [\n        \"hdf\",\n        \"application/x-hdf\"\n    ],\n    [\n        \"help\",\n        \"application/x-helpfile\"\n    ],\n    [\n        \"hgl\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hh\",\n        [\n            \"text/plain\",\n            \"text/x-h\"\n        ]\n    ],\n    [\n        \"hlb\",\n        \"text/x-script\"\n    ],\n    [\n        \"hlp\",\n        [\n            \"application/winhlp\",\n            \"application/hlp\",\n            \"application/x-helpfile\",\n            \"application/x-winhelp\"\n        ]\n    ],\n    [\n        \"hpg\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hpgl\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hpid\",\n        \"application/vnd.hp-hpid\"\n    ],\n    [\n        \"hps\",\n        \"application/vnd.hp-hps\"\n    ],\n    [\n        \"hqx\",\n        [\n            \"application/mac-binhex40\",\n            \"application/binhex\",\n            \"application/binhex4\",\n            \"application/mac-binhex\",\n            \"application/x-binhex40\",\n            \"application/x-mac-binhex40\"\n        ]\n    ],\n    [\n        \"hta\",\n        \"application/hta\"\n    ],\n    [\n        \"htc\",\n        \"text/x-component\"\n    ],\n    [\n        \"htke\",\n        \"application/vnd.kenameaapp\"\n    ],\n    [\n        \"htm\",\n        \"text/html\"\n    ],\n    [\n        \"html\",\n        \"text/html\"\n    ],\n    [\n        \"htmls\",\n        \"text/html\"\n    ],\n    [\n        \"htt\",\n        \"text/webviewhtml\"\n    ],\n    [\n        \"htx\",\n        \"text/html\"\n    ],\n    [\n        \"hvd\",\n        \"application/vnd.yamaha.hv-dic\"\n    ],\n    [\n        \"hvp\",\n        \"application/vnd.yamaha.hv-voice\"\n    ],\n    [\n        \"hvs\",\n        \"application/vnd.yamaha.hv-script\"\n    ],\n    [\n        \"i2g\",\n        \"application/vnd.intergeo\"\n    ],\n    [\n        \"icc\",\n        \"application/vnd.iccprofile\"\n    ],\n    [\n        \"ice\",\n        \"x-conference/x-cooltalk\"\n    ],\n    [\n        \"ico\",\n        \"image/x-icon\"\n    ],\n    [\n        \"ics\",\n        \"text/calendar\"\n    ],\n    [\n        \"idc\",\n        \"text/plain\"\n    ],\n    [\n        \"ief\",\n        \"image/ief\"\n    ],\n    [\n        \"iefs\",\n        \"image/ief\"\n    ],\n    [\n        \"ifm\",\n        \"application/vnd.shana.informed.formdata\"\n    ],\n    [\n        \"iges\",\n        [\n            \"application/iges\",\n            \"model/iges\"\n        ]\n    ],\n    [\n        \"igl\",\n        \"application/vnd.igloader\"\n    ],\n    [\n        \"igm\",\n        \"application/vnd.insors.igm\"\n    ],\n    [\n        \"igs\",\n        [\n            \"application/iges\",\n            \"model/iges\"\n        ]\n    ],\n    [\n        \"igx\",\n        \"application/vnd.micrografx.igx\"\n    ],\n    [\n        \"iif\",\n        \"application/vnd.shana.informed.interchange\"\n    ],\n    [\n        \"iii\",\n        \"application/x-iphone\"\n    ],\n    [\n        \"ima\",\n        \"application/x-ima\"\n    ],\n    [\n        \"imap\",\n        \"application/x-httpd-imap\"\n    ],\n    [\n        \"imp\",\n        \"application/vnd.accpac.simply.imp\"\n    ],\n    [\n        \"ims\",\n        \"application/vnd.ms-ims\"\n    ],\n    [\n        \"inf\",\n        \"application/inf\"\n    ],\n    [\n        \"ins\",\n        [\n            \"application/x-internet-signup\",\n            \"application/x-internett-signup\"\n        ]\n    ],\n    [\n        \"ip\",\n        \"application/x-ip2\"\n    ],\n    [\n        \"ipfix\",\n        \"application/ipfix\"\n    ],\n    [\n        \"ipk\",\n        \"application/vnd.shana.informed.package\"\n    ],\n    [\n        \"irm\",\n        \"application/vnd.ibm.rights-management\"\n    ],\n    [\n        \"irp\",\n        \"application/vnd.irepository.package+xml\"\n    ],\n    [\n        \"isp\",\n        \"application/x-internet-signup\"\n    ],\n    [\n        \"isu\",\n        \"video/x-isvideo\"\n    ],\n    [\n        \"it\",\n        \"audio/it\"\n    ],\n    [\n        \"itp\",\n        \"application/vnd.shana.informed.formtemplate\"\n    ],\n    [\n        \"iv\",\n        \"application/x-inventor\"\n    ],\n    [\n        \"ivp\",\n        \"application/vnd.immervision-ivp\"\n    ],\n    [\n        \"ivr\",\n        \"i-world/i-vrml\"\n    ],\n    [\n        \"ivu\",\n        \"application/vnd.immervision-ivu\"\n    ],\n    [\n        \"ivy\",\n        \"application/x-livescreen\"\n    ],\n    [\n        \"jad\",\n        \"text/vnd.sun.j2me.app-descriptor\"\n    ],\n    [\n        \"jam\",\n        [\n            \"application/vnd.jam\",\n            \"audio/x-jam\"\n        ]\n    ],\n    [\n        \"jar\",\n        \"application/java-archive\"\n    ],\n    [\n        \"jav\",\n        [\n            \"text/plain\",\n            \"text/x-java-source\"\n        ]\n    ],\n    [\n        \"java\",\n        [\n            \"text/plain\",\n            \"text/x-java-source,java\",\n            \"text/x-java-source\"\n        ]\n    ],\n    [\n        \"jcm\",\n        \"application/x-java-commerce\"\n    ],\n    [\n        \"jfif\",\n        [\n            \"image/pipeg\",\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jfif-tbnl\",\n        \"image/jpeg\"\n    ],\n    [\n        \"jisp\",\n        \"application/vnd.jisp\"\n    ],\n    [\n        \"jlt\",\n        \"application/vnd.hp-jlyt\"\n    ],\n    [\n        \"jnlp\",\n        \"application/x-java-jnlp-file\"\n    ],\n    [\n        \"joda\",\n        \"application/vnd.joost.joda-archive\"\n    ],\n    [\n        \"jpe\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpeg\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpg\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpgv\",\n        \"video/jpeg\"\n    ],\n    [\n        \"jpm\",\n        \"video/jpm\"\n    ],\n    [\n        \"jps\",\n        \"image/x-jps\"\n    ],\n    [\n        \"js\",\n        [\n            \"application/javascript\",\n            \"application/ecmascript\",\n            \"text/javascript\",\n            \"text/ecmascript\",\n            \"application/x-javascript\"\n        ]\n    ],\n    [\n        \"json\",\n        \"application/json\"\n    ],\n    [\n        \"jut\",\n        \"image/jutvision\"\n    ],\n    [\n        \"kar\",\n        [\n            \"audio/midi\",\n            \"music/x-karaoke\"\n        ]\n    ],\n    [\n        \"karbon\",\n        \"application/vnd.kde.karbon\"\n    ],\n    [\n        \"kfo\",\n        \"application/vnd.kde.kformula\"\n    ],\n    [\n        \"kia\",\n        \"application/vnd.kidspiration\"\n    ],\n    [\n        \"kml\",\n        \"application/vnd.google-earth.kml+xml\"\n    ],\n    [\n        \"kmz\",\n        \"application/vnd.google-earth.kmz\"\n    ],\n    [\n        \"kne\",\n        \"application/vnd.kinar\"\n    ],\n    [\n        \"kon\",\n        \"application/vnd.kde.kontour\"\n    ],\n    [\n        \"kpr\",\n        \"application/vnd.kde.kpresenter\"\n    ],\n    [\n        \"ksh\",\n        [\n            \"application/x-ksh\",\n            \"text/x-script.ksh\"\n        ]\n    ],\n    [\n        \"ksp\",\n        \"application/vnd.kde.kspread\"\n    ],\n    [\n        \"ktx\",\n        \"image/ktx\"\n    ],\n    [\n        \"ktz\",\n        \"application/vnd.kahootz\"\n    ],\n    [\n        \"kwd\",\n        \"application/vnd.kde.kword\"\n    ],\n    [\n        \"la\",\n        [\n            \"audio/nspaudio\",\n            \"audio/x-nspaudio\"\n        ]\n    ],\n    [\n        \"lam\",\n        \"audio/x-liveaudio\"\n    ],\n    [\n        \"lasxml\",\n        \"application/vnd.las.las+xml\"\n    ],\n    [\n        \"latex\",\n        \"application/x-latex\"\n    ],\n    [\n        \"lbd\",\n        \"application/vnd.llamagraphics.life-balance.desktop\"\n    ],\n    [\n        \"lbe\",\n        \"application/vnd.llamagraphics.life-balance.exchange+xml\"\n    ],\n    [\n        \"les\",\n        \"application/vnd.hhe.lesson-player\"\n    ],\n    [\n        \"lha\",\n        [\n            \"application/octet-stream\",\n            \"application/lha\",\n            \"application/x-lha\"\n        ]\n    ],\n    [\n        \"lhx\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"link66\",\n        \"application/vnd.route66.link66+xml\"\n    ],\n    [\n        \"list\",\n        \"text/plain\"\n    ],\n    [\n        \"lma\",\n        [\n            \"audio/nspaudio\",\n            \"audio/x-nspaudio\"\n        ]\n    ],\n    [\n        \"log\",\n        \"text/plain\"\n    ],\n    [\n        \"lrm\",\n        \"application/vnd.ms-lrm\"\n    ],\n    [\n        \"lsf\",\n        \"video/x-la-asf\"\n    ],\n    [\n        \"lsp\",\n        [\n            \"application/x-lisp\",\n            \"text/x-script.lisp\"\n        ]\n    ],\n    [\n        \"lst\",\n        \"text/plain\"\n    ],\n    [\n        \"lsx\",\n        [\n            \"video/x-la-asf\",\n            \"text/x-la-asf\"\n        ]\n    ],\n    [\n        \"ltf\",\n        \"application/vnd.frogans.ltf\"\n    ],\n    [\n        \"ltx\",\n        \"application/x-latex\"\n    ],\n    [\n        \"lvp\",\n        \"audio/vnd.lucent.voice\"\n    ],\n    [\n        \"lwp\",\n        \"application/vnd.lotus-wordpro\"\n    ],\n    [\n        \"lzh\",\n        [\n            \"application/octet-stream\",\n            \"application/x-lzh\"\n        ]\n    ],\n    [\n        \"lzx\",\n        [\n            \"application/lzx\",\n            \"application/octet-stream\",\n            \"application/x-lzx\"\n        ]\n    ],\n    [\n        \"m\",\n        [\n            \"text/plain\",\n            \"text/x-m\"\n        ]\n    ],\n    [\n        \"m13\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"m14\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"m1v\",\n        \"video/mpeg\"\n    ],\n    [\n        \"m21\",\n        \"application/mp21\"\n    ],\n    [\n        \"m2a\",\n        \"audio/mpeg\"\n    ],\n    [\n        \"m2v\",\n        \"video/mpeg\"\n    ],\n    [\n        \"m3u\",\n        [\n            \"audio/x-mpegurl\",\n            \"audio/x-mpequrl\"\n        ]\n    ],\n    [\n        \"m3u8\",\n        \"application/vnd.apple.mpegurl\"\n    ],\n    [\n        \"m4v\",\n        \"video/x-m4v\"\n    ],\n    [\n        \"ma\",\n        \"application/mathematica\"\n    ],\n    [\n        \"mads\",\n        \"application/mads+xml\"\n    ],\n    [\n        \"mag\",\n        \"application/vnd.ecowin.chart\"\n    ],\n    [\n        \"man\",\n        \"application/x-troff-man\"\n    ],\n    [\n        \"map\",\n        \"application/x-navimap\"\n    ],\n    [\n        \"mar\",\n        \"text/plain\"\n    ],\n    [\n        \"mathml\",\n        \"application/mathml+xml\"\n    ],\n    [\n        \"mbd\",\n        \"application/mbedlet\"\n    ],\n    [\n        \"mbk\",\n        \"application/vnd.mobius.mbk\"\n    ],\n    [\n        \"mbox\",\n        \"application/mbox\"\n    ],\n    [\n        \"mc$\",\n        \"application/x-magic-cap-package-1.0\"\n    ],\n    [\n        \"mc1\",\n        \"application/vnd.medcalcdata\"\n    ],\n    [\n        \"mcd\",\n        [\n            \"application/mcad\",\n            \"application/vnd.mcd\",\n            \"application/x-mathcad\"\n        ]\n    ],\n    [\n        \"mcf\",\n        [\n            \"image/vasa\",\n            \"text/mcf\"\n        ]\n    ],\n    [\n        \"mcp\",\n        \"application/netmc\"\n    ],\n    [\n        \"mcurl\",\n        \"text/vnd.curl.mcurl\"\n    ],\n    [\n        \"mdb\",\n        \"application/x-msaccess\"\n    ],\n    [\n        \"mdi\",\n        \"image/vnd.ms-modi\"\n    ],\n    [\n        \"me\",\n        \"application/x-troff-me\"\n    ],\n    [\n        \"meta4\",\n        \"application/metalink4+xml\"\n    ],\n    [\n        \"mets\",\n        \"application/mets+xml\"\n    ],\n    [\n        \"mfm\",\n        \"application/vnd.mfmp\"\n    ],\n    [\n        \"mgp\",\n        \"application/vnd.osgeo.mapguide.package\"\n    ],\n    [\n        \"mgz\",\n        \"application/vnd.proteus.magazine\"\n    ],\n    [\n        \"mht\",\n        \"message/rfc822\"\n    ],\n    [\n        \"mhtml\",\n        \"message/rfc822\"\n    ],\n    [\n        \"mid\",\n        [\n            \"audio/mid\",\n            \"audio/midi\",\n            \"music/crescendo\",\n            \"x-music/x-midi\",\n            \"audio/x-midi\",\n            \"application/x-midi\",\n            \"audio/x-mid\"\n        ]\n    ],\n    [\n        \"midi\",\n        [\n            \"audio/midi\",\n            \"music/crescendo\",\n            \"x-music/x-midi\",\n            \"audio/x-midi\",\n            \"application/x-midi\",\n            \"audio/x-mid\"\n        ]\n    ],\n    [\n        \"mif\",\n        [\n            \"application/vnd.mif\",\n            \"application/x-mif\",\n            \"application/x-frame\"\n        ]\n    ],\n    [\n        \"mime\",\n        [\n            \"message/rfc822\",\n            \"www/mime\"\n        ]\n    ],\n    [\n        \"mj2\",\n        \"video/mj2\"\n    ],\n    [\n        \"mjf\",\n        \"audio/x-vnd.audioexplosion.mjuicemediafile\"\n    ],\n    [\n        \"mjpg\",\n        \"video/x-motion-jpeg\"\n    ],\n    [\n        \"mlp\",\n        \"application/vnd.dolby.mlp\"\n    ],\n    [\n        \"mm\",\n        [\n            \"application/base64\",\n            \"application/x-meme\"\n        ]\n    ],\n    [\n        \"mmd\",\n        \"application/vnd.chipnuts.karaoke-mmd\"\n    ],\n    [\n        \"mme\",\n        \"application/base64\"\n    ],\n    [\n        \"mmf\",\n        \"application/vnd.smaf\"\n    ],\n    [\n        \"mmr\",\n        \"image/vnd.fujixerox.edmics-mmr\"\n    ],\n    [\n        \"mny\",\n        \"application/x-msmoney\"\n    ],\n    [\n        \"mod\",\n        [\n            \"audio/mod\",\n            \"audio/x-mod\"\n        ]\n    ],\n    [\n        \"mods\",\n        \"application/mods+xml\"\n    ],\n    [\n        \"moov\",\n        \"video/quicktime\"\n    ],\n    [\n        \"mov\",\n        \"video/quicktime\"\n    ],\n    [\n        \"movie\",\n        \"video/x-sgi-movie\"\n    ],\n    [\n        \"mp2\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\",\n            \"video/x-mpeg\",\n            \"audio/x-mpeg\",\n            \"video/x-mpeq2a\"\n        ]\n    ],\n    [\n        \"mp3\",\n        [\n            \"audio/mpeg\",\n            \"audio/mpeg3\",\n            \"video/mpeg\",\n            \"audio/x-mpeg-3\",\n            \"video/x-mpeg\"\n        ]\n    ],\n    [\n        \"mp4\",\n        [\n            \"video/mp4\",\n            \"application/mp4\"\n        ]\n    ],\n    [\n        \"mp4a\",\n        \"audio/mp4\"\n    ],\n    [\n        \"mpa\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\"\n        ]\n    ],\n    [\n        \"mpc\",\n        [\n            \"application/vnd.mophun.certificate\",\n            \"application/x-project\"\n        ]\n    ],\n    [\n        \"mpe\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpeg\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpg\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\"\n        ]\n    ],\n    [\n        \"mpga\",\n        \"audio/mpeg\"\n    ],\n    [\n        \"mpkg\",\n        \"application/vnd.apple.installer+xml\"\n    ],\n    [\n        \"mpm\",\n        \"application/vnd.blueice.multipass\"\n    ],\n    [\n        \"mpn\",\n        \"application/vnd.mophun.application\"\n    ],\n    [\n        \"mpp\",\n        \"application/vnd.ms-project\"\n    ],\n    [\n        \"mpt\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpv\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpv2\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpx\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpy\",\n        \"application/vnd.ibm.minipay\"\n    ],\n    [\n        \"mqy\",\n        \"application/vnd.mobius.mqy\"\n    ],\n    [\n        \"mrc\",\n        \"application/marc\"\n    ],\n    [\n        \"mrcx\",\n        \"application/marcxml+xml\"\n    ],\n    [\n        \"ms\",\n        \"application/x-troff-ms\"\n    ],\n    [\n        \"mscml\",\n        \"application/mediaservercontrol+xml\"\n    ],\n    [\n        \"mseq\",\n        \"application/vnd.mseq\"\n    ],\n    [\n        \"msf\",\n        \"application/vnd.epson.msf\"\n    ],\n    [\n        \"msg\",\n        \"application/vnd.ms-outlook\"\n    ],\n    [\n        \"msh\",\n        \"model/mesh\"\n    ],\n    [\n        \"msl\",\n        \"application/vnd.mobius.msl\"\n    ],\n    [\n        \"msty\",\n        \"application/vnd.muvee.style\"\n    ],\n    [\n        \"mts\",\n        \"model/vnd.mts\"\n    ],\n    [\n        \"mus\",\n        \"application/vnd.musician\"\n    ],\n    [\n        \"musicxml\",\n        \"application/vnd.recordare.musicxml+xml\"\n    ],\n    [\n        \"mv\",\n        \"video/x-sgi-movie\"\n    ],\n    [\n        \"mvb\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"mwf\",\n        \"application/vnd.mfer\"\n    ],\n    [\n        \"mxf\",\n        \"application/mxf\"\n    ],\n    [\n        \"mxl\",\n        \"application/vnd.recordare.musicxml\"\n    ],\n    [\n        \"mxml\",\n        \"application/xv+xml\"\n    ],\n    [\n        \"mxs\",\n        \"application/vnd.triscape.mxs\"\n    ],\n    [\n        \"mxu\",\n        \"video/vnd.mpegurl\"\n    ],\n    [\n        \"my\",\n        \"audio/make\"\n    ],\n    [\n        \"mzz\",\n        \"application/x-vnd.audioexplosion.mzz\"\n    ],\n    [\n        \"n-gage\",\n        \"application/vnd.nokia.n-gage.symbian.install\"\n    ],\n    [\n        \"n3\",\n        \"text/n3\"\n    ],\n    [\n        \"nap\",\n        \"image/naplps\"\n    ],\n    [\n        \"naplps\",\n        \"image/naplps\"\n    ],\n    [\n        \"nbp\",\n        \"application/vnd.wolfram.player\"\n    ],\n    [\n        \"nc\",\n        \"application/x-netcdf\"\n    ],\n    [\n        \"ncm\",\n        \"application/vnd.nokia.configuration-message\"\n    ],\n    [\n        \"ncx\",\n        \"application/x-dtbncx+xml\"\n    ],\n    [\n        \"ngdat\",\n        \"application/vnd.nokia.n-gage.data\"\n    ],\n    [\n        \"nif\",\n        \"image/x-niff\"\n    ],\n    [\n        \"niff\",\n        \"image/x-niff\"\n    ],\n    [\n        \"nix\",\n        \"application/x-mix-transfer\"\n    ],\n    [\n        \"nlu\",\n        \"application/vnd.neurolanguage.nlu\"\n    ],\n    [\n        \"nml\",\n        \"application/vnd.enliven\"\n    ],\n    [\n        \"nnd\",\n        \"application/vnd.noblenet-directory\"\n    ],\n    [\n        \"nns\",\n        \"application/vnd.noblenet-sealer\"\n    ],\n    [\n        \"nnw\",\n        \"application/vnd.noblenet-web\"\n    ],\n    [\n        \"npx\",\n        \"image/vnd.net-fpx\"\n    ],\n    [\n        \"nsc\",\n        \"application/x-conference\"\n    ],\n    [\n        \"nsf\",\n        \"application/vnd.lotus-notes\"\n    ],\n    [\n        \"nvd\",\n        \"application/x-navidoc\"\n    ],\n    [\n        \"nws\",\n        \"message/rfc822\"\n    ],\n    [\n        \"o\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"oa2\",\n        \"application/vnd.fujitsu.oasys2\"\n    ],\n    [\n        \"oa3\",\n        \"application/vnd.fujitsu.oasys3\"\n    ],\n    [\n        \"oas\",\n        \"application/vnd.fujitsu.oasys\"\n    ],\n    [\n        \"obd\",\n        \"application/x-msbinder\"\n    ],\n    [\n        \"oda\",\n        \"application/oda\"\n    ],\n    [\n        \"odb\",\n        \"application/vnd.oasis.opendocument.database\"\n    ],\n    [\n        \"odc\",\n        \"application/vnd.oasis.opendocument.chart\"\n    ],\n    [\n        \"odf\",\n        \"application/vnd.oasis.opendocument.formula\"\n    ],\n    [\n        \"odft\",\n        \"application/vnd.oasis.opendocument.formula-template\"\n    ],\n    [\n        \"odg\",\n        \"application/vnd.oasis.opendocument.graphics\"\n    ],\n    [\n        \"odi\",\n        \"application/vnd.oasis.opendocument.image\"\n    ],\n    [\n        \"odm\",\n        \"application/vnd.oasis.opendocument.text-master\"\n    ],\n    [\n        \"odp\",\n        \"application/vnd.oasis.opendocument.presentation\"\n    ],\n    [\n        \"ods\",\n        \"application/vnd.oasis.opendocument.spreadsheet\"\n    ],\n    [\n        \"odt\",\n        \"application/vnd.oasis.opendocument.text\"\n    ],\n    [\n        \"oga\",\n        \"audio/ogg\"\n    ],\n    [\n        \"ogv\",\n        \"video/ogg\"\n    ],\n    [\n        \"ogx\",\n        \"application/ogg\"\n    ],\n    [\n        \"omc\",\n        \"application/x-omc\"\n    ],\n    [\n        \"omcd\",\n        \"application/x-omcdatamaker\"\n    ],\n    [\n        \"omcr\",\n        \"application/x-omcregerator\"\n    ],\n    [\n        \"onetoc\",\n        \"application/onenote\"\n    ],\n    [\n        \"opf\",\n        \"application/oebps-package+xml\"\n    ],\n    [\n        \"org\",\n        \"application/vnd.lotus-organizer\"\n    ],\n    [\n        \"osf\",\n        \"application/vnd.yamaha.openscoreformat\"\n    ],\n    [\n        \"osfpvg\",\n        \"application/vnd.yamaha.openscoreformat.osfpvg+xml\"\n    ],\n    [\n        \"otc\",\n        \"application/vnd.oasis.opendocument.chart-template\"\n    ],\n    [\n        \"otf\",\n        \"application/x-font-otf\"\n    ],\n    [\n        \"otg\",\n        \"application/vnd.oasis.opendocument.graphics-template\"\n    ],\n    [\n        \"oth\",\n        \"application/vnd.oasis.opendocument.text-web\"\n    ],\n    [\n        \"oti\",\n        \"application/vnd.oasis.opendocument.image-template\"\n    ],\n    [\n        \"otp\",\n        \"application/vnd.oasis.opendocument.presentation-template\"\n    ],\n    [\n        \"ots\",\n        \"application/vnd.oasis.opendocument.spreadsheet-template\"\n    ],\n    [\n        \"ott\",\n        \"application/vnd.oasis.opendocument.text-template\"\n    ],\n    [\n        \"oxt\",\n        \"application/vnd.openofficeorg.extension\"\n    ],\n    [\n        \"p\",\n        \"text/x-pascal\"\n    ],\n    [\n        \"p10\",\n        [\n            \"application/pkcs10\",\n            \"application/x-pkcs10\"\n        ]\n    ],\n    [\n        \"p12\",\n        [\n            \"application/pkcs-12\",\n            \"application/x-pkcs12\"\n        ]\n    ],\n    [\n        \"p7a\",\n        \"application/x-pkcs7-signature\"\n    ],\n    [\n        \"p7b\",\n        \"application/x-pkcs7-certificates\"\n    ],\n    [\n        \"p7c\",\n        [\n            \"application/pkcs7-mime\",\n            \"application/x-pkcs7-mime\"\n        ]\n    ],\n    [\n        \"p7m\",\n        [\n            \"application/pkcs7-mime\",\n            \"application/x-pkcs7-mime\"\n        ]\n    ],\n    [\n        \"p7r\",\n        \"application/x-pkcs7-certreqresp\"\n    ],\n    [\n        \"p7s\",\n        [\n            \"application/pkcs7-signature\",\n            \"application/x-pkcs7-signature\"\n        ]\n    ],\n    [\n        \"p8\",\n        \"application/pkcs8\"\n    ],\n    [\n        \"par\",\n        \"text/plain-bas\"\n    ],\n    [\n        \"part\",\n        \"application/pro_eng\"\n    ],\n    [\n        \"pas\",\n        \"text/pascal\"\n    ],\n    [\n        \"paw\",\n        \"application/vnd.pawaafile\"\n    ],\n    [\n        \"pbd\",\n        \"application/vnd.powerbuilder6\"\n    ],\n    [\n        \"pbm\",\n        \"image/x-portable-bitmap\"\n    ],\n    [\n        \"pcf\",\n        \"application/x-font-pcf\"\n    ],\n    [\n        \"pcl\",\n        [\n            \"application/vnd.hp-pcl\",\n            \"application/x-pcl\"\n        ]\n    ],\n    [\n        \"pclxl\",\n        \"application/vnd.hp-pclxl\"\n    ],\n    [\n        \"pct\",\n        \"image/x-pict\"\n    ],\n    [\n        \"pcurl\",\n        \"application/vnd.curl.pcurl\"\n    ],\n    [\n        \"pcx\",\n        \"image/x-pcx\"\n    ],\n    [\n        \"pdb\",\n        [\n            \"application/vnd.palm\",\n            \"chemical/x-pdb\"\n        ]\n    ],\n    [\n        \"pdf\",\n        \"application/pdf\"\n    ],\n    [\n        \"pfa\",\n        \"application/x-font-type1\"\n    ],\n    [\n        \"pfr\",\n        \"application/font-tdpfr\"\n    ],\n    [\n        \"pfunk\",\n        [\n            \"audio/make\",\n            \"audio/make.my.funk\"\n        ]\n    ],\n    [\n        \"pfx\",\n        \"application/x-pkcs12\"\n    ],\n    [\n        \"pgm\",\n        [\n            \"image/x-portable-graymap\",\n            \"image/x-portable-greymap\"\n        ]\n    ],\n    [\n        \"pgn\",\n        \"application/x-chess-pgn\"\n    ],\n    [\n        \"pgp\",\n        \"application/pgp-signature\"\n    ],\n    [\n        \"pic\",\n        [\n            \"image/pict\",\n            \"image/x-pict\"\n        ]\n    ],\n    [\n        \"pict\",\n        \"image/pict\"\n    ],\n    [\n        \"pkg\",\n        \"application/x-newton-compatible-pkg\"\n    ],\n    [\n        \"pki\",\n        \"application/pkixcmp\"\n    ],\n    [\n        \"pkipath\",\n        \"application/pkix-pkipath\"\n    ],\n    [\n        \"pko\",\n        [\n            \"application/ynd.ms-pkipko\",\n            \"application/vnd.ms-pki.pko\"\n        ]\n    ],\n    [\n        \"pl\",\n        [\n            \"text/plain\",\n            \"text/x-script.perl\"\n        ]\n    ],\n    [\n        \"plb\",\n        \"application/vnd.3gpp.pic-bw-large\"\n    ],\n    [\n        \"plc\",\n        \"application/vnd.mobius.plc\"\n    ],\n    [\n        \"plf\",\n        \"application/vnd.pocketlearn\"\n    ],\n    [\n        \"pls\",\n        \"application/pls+xml\"\n    ],\n    [\n        \"plx\",\n        \"application/x-pixclscript\"\n    ],\n    [\n        \"pm\",\n        [\n            \"text/x-script.perl-module\",\n            \"image/x-xpixmap\"\n        ]\n    ],\n    [\n        \"pm4\",\n        \"application/x-pagemaker\"\n    ],\n    [\n        \"pm5\",\n        \"application/x-pagemaker\"\n    ],\n    [\n        \"pma\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pmc\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pml\",\n        [\n            \"application/vnd.ctc-posml\",\n            \"application/x-perfmon\"\n        ]\n    ],\n    [\n        \"pmr\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pmw\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"png\",\n        \"image/png\"\n    ],\n    [\n        \"pnm\",\n        [\n            \"application/x-portable-anymap\",\n            \"image/x-portable-anymap\"\n        ]\n    ],\n    [\n        \"portpkg\",\n        \"application/vnd.macports.portpkg\"\n    ],\n    [\n        \"pot\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\"\n        ]\n    ],\n    [\n        \"potm\",\n        \"application/vnd.ms-powerpoint.template.macroenabled.12\"\n    ],\n    [\n        \"potx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.template\"\n    ],\n    [\n        \"pov\",\n        \"model/x-pov\"\n    ],\n    [\n        \"ppa\",\n        \"application/vnd.ms-powerpoint\"\n    ],\n    [\n        \"ppam\",\n        \"application/vnd.ms-powerpoint.addin.macroenabled.12\"\n    ],\n    [\n        \"ppd\",\n        \"application/vnd.cups-ppd\"\n    ],\n    [\n        \"ppm\",\n        \"image/x-portable-pixmap\"\n    ],\n    [\n        \"pps\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\"\n        ]\n    ],\n    [\n        \"ppsm\",\n        \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\"\n    ],\n    [\n        \"ppsx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\"\n    ],\n    [\n        \"ppt\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\",\n            \"application/powerpoint\",\n            \"application/x-mspowerpoint\"\n        ]\n    ],\n    [\n        \"pptm\",\n        \"application/vnd.ms-powerpoint.presentation.macroenabled.12\"\n    ],\n    [\n        \"pptx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    ],\n    [\n        \"ppz\",\n        \"application/mspowerpoint\"\n    ],\n    [\n        \"prc\",\n        \"application/x-mobipocket-ebook\"\n    ],\n    [\n        \"pre\",\n        [\n            \"application/vnd.lotus-freelance\",\n            \"application/x-freelance\"\n        ]\n    ],\n    [\n        \"prf\",\n        \"application/pics-rules\"\n    ],\n    [\n        \"prt\",\n        \"application/pro_eng\"\n    ],\n    [\n        \"ps\",\n        \"application/postscript\"\n    ],\n    [\n        \"psb\",\n        \"application/vnd.3gpp.pic-bw-small\"\n    ],\n    [\n        \"psd\",\n        [\n            \"application/octet-stream\",\n            \"image/vnd.adobe.photoshop\"\n        ]\n    ],\n    [\n        \"psf\",\n        \"application/x-font-linux-psf\"\n    ],\n    [\n        \"pskcxml\",\n        \"application/pskc+xml\"\n    ],\n    [\n        \"ptid\",\n        \"application/vnd.pvi.ptid1\"\n    ],\n    [\n        \"pub\",\n        \"application/x-mspublisher\"\n    ],\n    [\n        \"pvb\",\n        \"application/vnd.3gpp.pic-bw-var\"\n    ],\n    [\n        \"pvu\",\n        \"paleovu/x-pv\"\n    ],\n    [\n        \"pwn\",\n        \"application/vnd.3m.post-it-notes\"\n    ],\n    [\n        \"pwz\",\n        \"application/vnd.ms-powerpoint\"\n    ],\n    [\n        \"py\",\n        \"text/x-script.phyton\"\n    ],\n    [\n        \"pya\",\n        \"audio/vnd.ms-playready.media.pya\"\n    ],\n    [\n        \"pyc\",\n        \"application/x-bytecode.python\"\n    ],\n    [\n        \"pyv\",\n        \"video/vnd.ms-playready.media.pyv\"\n    ],\n    [\n        \"qam\",\n        \"application/vnd.epson.quickanime\"\n    ],\n    [\n        \"qbo\",\n        \"application/vnd.intu.qbo\"\n    ],\n    [\n        \"qcp\",\n        \"audio/vnd.qcelp\"\n    ],\n    [\n        \"qd3\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"qd3d\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"qfx\",\n        \"application/vnd.intu.qfx\"\n    ],\n    [\n        \"qif\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qps\",\n        \"application/vnd.publishare-delta-tree\"\n    ],\n    [\n        \"qt\",\n        \"video/quicktime\"\n    ],\n    [\n        \"qtc\",\n        \"video/x-qtc\"\n    ],\n    [\n        \"qti\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qtif\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qxd\",\n        \"application/vnd.quark.quarkxpress\"\n    ],\n    [\n        \"ra\",\n        [\n            \"audio/x-realaudio\",\n            \"audio/x-pn-realaudio\",\n            \"audio/x-pn-realaudio-plugin\"\n        ]\n    ],\n    [\n        \"ram\",\n        \"audio/x-pn-realaudio\"\n    ],\n    [\n        \"rar\",\n        \"application/x-rar-compressed\"\n    ],\n    [\n        \"ras\",\n        [\n            \"image/cmu-raster\",\n            \"application/x-cmu-raster\",\n            \"image/x-cmu-raster\"\n        ]\n    ],\n    [\n        \"rast\",\n        \"image/cmu-raster\"\n    ],\n    [\n        \"rcprofile\",\n        \"application/vnd.ipunplugged.rcprofile\"\n    ],\n    [\n        \"rdf\",\n        \"application/rdf+xml\"\n    ],\n    [\n        \"rdz\",\n        \"application/vnd.data-vision.rdz\"\n    ],\n    [\n        \"rep\",\n        \"application/vnd.businessobjects\"\n    ],\n    [\n        \"res\",\n        \"application/x-dtbresource+xml\"\n    ],\n    [\n        \"rexx\",\n        \"text/x-script.rexx\"\n    ],\n    [\n        \"rf\",\n        \"image/vnd.rn-realflash\"\n    ],\n    [\n        \"rgb\",\n        \"image/x-rgb\"\n    ],\n    [\n        \"rif\",\n        \"application/reginfo+xml\"\n    ],\n    [\n        \"rip\",\n        \"audio/vnd.rip\"\n    ],\n    [\n        \"rl\",\n        \"application/resource-lists+xml\"\n    ],\n    [\n        \"rlc\",\n        \"image/vnd.fujixerox.edmics-rlc\"\n    ],\n    [\n        \"rld\",\n        \"application/resource-lists-diff+xml\"\n    ],\n    [\n        \"rm\",\n        [\n            \"application/vnd.rn-realmedia\",\n            \"audio/x-pn-realaudio\"\n        ]\n    ],\n    [\n        \"rmi\",\n        \"audio/mid\"\n    ],\n    [\n        \"rmm\",\n        \"audio/x-pn-realaudio\"\n    ],\n    [\n        \"rmp\",\n        [\n            \"audio/x-pn-realaudio-plugin\",\n            \"audio/x-pn-realaudio\"\n        ]\n    ],\n    [\n        \"rms\",\n        \"application/vnd.jcp.javame.midlet-rms\"\n    ],\n    [\n        \"rnc\",\n        \"application/relax-ng-compact-syntax\"\n    ],\n    [\n        \"rng\",\n        [\n            \"application/ringing-tones\",\n            \"application/vnd.nokia.ringing-tone\"\n        ]\n    ],\n    [\n        \"rnx\",\n        \"application/vnd.rn-realplayer\"\n    ],\n    [\n        \"roff\",\n        \"application/x-troff\"\n    ],\n    [\n        \"rp\",\n        \"image/vnd.rn-realpix\"\n    ],\n    [\n        \"rp9\",\n        \"application/vnd.cloanto.rp9\"\n    ],\n    [\n        \"rpm\",\n        \"audio/x-pn-realaudio-plugin\"\n    ],\n    [\n        \"rpss\",\n        \"application/vnd.nokia.radio-presets\"\n    ],\n    [\n        \"rpst\",\n        \"application/vnd.nokia.radio-preset\"\n    ],\n    [\n        \"rq\",\n        \"application/sparql-query\"\n    ],\n    [\n        \"rs\",\n        \"application/rls-services+xml\"\n    ],\n    [\n        \"rsd\",\n        \"application/rsd+xml\"\n    ],\n    [\n        \"rt\",\n        [\n            \"text/richtext\",\n            \"text/vnd.rn-realtext\"\n        ]\n    ],\n    [\n        \"rtf\",\n        [\n            \"application/rtf\",\n            \"text/richtext\",\n            \"application/x-rtf\"\n        ]\n    ],\n    [\n        \"rtx\",\n        [\n            \"text/richtext\",\n            \"application/rtf\"\n        ]\n    ],\n    [\n        \"rv\",\n        \"video/vnd.rn-realvideo\"\n    ],\n    [\n        \"s\",\n        \"text/x-asm\"\n    ],\n    [\n        \"s3m\",\n        \"audio/s3m\"\n    ],\n    [\n        \"saf\",\n        \"application/vnd.yamaha.smaf-audio\"\n    ],\n    [\n        \"saveme\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"sbk\",\n        \"application/x-tbook\"\n    ],\n    [\n        \"sbml\",\n        \"application/sbml+xml\"\n    ],\n    [\n        \"sc\",\n        \"application/vnd.ibm.secure-container\"\n    ],\n    [\n        \"scd\",\n        \"application/x-msschedule\"\n    ],\n    [\n        \"scm\",\n        [\n            \"application/vnd.lotus-screencam\",\n            \"video/x-scm\",\n            \"text/x-script.guile\",\n            \"application/x-lotusscreencam\",\n            \"text/x-script.scheme\"\n        ]\n    ],\n    [\n        \"scq\",\n        \"application/scvp-cv-request\"\n    ],\n    [\n        \"scs\",\n        \"application/scvp-cv-response\"\n    ],\n    [\n        \"sct\",\n        \"text/scriptlet\"\n    ],\n    [\n        \"scurl\",\n        \"text/vnd.curl.scurl\"\n    ],\n    [\n        \"sda\",\n        \"application/vnd.stardivision.draw\"\n    ],\n    [\n        \"sdc\",\n        \"application/vnd.stardivision.calc\"\n    ],\n    [\n        \"sdd\",\n        \"application/vnd.stardivision.impress\"\n    ],\n    [\n        \"sdkm\",\n        \"application/vnd.solent.sdkm+xml\"\n    ],\n    [\n        \"sdml\",\n        \"text/plain\"\n    ],\n    [\n        \"sdp\",\n        [\n            \"application/sdp\",\n            \"application/x-sdp\"\n        ]\n    ],\n    [\n        \"sdr\",\n        \"application/sounder\"\n    ],\n    [\n        \"sdw\",\n        \"application/vnd.stardivision.writer\"\n    ],\n    [\n        \"sea\",\n        [\n            \"application/sea\",\n            \"application/x-sea\"\n        ]\n    ],\n    [\n        \"see\",\n        \"application/vnd.seemail\"\n    ],\n    [\n        \"seed\",\n        \"application/vnd.fdsn.seed\"\n    ],\n    [\n        \"sema\",\n        \"application/vnd.sema\"\n    ],\n    [\n        \"semd\",\n        \"application/vnd.semd\"\n    ],\n    [\n        \"semf\",\n        \"application/vnd.semf\"\n    ],\n    [\n        \"ser\",\n        \"application/java-serialized-object\"\n    ],\n    [\n        \"set\",\n        \"application/set\"\n    ],\n    [\n        \"setpay\",\n        \"application/set-payment-initiation\"\n    ],\n    [\n        \"setreg\",\n        \"application/set-registration-initiation\"\n    ],\n    [\n        \"sfd-hdstx\",\n        \"application/vnd.hydrostatix.sof-data\"\n    ],\n    [\n        \"sfs\",\n        \"application/vnd.spotfire.sfs\"\n    ],\n    [\n        \"sgl\",\n        \"application/vnd.stardivision.writer-global\"\n    ],\n    [\n        \"sgm\",\n        [\n            \"text/sgml\",\n            \"text/x-sgml\"\n        ]\n    ],\n    [\n        \"sgml\",\n        [\n            \"text/sgml\",\n            \"text/x-sgml\"\n        ]\n    ],\n    [\n        \"sh\",\n        [\n            \"application/x-shar\",\n            \"application/x-bsh\",\n            \"application/x-sh\",\n            \"text/x-script.sh\"\n        ]\n    ],\n    [\n        \"shar\",\n        [\n            \"application/x-bsh\",\n            \"application/x-shar\"\n        ]\n    ],\n    [\n        \"shf\",\n        \"application/shf+xml\"\n    ],\n    [\n        \"shtml\",\n        [\n            \"text/html\",\n            \"text/x-server-parsed-html\"\n        ]\n    ],\n    [\n        \"sid\",\n        \"audio/x-psid\"\n    ],\n    [\n        \"sis\",\n        \"application/vnd.symbian.install\"\n    ],\n    [\n        \"sit\",\n        [\n            \"application/x-stuffit\",\n            \"application/x-sit\"\n        ]\n    ],\n    [\n        \"sitx\",\n        \"application/x-stuffitx\"\n    ],\n    [\n        \"skd\",\n        \"application/x-koan\"\n    ],\n    [\n        \"skm\",\n        \"application/x-koan\"\n    ],\n    [\n        \"skp\",\n        [\n            \"application/vnd.koan\",\n            \"application/x-koan\"\n        ]\n    ],\n    [\n        \"skt\",\n        \"application/x-koan\"\n    ],\n    [\n        \"sl\",\n        \"application/x-seelogo\"\n    ],\n    [\n        \"sldm\",\n        \"application/vnd.ms-powerpoint.slide.macroenabled.12\"\n    ],\n    [\n        \"sldx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.slide\"\n    ],\n    [\n        \"slt\",\n        \"application/vnd.epson.salt\"\n    ],\n    [\n        \"sm\",\n        \"application/vnd.stepmania.stepchart\"\n    ],\n    [\n        \"smf\",\n        \"application/vnd.stardivision.math\"\n    ],\n    [\n        \"smi\",\n        [\n            \"application/smil\",\n            \"application/smil+xml\"\n        ]\n    ],\n    [\n        \"smil\",\n        \"application/smil\"\n    ],\n    [\n        \"snd\",\n        [\n            \"audio/basic\",\n            \"audio/x-adpcm\"\n        ]\n    ],\n    [\n        \"snf\",\n        \"application/x-font-snf\"\n    ],\n    [\n        \"sol\",\n        \"application/solids\"\n    ],\n    [\n        \"spc\",\n        [\n            \"text/x-speech\",\n            \"application/x-pkcs7-certificates\"\n        ]\n    ],\n    [\n        \"spf\",\n        \"application/vnd.yamaha.smaf-phrase\"\n    ],\n    [\n        \"spl\",\n        [\n            \"application/futuresplash\",\n            \"application/x-futuresplash\"\n        ]\n    ],\n    [\n        \"spot\",\n        \"text/vnd.in3d.spot\"\n    ],\n    [\n        \"spp\",\n        \"application/scvp-vp-response\"\n    ],\n    [\n        \"spq\",\n        \"application/scvp-vp-request\"\n    ],\n    [\n        \"spr\",\n        \"application/x-sprite\"\n    ],\n    [\n        \"sprite\",\n        \"application/x-sprite\"\n    ],\n    [\n        \"src\",\n        \"application/x-wais-source\"\n    ],\n    [\n        \"sru\",\n        \"application/sru+xml\"\n    ],\n    [\n        \"srx\",\n        \"application/sparql-results+xml\"\n    ],\n    [\n        \"sse\",\n        \"application/vnd.kodak-descriptor\"\n    ],\n    [\n        \"ssf\",\n        \"application/vnd.epson.ssf\"\n    ],\n    [\n        \"ssi\",\n        \"text/x-server-parsed-html\"\n    ],\n    [\n        \"ssm\",\n        \"application/streamingmedia\"\n    ],\n    [\n        \"ssml\",\n        \"application/ssml+xml\"\n    ],\n    [\n        \"sst\",\n        [\n            \"application/vnd.ms-pkicertstore\",\n            \"application/vnd.ms-pki.certstore\"\n        ]\n    ],\n    [\n        \"st\",\n        \"application/vnd.sailingtracker.track\"\n    ],\n    [\n        \"stc\",\n        \"application/vnd.sun.xml.calc.template\"\n    ],\n    [\n        \"std\",\n        \"application/vnd.sun.xml.draw.template\"\n    ],\n    [\n        \"step\",\n        \"application/step\"\n    ],\n    [\n        \"stf\",\n        \"application/vnd.wt.stf\"\n    ],\n    [\n        \"sti\",\n        \"application/vnd.sun.xml.impress.template\"\n    ],\n    [\n        \"stk\",\n        \"application/hyperstudio\"\n    ],\n    [\n        \"stl\",\n        [\n            \"application/vnd.ms-pkistl\",\n            \"application/sla\",\n            \"application/vnd.ms-pki.stl\",\n            \"application/x-navistyle\"\n        ]\n    ],\n    [\n        \"stm\",\n        \"text/html\"\n    ],\n    [\n        \"stp\",\n        \"application/step\"\n    ],\n    [\n        \"str\",\n        \"application/vnd.pg.format\"\n    ],\n    [\n        \"stw\",\n        \"application/vnd.sun.xml.writer.template\"\n    ],\n    [\n        \"sub\",\n        \"image/vnd.dvb.subtitle\"\n    ],\n    [\n        \"sus\",\n        \"application/vnd.sus-calendar\"\n    ],\n    [\n        \"sv4cpio\",\n        \"application/x-sv4cpio\"\n    ],\n    [\n        \"sv4crc\",\n        \"application/x-sv4crc\"\n    ],\n    [\n        \"svc\",\n        \"application/vnd.dvb.service\"\n    ],\n    [\n        \"svd\",\n        \"application/vnd.svd\"\n    ],\n    [\n        \"svf\",\n        [\n            \"image/vnd.dwg\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"svg\",\n        \"image/svg+xml\"\n    ],\n    [\n        \"svr\",\n        [\n            \"x-world/x-svr\",\n            \"application/x-world\"\n        ]\n    ],\n    [\n        \"swf\",\n        \"application/x-shockwave-flash\"\n    ],\n    [\n        \"swi\",\n        \"application/vnd.aristanetworks.swi\"\n    ],\n    [\n        \"sxc\",\n        \"application/vnd.sun.xml.calc\"\n    ],\n    [\n        \"sxd\",\n        \"application/vnd.sun.xml.draw\"\n    ],\n    [\n        \"sxg\",\n        \"application/vnd.sun.xml.writer.global\"\n    ],\n    [\n        \"sxi\",\n        \"application/vnd.sun.xml.impress\"\n    ],\n    [\n        \"sxm\",\n        \"application/vnd.sun.xml.math\"\n    ],\n    [\n        \"sxw\",\n        \"application/vnd.sun.xml.writer\"\n    ],\n    [\n        \"t\",\n        [\n            \"text/troff\",\n            \"application/x-troff\"\n        ]\n    ],\n    [\n        \"talk\",\n        \"text/x-speech\"\n    ],\n    [\n        \"tao\",\n        \"application/vnd.tao.intent-module-archive\"\n    ],\n    [\n        \"tar\",\n        \"application/x-tar\"\n    ],\n    [\n        \"tbk\",\n        [\n            \"application/toolbook\",\n            \"application/x-tbook\"\n        ]\n    ],\n    [\n        \"tcap\",\n        \"application/vnd.3gpp2.tcap\"\n    ],\n    [\n        \"tcl\",\n        [\n            \"text/x-script.tcl\",\n            \"application/x-tcl\"\n        ]\n    ],\n    [\n        \"tcsh\",\n        \"text/x-script.tcsh\"\n    ],\n    [\n        \"teacher\",\n        \"application/vnd.smart.teacher\"\n    ],\n    [\n        \"tei\",\n        \"application/tei+xml\"\n    ],\n    [\n        \"tex\",\n        \"application/x-tex\"\n    ],\n    [\n        \"texi\",\n        \"application/x-texinfo\"\n    ],\n    [\n        \"texinfo\",\n        \"application/x-texinfo\"\n    ],\n    [\n        \"text\",\n        [\n            \"application/plain\",\n            \"text/plain\"\n        ]\n    ],\n    [\n        \"tfi\",\n        \"application/thraud+xml\"\n    ],\n    [\n        \"tfm\",\n        \"application/x-tex-tfm\"\n    ],\n    [\n        \"tgz\",\n        [\n            \"application/gnutar\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"thmx\",\n        \"application/vnd.ms-officetheme\"\n    ],\n    [\n        \"tif\",\n        [\n            \"image/tiff\",\n            \"image/x-tiff\"\n        ]\n    ],\n    [\n        \"tiff\",\n        [\n            \"image/tiff\",\n            \"image/x-tiff\"\n        ]\n    ],\n    [\n        \"tmo\",\n        \"application/vnd.tmobile-livetv\"\n    ],\n    [\n        \"torrent\",\n        \"application/x-bittorrent\"\n    ],\n    [\n        \"tpl\",\n        \"application/vnd.groove-tool-template\"\n    ],\n    [\n        \"tpt\",\n        \"application/vnd.trid.tpt\"\n    ],\n    [\n        \"tr\",\n        \"application/x-troff\"\n    ],\n    [\n        \"tra\",\n        \"application/vnd.trueapp\"\n    ],\n    [\n        \"trm\",\n        \"application/x-msterminal\"\n    ],\n    [\n        \"tsd\",\n        \"application/timestamped-data\"\n    ],\n    [\n        \"tsi\",\n        \"audio/tsp-audio\"\n    ],\n    [\n        \"tsp\",\n        [\n            \"application/dsptype\",\n            \"audio/tsplayer\"\n        ]\n    ],\n    [\n        \"tsv\",\n        \"text/tab-separated-values\"\n    ],\n    [\n        \"ttf\",\n        \"application/x-font-ttf\"\n    ],\n    [\n        \"ttl\",\n        \"text/turtle\"\n    ],\n    [\n        \"turbot\",\n        \"image/florian\"\n    ],\n    [\n        \"twd\",\n        \"application/vnd.simtech-mindmapper\"\n    ],\n    [\n        \"txd\",\n        \"application/vnd.genomatix.tuxedo\"\n    ],\n    [\n        \"txf\",\n        \"application/vnd.mobius.txf\"\n    ],\n    [\n        \"txt\",\n        \"text/plain\"\n    ],\n    [\n        \"ufd\",\n        \"application/vnd.ufdl\"\n    ],\n    [\n        \"uil\",\n        \"text/x-uil\"\n    ],\n    [\n        \"uls\",\n        \"text/iuls\"\n    ],\n    [\n        \"umj\",\n        \"application/vnd.umajin\"\n    ],\n    [\n        \"uni\",\n        \"text/uri-list\"\n    ],\n    [\n        \"unis\",\n        \"text/uri-list\"\n    ],\n    [\n        \"unityweb\",\n        \"application/vnd.unity\"\n    ],\n    [\n        \"unv\",\n        \"application/i-deas\"\n    ],\n    [\n        \"uoml\",\n        \"application/vnd.uoml+xml\"\n    ],\n    [\n        \"uri\",\n        \"text/uri-list\"\n    ],\n    [\n        \"uris\",\n        \"text/uri-list\"\n    ],\n    [\n        \"ustar\",\n        [\n            \"application/x-ustar\",\n            \"multipart/x-ustar\"\n        ]\n    ],\n    [\n        \"utz\",\n        \"application/vnd.uiq.theme\"\n    ],\n    [\n        \"uu\",\n        [\n            \"application/octet-stream\",\n            \"text/x-uuencode\"\n        ]\n    ],\n    [\n        \"uue\",\n        \"text/x-uuencode\"\n    ],\n    [\n        \"uva\",\n        \"audio/vnd.dece.audio\"\n    ],\n    [\n        \"uvh\",\n        \"video/vnd.dece.hd\"\n    ],\n    [\n        \"uvi\",\n        \"image/vnd.dece.graphic\"\n    ],\n    [\n        \"uvm\",\n        \"video/vnd.dece.mobile\"\n    ],\n    [\n        \"uvp\",\n        \"video/vnd.dece.pd\"\n    ],\n    [\n        \"uvs\",\n        \"video/vnd.dece.sd\"\n    ],\n    [\n        \"uvu\",\n        \"video/vnd.uvvu.mp4\"\n    ],\n    [\n        \"uvv\",\n        \"video/vnd.dece.video\"\n    ],\n    [\n        \"vcd\",\n        \"application/x-cdlink\"\n    ],\n    [\n        \"vcf\",\n        \"text/x-vcard\"\n    ],\n    [\n        \"vcg\",\n        \"application/vnd.groove-vcard\"\n    ],\n    [\n        \"vcs\",\n        \"text/x-vcalendar\"\n    ],\n    [\n        \"vcx\",\n        \"application/vnd.vcx\"\n    ],\n    [\n        \"vda\",\n        \"application/vda\"\n    ],\n    [\n        \"vdo\",\n        \"video/vdo\"\n    ],\n    [\n        \"vew\",\n        \"application/groupwise\"\n    ],\n    [\n        \"vis\",\n        \"application/vnd.visionary\"\n    ],\n    [\n        \"viv\",\n        [\n            \"video/vivo\",\n            \"video/vnd.vivo\"\n        ]\n    ],\n    [\n        \"vivo\",\n        [\n            \"video/vivo\",\n            \"video/vnd.vivo\"\n        ]\n    ],\n    [\n        \"vmd\",\n        \"application/vocaltec-media-desc\"\n    ],\n    [\n        \"vmf\",\n        \"application/vocaltec-media-file\"\n    ],\n    [\n        \"voc\",\n        [\n            \"audio/voc\",\n            \"audio/x-voc\"\n        ]\n    ],\n    [\n        \"vos\",\n        \"video/vosaic\"\n    ],\n    [\n        \"vox\",\n        \"audio/voxware\"\n    ],\n    [\n        \"vqe\",\n        \"audio/x-twinvq-plugin\"\n    ],\n    [\n        \"vqf\",\n        \"audio/x-twinvq\"\n    ],\n    [\n        \"vql\",\n        \"audio/x-twinvq-plugin\"\n    ],\n    [\n        \"vrml\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\",\n            \"application/x-vrml\"\n        ]\n    ],\n    [\n        \"vrt\",\n        \"x-world/x-vrt\"\n    ],\n    [\n        \"vsd\",\n        [\n            \"application/vnd.visio\",\n            \"application/x-visio\"\n        ]\n    ],\n    [\n        \"vsf\",\n        \"application/vnd.vsf\"\n    ],\n    [\n        \"vst\",\n        \"application/x-visio\"\n    ],\n    [\n        \"vsw\",\n        \"application/x-visio\"\n    ],\n    [\n        \"vtu\",\n        \"model/vnd.vtu\"\n    ],\n    [\n        \"vxml\",\n        \"application/voicexml+xml\"\n    ],\n    [\n        \"w60\",\n        \"application/wordperfect6.0\"\n    ],\n    [\n        \"w61\",\n        \"application/wordperfect6.1\"\n    ],\n    [\n        \"w6w\",\n        \"application/msword\"\n    ],\n    [\n        \"wad\",\n        \"application/x-doom\"\n    ],\n    [\n        \"wav\",\n        [\n            \"audio/wav\",\n            \"audio/x-wav\"\n        ]\n    ],\n    [\n        \"wax\",\n        \"audio/x-ms-wax\"\n    ],\n    [\n        \"wb1\",\n        \"application/x-qpro\"\n    ],\n    [\n        \"wbmp\",\n        \"image/vnd.wap.wbmp\"\n    ],\n    [\n        \"wbs\",\n        \"application/vnd.criticaltools.wbs+xml\"\n    ],\n    [\n        \"wbxml\",\n        \"application/vnd.wap.wbxml\"\n    ],\n    [\n        \"wcm\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wdb\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"web\",\n        \"application/vnd.xara\"\n    ],\n    [\n        \"weba\",\n        \"audio/webm\"\n    ],\n    [\n        \"webm\",\n        \"video/webm\"\n    ],\n    [\n        \"webp\",\n        \"image/webp\"\n    ],\n    [\n        \"wg\",\n        \"application/vnd.pmi.widget\"\n    ],\n    [\n        \"wgt\",\n        \"application/widget\"\n    ],\n    [\n        \"wiz\",\n        \"application/msword\"\n    ],\n    [\n        \"wk1\",\n        \"application/x-123\"\n    ],\n    [\n        \"wks\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wm\",\n        \"video/x-ms-wm\"\n    ],\n    [\n        \"wma\",\n        \"audio/x-ms-wma\"\n    ],\n    [\n        \"wmd\",\n        \"application/x-ms-wmd\"\n    ],\n    [\n        \"wmf\",\n        [\n            \"windows/metafile\",\n            \"application/x-msmetafile\"\n        ]\n    ],\n    [\n        \"wml\",\n        \"text/vnd.wap.wml\"\n    ],\n    [\n        \"wmlc\",\n        \"application/vnd.wap.wmlc\"\n    ],\n    [\n        \"wmls\",\n        \"text/vnd.wap.wmlscript\"\n    ],\n    [\n        \"wmlsc\",\n        \"application/vnd.wap.wmlscriptc\"\n    ],\n    [\n        \"wmv\",\n        \"video/x-ms-wmv\"\n    ],\n    [\n        \"wmx\",\n        \"video/x-ms-wmx\"\n    ],\n    [\n        \"wmz\",\n        \"application/x-ms-wmz\"\n    ],\n    [\n        \"woff\",\n        \"application/x-font-woff\"\n    ],\n    [\n        \"word\",\n        \"application/msword\"\n    ],\n    [\n        \"wp\",\n        \"application/wordperfect\"\n    ],\n    [\n        \"wp5\",\n        [\n            \"application/wordperfect\",\n            \"application/wordperfect6.0\"\n        ]\n    ],\n    [\n        \"wp6\",\n        \"application/wordperfect\"\n    ],\n    [\n        \"wpd\",\n        [\n            \"application/wordperfect\",\n            \"application/vnd.wordperfect\",\n            \"application/x-wpwin\"\n        ]\n    ],\n    [\n        \"wpl\",\n        \"application/vnd.ms-wpl\"\n    ],\n    [\n        \"wps\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wq1\",\n        \"application/x-lotus\"\n    ],\n    [\n        \"wqd\",\n        \"application/vnd.wqd\"\n    ],\n    [\n        \"wri\",\n        [\n            \"application/mswrite\",\n            \"application/x-wri\",\n            \"application/x-mswrite\"\n        ]\n    ],\n    [\n        \"wrl\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\",\n            \"application/x-world\"\n        ]\n    ],\n    [\n        \"wrz\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\"\n        ]\n    ],\n    [\n        \"wsc\",\n        \"text/scriplet\"\n    ],\n    [\n        \"wsdl\",\n        \"application/wsdl+xml\"\n    ],\n    [\n        \"wspolicy\",\n        \"application/wspolicy+xml\"\n    ],\n    [\n        \"wsrc\",\n        \"application/x-wais-source\"\n    ],\n    [\n        \"wtb\",\n        \"application/vnd.webturbo\"\n    ],\n    [\n        \"wtk\",\n        \"application/x-wintalk\"\n    ],\n    [\n        \"wvx\",\n        \"video/x-ms-wvx\"\n    ],\n    [\n        \"x-png\",\n        \"image/png\"\n    ],\n    [\n        \"x3d\",\n        \"application/vnd.hzn-3d-crossword\"\n    ],\n    [\n        \"xaf\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"xap\",\n        \"application/x-silverlight-app\"\n    ],\n    [\n        \"xar\",\n        \"application/vnd.xara\"\n    ],\n    [\n        \"xbap\",\n        \"application/x-ms-xbap\"\n    ],\n    [\n        \"xbd\",\n        \"application/vnd.fujixerox.docuworks.binder\"\n    ],\n    [\n        \"xbm\",\n        [\n            \"image/xbm\",\n            \"image/x-xbm\",\n            \"image/x-xbitmap\"\n        ]\n    ],\n    [\n        \"xdf\",\n        \"application/xcap-diff+xml\"\n    ],\n    [\n        \"xdm\",\n        \"application/vnd.syncml.dm+xml\"\n    ],\n    [\n        \"xdp\",\n        \"application/vnd.adobe.xdp+xml\"\n    ],\n    [\n        \"xdr\",\n        \"video/x-amt-demorun\"\n    ],\n    [\n        \"xdssc\",\n        \"application/dssc+xml\"\n    ],\n    [\n        \"xdw\",\n        \"application/vnd.fujixerox.docuworks\"\n    ],\n    [\n        \"xenc\",\n        \"application/xenc+xml\"\n    ],\n    [\n        \"xer\",\n        \"application/patch-ops-error+xml\"\n    ],\n    [\n        \"xfdf\",\n        \"application/vnd.adobe.xfdf\"\n    ],\n    [\n        \"xfdl\",\n        \"application/vnd.xfdl\"\n    ],\n    [\n        \"xgz\",\n        \"xgl/drawing\"\n    ],\n    [\n        \"xhtml\",\n        \"application/xhtml+xml\"\n    ],\n    [\n        \"xif\",\n        \"image/vnd.xiff\"\n    ],\n    [\n        \"xl\",\n        \"application/excel\"\n    ],\n    [\n        \"xla\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlam\",\n        \"application/vnd.ms-excel.addin.macroenabled.12\"\n    ],\n    [\n        \"xlb\",\n        [\n            \"application/excel\",\n            \"application/vnd.ms-excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlc\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xld\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlk\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xll\",\n        [\n            \"application/excel\",\n            \"application/vnd.ms-excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlm\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xls\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlsb\",\n        \"application/vnd.ms-excel.sheet.binary.macroenabled.12\"\n    ],\n    [\n        \"xlsm\",\n        \"application/vnd.ms-excel.sheet.macroenabled.12\"\n    ],\n    [\n        \"xlsx\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ],\n    [\n        \"xlt\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xltm\",\n        \"application/vnd.ms-excel.template.macroenabled.12\"\n    ],\n    [\n        \"xltx\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\"\n    ],\n    [\n        \"xlv\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlw\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xm\",\n        \"audio/xm\"\n    ],\n    [\n        \"xml\",\n        [\n            \"application/xml\",\n            \"text/xml\",\n            \"application/atom+xml\",\n            \"application/rss+xml\"\n        ]\n    ],\n    [\n        \"xmz\",\n        \"xgl/movie\"\n    ],\n    [\n        \"xo\",\n        \"application/vnd.olpc-sugar\"\n    ],\n    [\n        \"xof\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"xop\",\n        \"application/xop+xml\"\n    ],\n    [\n        \"xpi\",\n        \"application/x-xpinstall\"\n    ],\n    [\n        \"xpix\",\n        \"application/x-vnd.ls-xpix\"\n    ],\n    [\n        \"xpm\",\n        [\n            \"image/xpm\",\n            \"image/x-xpixmap\"\n        ]\n    ],\n    [\n        \"xpr\",\n        \"application/vnd.is-xpr\"\n    ],\n    [\n        \"xps\",\n        \"application/vnd.ms-xpsdocument\"\n    ],\n    [\n        \"xpw\",\n        \"application/vnd.intercon.formnet\"\n    ],\n    [\n        \"xslt\",\n        \"application/xslt+xml\"\n    ],\n    [\n        \"xsm\",\n        \"application/vnd.syncml+xml\"\n    ],\n    [\n        \"xspf\",\n        \"application/xspf+xml\"\n    ],\n    [\n        \"xsr\",\n        \"video/x-amt-showrun\"\n    ],\n    [\n        \"xul\",\n        \"application/vnd.mozilla.xul+xml\"\n    ],\n    [\n        \"xwd\",\n        [\n            \"image/x-xwd\",\n            \"image/x-xwindowdump\"\n        ]\n    ],\n    [\n        \"xyz\",\n        [\n            \"chemical/x-xyz\",\n            \"chemical/x-pdb\"\n        ]\n    ],\n    [\n        \"yang\",\n        \"application/yang\"\n    ],\n    [\n        \"yin\",\n        \"application/yin+xml\"\n    ],\n    [\n        \"z\",\n        [\n            \"application/x-compressed\",\n            \"application/x-compress\"\n        ]\n    ],\n    [\n        \"zaz\",\n        \"application/vnd.zzazz.deck+xml\"\n    ],\n    [\n        \"zip\",\n        [\n            \"application/zip\",\n            \"multipart/x-zip\",\n            \"application/x-zip-compressed\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"zir\",\n        \"application/vnd.zul\"\n    ],\n    [\n        \"zmm\",\n        \"application/vnd.handheld-entertainment+xml\"\n    ],\n    [\n        \"zoo\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"zsh\",\n        \"text/x-script.zsh\"\n    ]\n]);\nmodule.exports = {\n    detectMimeType (filename) {\n        if (!filename) {\n            return defaultMimeType;\n        }\n        let parsed = path.parse(filename);\n        let extension = (parsed.ext.substr(1) || parsed.name || \"\").split(\"?\").shift().trim().toLowerCase();\n        let value = defaultMimeType;\n        if (extensions.has(extension)) {\n            value = extensions.get(extension);\n        }\n        if (Array.isArray(value)) {\n            return value[0];\n        }\n        return value;\n    },\n    detectExtension (mimeType) {\n        if (!mimeType) {\n            return defaultExtension;\n        }\n        let parts = (mimeType || \"\").toLowerCase().trim().split(\"/\");\n        let rootType = parts.shift().trim();\n        let subType = parts.join(\"/\").trim();\n        if (mimeTypes.has(rootType + \"/\" + subType)) {\n            let value = mimeTypes.get(rootType + \"/\" + subType);\n            if (Array.isArray(value)) {\n                return value[0];\n            }\n            return value;\n        }\n        switch(rootType){\n            case \"text\":\n                return \"txt\";\n            default:\n                return \"bin\";\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1mdW5jcy9taW1lLXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QixHQUV6QjtBQUVBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBRXJCLE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQyxtQkFBbUI7QUFFekIsTUFBTUMsWUFBWSxJQUFJQyxJQUFJO0lBQ3RCO1FBQUM7UUFBb0I7S0FBTTtJQUMzQjtRQUFDO1FBQTBCO0tBQUs7SUFDaEM7UUFBQztRQUFtQjtLQUFNO0lBQzFCO1FBQUM7UUFBd0I7S0FBTTtJQUMvQjtRQUFDO1FBQTJCO0tBQVU7SUFDdEM7UUFBQztRQUEyQjtLQUFVO0lBQ3RDO1FBQUM7UUFBc0I7WUFBQztZQUFNO1NBQU07S0FBQztJQUNyQztRQUFDO1FBQXNCO0tBQU07SUFDN0I7UUFBQztRQUF1QjtLQUFNO0lBQzlCO1FBQUM7UUFBb0I7WUFBQztZQUFRO1NBQU07S0FBQztJQUNyQztRQUFDO1FBQTBCO0tBQVE7SUFDbkM7UUFBQztRQUFtQjtLQUFNO0lBQzFCO1FBQUM7UUFBK0I7S0FBUTtJQUN4QztRQUFDO1FBQThCO0tBQVE7SUFDdkM7UUFBQztRQUEyQjtLQUFRO0lBQ3BDO1FBQUM7UUFBMkI7S0FBUTtJQUNwQztRQUFDO1FBQTBCO0tBQVE7SUFDbkM7UUFBQztRQUF5QjtLQUFPO0lBQ2pDO1FBQUM7UUFBNEI7S0FBSztJQUNsQztRQUFDO1FBQXdCO0tBQUs7SUFDOUI7UUFBQztRQUE0QjtLQUFXO0lBQ3hDO1FBQUM7UUFBd0I7S0FBTTtJQUMvQjtRQUFDO1FBQXVCO0tBQU07SUFDOUI7UUFBQztRQUF3QjtLQUFPO0lBQ2hDO1FBQUM7UUFBd0I7S0FBUTtJQUNqQztRQUFDO1FBQW1CO0tBQU07SUFDMUI7UUFBQztRQUEwQjtZQUFDO1lBQU07U0FBSztLQUFDO0lBQ3hDO1FBQUM7UUFBd0I7S0FBTztJQUNoQztRQUFDO1FBQXFCO0tBQU07SUFDNUI7UUFB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QUs7Z0JBQ0QsT0FBTztZQUNYO2dCQUNJLE9BQU87UUFDZjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb250aW51YWxnLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL21pbWUtZnVuY3MvbWltZS10eXBlcy5qcz9jYmYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBxdW90ZS1wcm9wczogMCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IGRlZmF1bHRNaW1lVHlwZSA9ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xuY29uc3QgZGVmYXVsdEV4dGVuc2lvbiA9ICdiaW4nO1xuXG5jb25zdCBtaW1lVHlwZXMgPSBuZXcgTWFwKFtcbiAgICBbJ2FwcGxpY2F0aW9uL2FjYWQnLCAnZHdnJ10sXG4gICAgWydhcHBsaWNhdGlvbi9hcHBsaXh3YXJlJywgJ2F3J10sXG4gICAgWydhcHBsaWNhdGlvbi9hcmonLCAnYXJqJ10sXG4gICAgWydhcHBsaWNhdGlvbi9hdG9tK3htbCcsICd4bWwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2F0b21jYXQreG1sJywgJ2F0b21jYXQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2F0b21zdmMreG1sJywgJ2F0b21zdmMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2Jhc2U2NCcsIFsnbW0nLCAnbW1lJ11dLFxuICAgIFsnYXBwbGljYXRpb24vYmluaGV4JywgJ2hxeCddLFxuICAgIFsnYXBwbGljYXRpb24vYmluaGV4NCcsICdocXgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2Jvb2snLCBbJ2Jvb2snLCAnYm9vJ11dLFxuICAgIFsnYXBwbGljYXRpb24vY2N4bWwreG1sLCcsICdjY3htbCddLFxuICAgIFsnYXBwbGljYXRpb24vY2RmJywgJ2NkZiddLFxuICAgIFsnYXBwbGljYXRpb24vY2RtaS1jYXBhYmlsaXR5JywgJ2NkbWlhJ10sXG4gICAgWydhcHBsaWNhdGlvbi9jZG1pLWNvbnRhaW5lcicsICdjZG1pYyddLFxuICAgIFsnYXBwbGljYXRpb24vY2RtaS1kb21haW4nLCAnY2RtaWQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2NkbWktb2JqZWN0JywgJ2NkbWlvJ10sXG4gICAgWydhcHBsaWNhdGlvbi9jZG1pLXF1ZXVlJywgJ2NkbWlxJ10sXG4gICAgWydhcHBsaWNhdGlvbi9jbGFyaXNjYWQnLCAnY2NhZCddLFxuICAgIFsnYXBwbGljYXRpb24vY29tbW9uZ3JvdW5kJywgJ2RwJ10sXG4gICAgWydhcHBsaWNhdGlvbi9jdS1zZWVtZScsICdjdSddLFxuICAgIFsnYXBwbGljYXRpb24vZGF2bW91bnQreG1sJywgJ2Rhdm1vdW50J10sXG4gICAgWydhcHBsaWNhdGlvbi9kcmFmdGluZycsICdkcncnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2RzcHR5cGUnLCAndHNwJ10sXG4gICAgWydhcHBsaWNhdGlvbi9kc3NjK2RlcicsICdkc3NjJ10sXG4gICAgWydhcHBsaWNhdGlvbi9kc3NjK3htbCcsICd4ZHNzYyddLFxuICAgIFsnYXBwbGljYXRpb24vZHhmJywgJ2R4ZiddLFxuICAgIFsnYXBwbGljYXRpb24vZWNtYXNjcmlwdCcsIFsnanMnLCAnZXMnXV0sXG4gICAgWydhcHBsaWNhdGlvbi9lbW1hK3htbCcsICdlbW1hJ10sXG4gICAgWydhcHBsaWNhdGlvbi9lbnZveScsICdldnknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2VwdWIremlwJywgJ2VwdWInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2V4Y2VsJywgWyd4bHMnLCAneGwnLCAneGxhJywgJ3hsYicsICd4bGMnLCAneGxkJywgJ3hsaycsICd4bGwnLCAneGxtJywgJ3hsdCcsICd4bHYnLCAneGx3J11dLFxuICAgIFsnYXBwbGljYXRpb24vZXhpJywgJ2V4aSddLFxuICAgIFsnYXBwbGljYXRpb24vZm9udC10ZHBmcicsICdwZnInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2ZyYWN0YWxzJywgJ2ZpZiddLFxuICAgIFsnYXBwbGljYXRpb24vZnJlZWxvYWRlcicsICdmcmwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2Z1dHVyZXNwbGFzaCcsICdzcGwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2dudXRhcicsICd0Z3onXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2dyb3Vwd2lzZScsICd2ZXcnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2hscCcsICdobHAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2h0YScsICdodGEnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2h5cGVyc3R1ZGlvJywgJ3N0ayddLFxuICAgIFsnYXBwbGljYXRpb24vaS1kZWFzJywgJ3VudiddLFxuICAgIFsnYXBwbGljYXRpb24vaWdlcycsIFsnaWdlcycsICdpZ3MnXV0sXG4gICAgWydhcHBsaWNhdGlvbi9pbmYnLCAnaW5mJ10sXG4gICAgWydhcHBsaWNhdGlvbi9pbnRlcm5ldC1wcm9wZXJ0eS1zdHJlYW0nLCAnYWN4J10sXG4gICAgWydhcHBsaWNhdGlvbi9pcGZpeCcsICdpcGZpeCddLFxuICAgIFsnYXBwbGljYXRpb24vamF2YScsICdjbGFzcyddLFxuICAgIFsnYXBwbGljYXRpb24vamF2YS1hcmNoaXZlJywgJ2phciddLFxuICAgIFsnYXBwbGljYXRpb24vamF2YS1ieXRlLWNvZGUnLCAnY2xhc3MnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2phdmEtc2VyaWFsaXplZC1vYmplY3QnLCAnc2VyJ10sXG4gICAgWydhcHBsaWNhdGlvbi9qYXZhLXZtJywgJ2NsYXNzJ10sXG4gICAgWydhcHBsaWNhdGlvbi9qYXZhc2NyaXB0JywgJ2pzJ10sXG4gICAgWydhcHBsaWNhdGlvbi9qc29uJywgJ2pzb24nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2xoYScsICdsaGEnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL2x6eCcsICdsengnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL21hYy1iaW5hcnknLCAnYmluJ10sXG4gICAgWydhcHBsaWNhdGlvbi9tYWMtYmluaGV4JywgJ2hxeCddLFxuICAgIFsnYXBwbGljYXRpb24vbWFjLWJpbmhleDQwJywgJ2hxeCddLFxuICAgIFsnYXBwbGljYXRpb24vbWFjLWNvbXBhY3Rwcm8nLCAnY3B0J10sXG4gICAgWydhcHBsaWNhdGlvbi9tYWNiaW5hcnknLCAnYmluJ10sXG4gICAgWydhcHBsaWNhdGlvbi9tYWRzK3htbCcsICdtYWRzJ10sXG4gICAgWydhcHBsaWNhdGlvbi9tYXJjJywgJ21yYyddLFxuICAgIFsnYXBwbGljYXRpb24vbWFyY3htbCt4bWwnLCAnbXJjeCddLFxuICAgIFsnYXBwbGljYXRpb24vbWF0aGVtYXRpY2EnLCAnbWEnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL21hdGhtbCt4bWwnLCAnbWF0aG1sJ10sXG4gICAgWydhcHBsaWNhdGlvbi9tYmVkbGV0JywgJ21iZCddLFxuICAgIFsnYXBwbGljYXRpb24vbWJveCcsICdtYm94J10sXG4gICAgWydhcHBsaWNhdGlvbi9tY2FkJywgJ21jZCddLFxuICAgIFsnYXBwbGljYXRpb24vbWVkaWFzZXJ2ZXJjb250cm9sK3htbCcsICdtc2NtbCddLFxuICAgIFsnYXBwbGljYXRpb24vbWV0YWxpbms0K3htbCcsICdtZXRhNCddLFxuICAgIFsnYXBwbGljYXRpb24vbWV0cyt4bWwnLCAnbWV0cyddLFxuICAgIFsnYXBwbGljYXRpb24vbWltZScsICdhcHMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL21vZHMreG1sJywgJ21vZHMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL21wMjEnLCAnbTIxJ10sXG4gICAgWydhcHBsaWNhdGlvbi9tcDQnLCAnbXA0J10sXG4gICAgWydhcHBsaWNhdGlvbi9tc3Bvd2VycG9pbnQnLCBbJ3BwdCcsICdwb3QnLCAncHBzJywgJ3BweiddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL21zd29yZCcsIFsnZG9jJywgJ2RvdCcsICd3NncnLCAnd2l6JywgJ3dvcmQnXV0sXG4gICAgWydhcHBsaWNhdGlvbi9tc3dyaXRlJywgJ3dyaSddLFxuICAgIFsnYXBwbGljYXRpb24vbXhmJywgJ214ZiddLFxuICAgIFsnYXBwbGljYXRpb24vbmV0bWMnLCAnbWNwJ10sXG4gICAgWydhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLCBbJyonXV0sXG4gICAgWydhcHBsaWNhdGlvbi9vZGEnLCAnb2RhJ10sXG4gICAgWydhcHBsaWNhdGlvbi9vZWJwcy1wYWNrYWdlK3htbCcsICdvcGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL29nZycsICdvZ3gnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL29sZXNjcmlwdCcsICdheHMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL29uZW5vdGUnLCAnb25ldG9jJ10sXG4gICAgWydhcHBsaWNhdGlvbi9wYXRjaC1vcHMtZXJyb3IreG1sJywgJ3hlciddLFxuICAgIFsnYXBwbGljYXRpb24vcGRmJywgJ3BkZiddLFxuICAgIFsnYXBwbGljYXRpb24vcGdwLWVuY3J5cHRlZCcsICdhc2MnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3BncC1zaWduYXR1cmUnLCAncGdwJ10sXG4gICAgWydhcHBsaWNhdGlvbi9waWNzLXJ1bGVzJywgJ3ByZiddLFxuICAgIFsnYXBwbGljYXRpb24vcGtjcy0xMicsICdwMTInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3BrY3MtY3JsJywgJ2NybCddLFxuICAgIFsnYXBwbGljYXRpb24vcGtjczEwJywgJ3AxMCddLFxuICAgIFsnYXBwbGljYXRpb24vcGtjczctbWltZScsIFsncDdjJywgJ3A3bSddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3BrY3M3LXNpZ25hdHVyZScsICdwN3MnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3BrY3M4JywgJ3A4J10sXG4gICAgWydhcHBsaWNhdGlvbi9wa2l4LWF0dHItY2VydCcsICdhYyddLFxuICAgIFsnYXBwbGljYXRpb24vcGtpeC1jZXJ0JywgWydjZXInLCAnY3J0J11dLFxuICAgIFsnYXBwbGljYXRpb24vcGtpeC1jcmwnLCAnY3JsJ10sXG4gICAgWydhcHBsaWNhdGlvbi9wa2l4LXBraXBhdGgnLCAncGtpcGF0aCddLFxuICAgIFsnYXBwbGljYXRpb24vcGtpeGNtcCcsICdwa2knXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3BsYWluJywgJ3RleHQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3Bscyt4bWwnLCAncGxzJ10sXG4gICAgWydhcHBsaWNhdGlvbi9wb3N0c2NyaXB0JywgWydwcycsICdhaScsICdlcHMnXV0sXG4gICAgWydhcHBsaWNhdGlvbi9wb3dlcnBvaW50JywgJ3BwdCddLFxuICAgIFsnYXBwbGljYXRpb24vcHJvX2VuZycsIFsncGFydCcsICdwcnQnXV0sXG4gICAgWydhcHBsaWNhdGlvbi9wcnMuY3d3JywgJ2N3dyddLFxuICAgIFsnYXBwbGljYXRpb24vcHNrYyt4bWwnLCAncHNrY3htbCddLFxuICAgIFsnYXBwbGljYXRpb24vcmRmK3htbCcsICdyZGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3JlZ2luZm8reG1sJywgJ3JpZiddLFxuICAgIFsnYXBwbGljYXRpb24vcmVsYXgtbmctY29tcGFjdC1zeW50YXgnLCAncm5jJ10sXG4gICAgWydhcHBsaWNhdGlvbi9yZXNvdXJjZS1saXN0cyt4bWwnLCAncmwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzLWRpZmYreG1sJywgJ3JsZCddLFxuICAgIFsnYXBwbGljYXRpb24vcmluZ2luZy10b25lcycsICdybmcnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3Jscy1zZXJ2aWNlcyt4bWwnLCAncnMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3JzZCt4bWwnLCAncnNkJ10sXG4gICAgWydhcHBsaWNhdGlvbi9yc3MreG1sJywgJ3htbCddLFxuICAgIFsnYXBwbGljYXRpb24vcnRmJywgWydydGYnLCAncnR4J11dLFxuICAgIFsnYXBwbGljYXRpb24vc2JtbCt4bWwnLCAnc2JtbCddLFxuICAgIFsnYXBwbGljYXRpb24vc2N2cC1jdi1yZXF1ZXN0JywgJ3NjcSddLFxuICAgIFsnYXBwbGljYXRpb24vc2N2cC1jdi1yZXNwb25zZScsICdzY3MnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3NjdnAtdnAtcmVxdWVzdCcsICdzcHEnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3NjdnAtdnAtcmVzcG9uc2UnLCAnc3BwJ10sXG4gICAgWydhcHBsaWNhdGlvbi9zZHAnLCAnc2RwJ10sXG4gICAgWydhcHBsaWNhdGlvbi9zZWEnLCAnc2VhJ10sXG4gICAgWydhcHBsaWNhdGlvbi9zZXQnLCAnc2V0J10sXG4gICAgWydhcHBsaWNhdGlvbi9zZXQtcGF5bWVudC1pbml0aWF0aW9uJywgJ3NldHBheSddLFxuICAgIFsnYXBwbGljYXRpb24vc2V0LXJlZ2lzdHJhdGlvbi1pbml0aWF0aW9uJywgJ3NldHJlZyddLFxuICAgIFsnYXBwbGljYXRpb24vc2hmK3htbCcsICdzaGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3NsYScsICdzdGwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3NtaWwnLCBbJ3NtaScsICdzbWlsJ11dLFxuICAgIFsnYXBwbGljYXRpb24vc21pbCt4bWwnLCAnc21pJ10sXG4gICAgWydhcHBsaWNhdGlvbi9zb2xpZHMnLCAnc29sJ10sXG4gICAgWydhcHBsaWNhdGlvbi9zb3VuZGVyJywgJ3NkciddLFxuICAgIFsnYXBwbGljYXRpb24vc3BhcnFsLXF1ZXJ5JywgJ3JxJ10sXG4gICAgWydhcHBsaWNhdGlvbi9zcGFycWwtcmVzdWx0cyt4bWwnLCAnc3J4J10sXG4gICAgWydhcHBsaWNhdGlvbi9zcmdzJywgJ2dyYW0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3NyZ3MreG1sJywgJ2dyeG1sJ10sXG4gICAgWydhcHBsaWNhdGlvbi9zcnUreG1sJywgJ3NydSddLFxuICAgIFsnYXBwbGljYXRpb24vc3NtbCt4bWwnLCAnc3NtbCddLFxuICAgIFsnYXBwbGljYXRpb24vc3RlcCcsIFsnc3RlcCcsICdzdHAnXV0sXG4gICAgWydhcHBsaWNhdGlvbi9zdHJlYW1pbmdtZWRpYScsICdzc20nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3RlaSt4bWwnLCAndGVpJ10sXG4gICAgWydhcHBsaWNhdGlvbi90aHJhdWQreG1sJywgJ3RmaSddLFxuICAgIFsnYXBwbGljYXRpb24vdGltZXN0YW1wZWQtZGF0YScsICd0c2QnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3Rvb2xib29rJywgJ3RiayddLFxuICAgIFsnYXBwbGljYXRpb24vdmRhJywgJ3ZkYSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LWxhcmdlJywgJ3BsYiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LXNtYWxsJywgJ3BzYiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LXZhcicsICdwdmInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC4zZ3BwMi50Y2FwJywgJ3RjYXAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC4zbS5wb3N0LWl0LW5vdGVzJywgJ3B3biddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmFjY3BhYy5zaW1wbHkuYXNvJywgJ2FzbyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmFjY3BhYy5zaW1wbHkuaW1wJywgJ2ltcCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmFjdWNvYm9sJywgJ2FjdSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmFjdWNvcnAnLCAnYXRjJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuYWRvYmUuYWlyLWFwcGxpY2F0aW9uLWluc3RhbGxlci1wYWNrYWdlK3ppcCcsICdhaXInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hZG9iZS5meHAnLCAnZnhwJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuYWRvYmUueGRwK3htbCcsICd4ZHAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hZG9iZS54ZmRmJywgJ3hmZGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5haGVhZC5zcGFjZScsICdhaGVhZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmFpcnppcC5maWxlc2VjdXJlLmF6ZicsICdhemYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5haXJ6aXAuZmlsZXNlY3VyZS5henMnLCAnYXpzJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuYW1hem9uLmVib29rJywgJ2F6dyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmFtZXJpY2FuZHluYW1pY3MuYWNjJywgJ2FjYyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmFtaWdhLmFtaScsICdhbWknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hbmRyb2lkLnBhY2thZ2UtYXJjaGl2ZScsICdhcGsnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hbnNlci13ZWItY2VydGlmaWNhdGUtaXNzdWUtaW5pdGlhdGlvbicsICdjaWknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hbnNlci13ZWItZnVuZHMtdHJhbnNmZXItaW5pdGlhdGlvbicsICdmdGknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hbnRpeC5nYW1lLWNvbXBvbmVudCcsICdhdHgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hcHBsZS5pbnN0YWxsZXIreG1sJywgJ21wa2cnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVndXJsJywgJ20zdTgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5hcmlzdGFuZXR3b3Jrcy5zd2knLCAnc3dpJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuYXVkaW9ncmFwaCcsICdhZXAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ibHVlaWNlLm11bHRpcGFzcycsICdtcG0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ibWknLCAnYm1pJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuYnVzaW5lc3NvYmplY3RzJywgJ3JlcCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmNoZW1kcmF3K3htbCcsICdjZHhtbCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmNoaXBudXRzLmthcmFva2UtbW1kJywgJ21tZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmNpbmRlcmVsbGEnLCAnY2R5J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuY2xheW1vcmUnLCAnY2xhJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuY2xvYW50by5ycDknLCAncnA5J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuY2xvbmsuYzRncm91cCcsICdjNGcnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5jbHVldHJ1c3QuY2FydG9tb2JpbGUtY29uZmlnJywgJ2MxMWFtYyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmNsdWV0cnVzdC5jYXJ0b21vYmlsZS1jb25maWctcGtnJywgJ2MxMWFteiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmNvbW1vbnNwYWNlJywgJ2NzcCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmNvbnRhY3QuY21zZycsICdjZGJjbXNnJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuY29zbW9jYWxsZXInLCAnY21jJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlcicsICdjbGt4J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci5rZXlib2FyZCcsICdjbGtrJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci5wYWxldHRlJywgJ2Nsa3AnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLnRlbXBsYXRlJywgJ2Nsa3QnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLndvcmRiYW5rJywgJ2Nsa3cnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5jcml0aWNhbHRvb2xzLndicyt4bWwnLCAnd2JzJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuY3RjLXBvc21sJywgJ3BtbCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmN1cHMtcHBkJywgJ3BwZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmN1cmwuY2FyJywgJ2NhciddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmN1cmwucGN1cmwnLCAncGN1cmwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5kYXRhLXZpc2lvbi5yZHonLCAncmR6J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZGVub3ZvLmZjc2VsYXlvdXQtbGluaycsICdmZV9sYXVuY2gnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5kbmEnLCAnZG5hJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZG9sYnkubWxwJywgJ21scCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmRwZ3JhcGgnLCAnZHBnJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZHJlYW1mYWN0b3J5JywgJ2RmYWMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5kdmIuYWl0JywgJ2FpdCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmR2Yi5zZXJ2aWNlJywgJ3N2YyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmR5bmFnZW8nLCAnZ2VvJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZWNvd2luLmNoYXJ0JywgJ21hZyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmVubGl2ZW4nLCAnbm1sJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZXBzb24uZXNmJywgJ2VzZiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmVwc29uLm1zZicsICdtc2YnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5lcHNvbi5xdWlja2FuaW1lJywgJ3FhbSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmVwc29uLnNhbHQnLCAnc2x0J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZXBzb24uc3NmJywgJ3NzZiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmVzemlnbm8zK3htbCcsICdlczMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5lenBpeC1hbGJ1bScsICdlejInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5lenBpeC1wYWNrYWdlJywgJ2V6MyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmZkZicsICdmZGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5mZHNuLnNlZWQnLCAnc2VlZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmZsb2dyYXBoaXQnLCAnZ3BoJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZmx1eHRpbWUuY2xpcCcsICdmdGMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5mcmFtZW1ha2VyJywgJ2ZtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZnJvZ2Fucy5mbmMnLCAnZm5jJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZnJvZ2Fucy5sdGYnLCAnbHRmJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZnNjLndlYmxhdW5jaCcsICdmc2MnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzJywgJ29hcyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXMyJywgJ29hMiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXMzJywgJ29hMyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXNncCcsICdmZzUnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzcHJzJywgJ2JoMiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5kZGQnLCAnZGRkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRvY3V3b3JrcycsICd4ZHcnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guZG9jdXdvcmtzLmJpbmRlcicsICd4YmQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5mdXp6eXNoZWV0JywgJ2Z6cyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmdlbm9tYXRpeC50dXhlZG8nLCAndHhkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ2VvZ2VicmEuZmlsZScsICdnZ2InXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5nZW9nZWJyYS50b29sJywgJ2dndCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmdlb21ldHJ5LWV4cGxvcmVyJywgJ2dleCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmdlb25leHQnLCAnZ3h0J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ2VvcGxhbicsICdnMncnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5nZW9zcGFjZScsICdnM3cnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5nbXgnLCAnZ214J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWVhcnRoLmttbCt4bWwnLCAna21sJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWVhcnRoLmtteicsICdrbXonXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ncmFmZXEnLCAnZ3FmJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWFjY291bnQnLCAnZ2FjJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWhlbHAnLCAnZ2hmJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWlkZW50aXR5LW1lc3NhZ2UnLCAnZ2ltJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWluamVjdG9yJywgJ2dydiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmdyb292ZS10b29sLW1lc3NhZ2UnLCAnZ3RtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXRvb2wtdGVtcGxhdGUnLCAndHBsJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXZjYXJkJywgJ3ZjZyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmhhbCt4bWwnLCAnaGFsJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaGFuZGhlbGQtZW50ZXJ0YWlubWVudCt4bWwnLCAnem1tJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaGJjaScsICdoYmNpJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaGhlLmxlc3Nvbi1wbGF5ZXInLCAnbGVzJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaHAtaHBnbCcsIFsnaGdsJywgJ2hwZycsICdocGdsJ11dLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmhwLWhwaWQnLCAnaHBpZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmhwLWhwcycsICdocHMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ocC1qbHl0JywgJ2psdCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmhwLXBjbCcsICdwY2wnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ocC1wY2x4bCcsICdwY2x4bCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmh5ZHJvc3RhdGl4LnNvZi1kYXRhJywgJ3NmZC1oZHN0eCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmh6bi0zZC1jcm9zc3dvcmQnLCAneDNkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaWJtLm1pbmlwYXknLCAnbXB5J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaWJtLm1vZGNhcCcsICdhZnAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5pYm0ucmlnaHRzLW1hbmFnZW1lbnQnLCAnaXJtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaWJtLnNlY3VyZS1jb250YWluZXInLCAnc2MnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5pY2Nwcm9maWxlJywgJ2ljYyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmlnbG9hZGVyJywgJ2lnbCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmltbWVydmlzaW9uLWl2cCcsICdpdnAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5pbW1lcnZpc2lvbi1pdnUnLCAnaXZ1J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaW5zb3JzLmlnbScsICdpZ20nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5pbnRlcmNvbi5mb3JtbmV0JywgJ3hwdyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmludGVyZ2VvJywgJ2kyZyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmludHUucWJvJywgJ3FibyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmludHUucWZ4JywgJ3FmeCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmlwdW5wbHVnZ2VkLnJjcHJvZmlsZScsICdyY3Byb2ZpbGUnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5pcmVwb3NpdG9yeS5wYWNrYWdlK3htbCcsICdpcnAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5pcy14cHInLCAneHByJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuaXNhYy5mY3MnLCAnZmNzJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuamFtJywgJ2phbSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmpjcC5qYXZhbWUubWlkbGV0LXJtcycsICdybXMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5qaXNwJywgJ2ppc3AnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5qb29zdC5qb2RhLWFyY2hpdmUnLCAnam9kYSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmthaG9vdHonLCAna3R6J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQua2RlLmthcmJvbicsICdrYXJib24nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5rZGUua2NoYXJ0JywgJ2NocnQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5rZGUua2Zvcm11bGEnLCAna2ZvJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQua2RlLmtpdmlvJywgJ2ZsdyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmtkZS5rb250b3VyJywgJ2tvbiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmtkZS5rcHJlc2VudGVyJywgJ2twciddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmtkZS5rc3ByZWFkJywgJ2tzcCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmtkZS5rd29yZCcsICdrd2QnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5rZW5hbWVhYXBwJywgJ2h0a2UnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5raWRzcGlyYXRpb24nLCAna2lhJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQua2luYXInLCAna25lJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQua29hbicsICdza3AnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5rb2Rhay1kZXNjcmlwdG9yJywgJ3NzZSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmxhcy5sYXMreG1sJywgJ2xhc3htbCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmxsYW1hZ3JhcGhpY3MubGlmZS1iYWxhbmNlLmRlc2t0b3AnLCAnbGJkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubGxhbWFncmFwaGljcy5saWZlLWJhbGFuY2UuZXhjaGFuZ2UreG1sJywgJ2xiZSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmxvdHVzLTEtMi0zJywgJzEyMyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmxvdHVzLWFwcHJvYWNoJywgJ2FwciddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmxvdHVzLWZyZWVsYW5jZScsICdwcmUnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5sb3R1cy1ub3RlcycsICduc2YnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5sb3R1cy1vcmdhbml6ZXInLCAnb3JnJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubG90dXMtc2NyZWVuY2FtJywgJ3NjbSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLmxvdHVzLXdvcmRwcm8nLCAnbHdwJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubWFjcG9ydHMucG9ydHBrZycsICdwb3J0cGtnJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubWNkJywgJ21jZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1lZGNhbGNkYXRhJywgJ21jMSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1lZGlhc3RhdGlvbi5jZGtleScsICdjZGtleSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1mZXInLCAnbXdmJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubWZtcCcsICdtZm0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5taWNyb2dyYWZ4LmZsbycsICdmbG8nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5taWNyb2dyYWZ4LmlneCcsICdpZ3gnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5taWYnLCAnbWlmJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubW9iaXVzLmRhZicsICdkYWYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tb2JpdXMuZGlzJywgJ2RpcyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1vYml1cy5tYmsnLCAnbWJrJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubW9iaXVzLm1xeScsICdtcXknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubXNsJywgJ21zbCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1vYml1cy5wbGMnLCAncGxjJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubW9iaXVzLnR4ZicsICd0eGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tb3BodW4uYXBwbGljYXRpb24nLCAnbXBuJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubW9waHVuLmNlcnRpZmljYXRlJywgJ21wYyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1vemlsbGEueHVsK3htbCcsICd4dWwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1hcnRnYWxyeScsICdjaWwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1jYWItY29tcHJlc3NlZCcsICdjYWInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcsIFsneGxzJywgJ3hsYScsICd4bGMnLCAneGxtJywgJ3hsdCcsICd4bHcnLCAneGxiJywgJ3hsbCddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5hZGRpbi5tYWNyb2VuYWJsZWQuMTInLCAneGxhbSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb2VuYWJsZWQuMTInLCAneGxzYiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0Lm1hY3JvZW5hYmxlZC4xMicsICd4bHNtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyJywgJ3hsdG0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1mb250b2JqZWN0JywgJ2VvdCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLWh0bWxoZWxwJywgJ2NobSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLWltcycsICdpbXMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1scm0nLCAnbHJtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNldGhlbWUnLCAndGhteCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLW91dGxvb2snLCAnbXNnJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXMtcGtpLmNlcnRzdG9yZScsICdzc3QnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wa2kucGtvJywgJ3BrbyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLXBraS5zZWNjYXQnLCAnY2F0J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXMtcGtpLnN0bCcsICdzdGwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wa2ljZXJ0c3RvcmUnLCAnc3N0J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXMtcGtpc2VjY2F0JywgJ2NhdCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLXBraXN0bCcsICdzdGwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50JywgWydwcHQnLCAncG90JywgJ3BwcycsICdwcGEnLCAncHd6J11dLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuYWRkaW4ubWFjcm9lbmFibGVkLjEyJywgJ3BwYW0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnByZXNlbnRhdGlvbi5tYWNyb2VuYWJsZWQuMTInLCAncHB0bSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGUubWFjcm9lbmFibGVkLjEyJywgJ3NsZG0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnNsaWRlc2hvdy5tYWNyb2VuYWJsZWQuMTInLCAncHBzbSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyJywgJ3BvdG0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wcm9qZWN0JywgJ21wcCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm1zLXdvcmQuZG9jdW1lbnQubWFjcm9lbmFibGVkLjEyJywgJ2RvY20nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLnRlbXBsYXRlLm1hY3JvZW5hYmxlZC4xMicsICdkb3RtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXMtd29ya3MnLCBbJ3drcycsICd3Y20nLCAnd2RiJywgJ3dwcyddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy13cGwnLCAnd3BsJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXMteHBzZG9jdW1lbnQnLCAneHBzJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXNlcScsICdtc2VxJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXVzaWNpYW4nLCAnbXVzJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubXV2ZWUuc3R5bGUnLCAnbXN0eSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm5ldXJvbGFuZ3VhZ2Uubmx1JywgJ25sdSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm5vYmxlbmV0LWRpcmVjdG9yeScsICdubmQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ub2JsZW5ldC1zZWFsZXInLCAnbm5zJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubm9ibGVuZXQtd2ViJywgJ25udyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm5va2lhLmNvbmZpZ3VyYXRpb24tbWVzc2FnZScsICduY20nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uLWdhZ2UuZGF0YScsICduZ2RhdCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm5va2lhLm4tZ2FnZS5zeW1iaWFuLmluc3RhbGwnLCAnbi1nYWdlJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubm9raWEucmFkaW8tcHJlc2V0JywgJ3Jwc3QnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5yYWRpby1wcmVzZXRzJywgJ3Jwc3MnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5yaW5naW5nLXRvbmUnLCAncm5nJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZWRtJywgJ2VkbSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm5vdmFkaWdtLmVkeCcsICdlZHgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ub3ZhZGlnbS5leHQnLCAnZXh0J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmNoYXJ0JywgJ29kYyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5jaGFydC10ZW1wbGF0ZScsICdvdGMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZGF0YWJhc2UnLCAnb2RiJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmZvcm11bGEnLCAnb2RmJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmZvcm11bGEtdGVtcGxhdGUnLCAnb2RmdCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5ncmFwaGljcycsICdvZGcnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3MtdGVtcGxhdGUnLCAnb3RnJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmltYWdlJywgJ29kaSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5pbWFnZS10ZW1wbGF0ZScsICdvdGknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uJywgJ29kcCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5wcmVzZW50YXRpb24tdGVtcGxhdGUnLCAnb3RwJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0JywgJ29kcyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldC10ZW1wbGF0ZScsICdvdHMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dCcsICdvZHQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC1tYXN0ZXInLCAnb2RtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtdGVtcGxhdGUnLCAnb3R0J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtd2ViJywgJ290aCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9scGMtc3VnYXInLCAneG8nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vbWEuZGQyK3htbCcsICdkZDInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vcGVub2ZmaWNlb3JnLmV4dGVuc2lvbicsICdveHQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24nLCAncHB0eCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlJywgJ3NsZHgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZXNob3cnLCAncHBzeCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRlbXBsYXRlJywgJ3BvdHgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JywgJ3hsc3gnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlJywgJ3hsdHgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50JywgJ2RvY3gnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnRlbXBsYXRlJywgJ2RvdHgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5vc2dlby5tYXBndWlkZS5wYWNrYWdlJywgJ21ncCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLm9zZ2kuZHAnLCAnZHAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5wYWxtJywgJ3BkYiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnBhd2FhZmlsZScsICdwYXcnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5wZy5mb3JtYXQnLCAnc3RyJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQucGcub3Nhc2xpJywgJ2VpNiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnBpY3NlbCcsICdlZmlmJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQucG1pLndpZGdldCcsICd3ZyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnBvY2tldGxlYXJuJywgJ3BsZiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnBvd2VyYnVpbGRlcjYnLCAncGJkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQucHJldmlld3N5c3RlbXMuYm94JywgJ2JveCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnByb3RldXMubWFnYXppbmUnLCAnbWd6J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQucHVibGlzaGFyZS1kZWx0YS10cmVlJywgJ3FwcyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnB2aS5wdGlkMScsICdwdGlkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQucXVhcmsucXVhcmt4cHJlc3MnLCAncXhkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQucmVhbHZuYy5iZWQnLCAnYmVkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQucmVjb3JkYXJlLm11c2ljeG1sJywgJ214bCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnJlY29yZGFyZS5tdXNpY3htbCt4bWwnLCAnbXVzaWN4bWwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5yaWcuY3J5cHRvbm90ZScsICdjcnlwdG9ub3RlJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQucmltLmNvZCcsICdjb2QnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ybi1yZWFsbWVkaWEnLCAncm0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5ybi1yZWFscGxheWVyJywgJ3JueCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnJvdXRlNjYubGluazY2K3htbCcsICdsaW5rNjYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5zYWlsaW5ndHJhY2tlci50cmFjaycsICdzdCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnNlZW1haWwnLCAnc2VlJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc2VtYScsICdzZW1hJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc2VtZCcsICdzZW1kJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc2VtZicsICdzZW1mJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc2hhbmEuaW5mb3JtZWQuZm9ybWRhdGEnLCAnaWZtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc2hhbmEuaW5mb3JtZWQuZm9ybXRlbXBsYXRlJywgJ2l0cCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmludGVyY2hhbmdlJywgJ2lpZiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLnBhY2thZ2UnLCAnaXBrJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc2ltdGVjaC1taW5kbWFwcGVyJywgJ3R3ZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnNtYWYnLCAnbW1mJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc21hcnQudGVhY2hlcicsICd0ZWFjaGVyJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc29sZW50LnNka20reG1sJywgJ3Nka20nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5zcG90ZmlyZS5keHAnLCAnZHhwJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3BvdGZpcmUuc2ZzJywgJ3NmcyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5jYWxjJywgJ3NkYyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5kcmF3JywgJ3NkYSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5pbXByZXNzJywgJ3NkZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5tYXRoJywgJ3NtZiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi53cml0ZXInLCAnc2R3J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlci1nbG9iYWwnLCAnc2dsJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3RlcG1hbmlhLnN0ZXBjaGFydCcsICdzbSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN1bi54bWwuY2FsYycsICdzeGMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmNhbGMudGVtcGxhdGUnLCAnc3RjJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5kcmF3JywgJ3N4ZCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN1bi54bWwuZHJhdy50ZW1wbGF0ZScsICdzdGQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmltcHJlc3MnLCAnc3hpJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5pbXByZXNzLnRlbXBsYXRlJywgJ3N0aSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN1bi54bWwubWF0aCcsICdzeG0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLndyaXRlcicsICdzeHcnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLndyaXRlci5nbG9iYWwnLCAnc3hnJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC53cml0ZXIudGVtcGxhdGUnLCAnc3R3J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3VzLWNhbGVuZGFyJywgJ3N1cyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnN2ZCcsICdzdmQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5zeW1iaWFuLmluc3RhbGwnLCAnc2lzJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3luY21sK3htbCcsICd4c20nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG0rd2J4bWwnLCAnYmRtJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtK3htbCcsICd4ZG0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC50YW8uaW50ZW50LW1vZHVsZS1hcmNoaXZlJywgJ3RhbyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnRtb2JpbGUtbGl2ZXR2JywgJ3RtbyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnRyaWQudHB0JywgJ3RwdCddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnRyaXNjYXBlLm14cycsICdteHMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC50cnVlYXBwJywgJ3RyYSddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnVmZGwnLCAndWZkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQudWlxLnRoZW1lJywgJ3V0eiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnVtYWppbicsICd1bWonXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC51bml0eScsICd1bml0eXdlYiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnVvbWwreG1sJywgJ3VvbWwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC52Y3gnLCAndmN4J10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQudmlzaW8nLCAndnNkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQudmlzaW9uYXJ5JywgJ3ZpcyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnZzZicsICd2c2YnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC53YXAud2J4bWwnLCAnd2J4bWwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC53YXAud21sYycsICd3bWxjJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQud2FwLndtbHNjcmlwdGMnLCAnd21sc2MnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC53ZWJ0dXJibycsICd3dGInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC53b2xmcmFtLnBsYXllcicsICduYnAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC53b3JkcGVyZmVjdCcsICd3cGQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC53cWQnLCAnd3FkJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQud3Quc3RmJywgJ3N0ZiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnhhcmEnLCBbJ3dlYicsICd4YXInXV0sXG4gICAgWydhcHBsaWNhdGlvbi92bmQueGZkbCcsICd4ZmRsJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQueWFtYWhhLmh2LWRpYycsICdodmQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC55YW1haGEuaHYtc2NyaXB0JywgJ2h2cyddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi12b2ljZScsICdodnAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0JywgJ29zZiddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnlhbWFoYS5vcGVuc2NvcmVmb3JtYXQub3NmcHZnK3htbCcsICdvc2ZwdmcnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1hdWRpbycsICdzYWYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1waHJhc2UnLCAnc3BmJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQueWVsbG93cml2ZXItY3VzdG9tLW1lbnUnLCAnY21wJ10sXG4gICAgWydhcHBsaWNhdGlvbi92bmQuenVsJywgJ3ppciddLFxuICAgIFsnYXBwbGljYXRpb24vdm5kLnp6YXp6LmRlY2sreG1sJywgJ3pheiddLFxuICAgIFsnYXBwbGljYXRpb24vdm9jYWx0ZWMtbWVkaWEtZGVzYycsICd2bWQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ZvY2FsdGVjLW1lZGlhLWZpbGUnLCAndm1mJ10sXG4gICAgWydhcHBsaWNhdGlvbi92b2ljZXhtbCt4bWwnLCAndnhtbCddLFxuICAgIFsnYXBwbGljYXRpb24vd2lkZ2V0JywgJ3dndCddLFxuICAgIFsnYXBwbGljYXRpb24vd2luaGxwJywgJ2hscCddLFxuICAgIFsnYXBwbGljYXRpb24vd29yZHBlcmZlY3QnLCBbJ3dwJywgJ3dwNScsICd3cDYnLCAnd3BkJ11dLFxuICAgIFsnYXBwbGljYXRpb24vd29yZHBlcmZlY3Q2LjAnLCBbJ3c2MCcsICd3cDUnXV0sXG4gICAgWydhcHBsaWNhdGlvbi93b3JkcGVyZmVjdDYuMScsICd3NjEnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3dzZGwreG1sJywgJ3dzZGwnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3dzcG9saWN5K3htbCcsICd3c3BvbGljeSddLFxuICAgIFsnYXBwbGljYXRpb24veC0xMjMnLCAnd2sxJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LTd6LWNvbXByZXNzZWQnLCAnN3onXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtYWJpd29yZCcsICdhYncnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtYWNlLWNvbXByZXNzZWQnLCAnYWNlJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWFpbScsICdhaW0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtYXV0aG9yd2FyZS1iaW4nLCAnYWFiJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWF1dGhvcndhcmUtbWFwJywgJ2FhbSddLFxuICAgIFsnYXBwbGljYXRpb24veC1hdXRob3J3YXJlLXNlZycsICdhYXMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtYmNwaW8nLCAnYmNwaW8nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtYmluYXJ5JywgJ2JpbiddLFxuICAgIFsnYXBwbGljYXRpb24veC1iaW5oZXg0MCcsICdocXgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtYml0dG9ycmVudCcsICd0b3JyZW50J10sXG4gICAgWydhcHBsaWNhdGlvbi94LWJzaCcsIFsnYnNoJywgJ3NoJywgJ3NoYXInXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LWJ5dGVjb2RlLmVsaXNwJywgJ2VsYyddLFxuICAgIFsnYXBwbGljYXRpb24veC1ieXRlY29kZS5weXRob24nLCAncHljJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWJ6aXAnLCAnYnonXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtYnppcDInLCBbJ2JveicsICdiejInXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LWNkZicsICdjZGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtY2RsaW5rJywgJ3ZjZCddLFxuICAgIFsnYXBwbGljYXRpb24veC1jaGF0JywgWydjaGEnLCAnY2hhdCddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtY2hlc3MtcGduJywgJ3BnbiddLFxuICAgIFsnYXBwbGljYXRpb24veC1jbXUtcmFzdGVyJywgJ3JhcyddLFxuICAgIFsnYXBwbGljYXRpb24veC1jb2NvYScsICdjY28nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtY29tcGFjdHBybycsICdjcHQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtY29tcHJlc3MnLCAneiddLFxuICAgIFsnYXBwbGljYXRpb24veC1jb21wcmVzc2VkJywgWyd0Z3onLCAnZ3onLCAneicsICd6aXAnXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LWNvbmZlcmVuY2UnLCAnbnNjJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWNwaW8nLCAnY3BpbyddLFxuICAgIFsnYXBwbGljYXRpb24veC1jcHQnLCAnY3B0J10sXG4gICAgWydhcHBsaWNhdGlvbi94LWNzaCcsICdjc2gnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZGViaWFuLXBhY2thZ2UnLCAnZGViJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWRlZXB2JywgJ2RlZXB2J10sXG4gICAgWydhcHBsaWNhdGlvbi94LWRpcmVjdG9yJywgWydkaXInLCAnZGNyJywgJ2R4ciddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZG9vbScsICd3YWQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZHRibmN4K3htbCcsICduY3gnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZHRib29rK3htbCcsICdkdGInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZHRicmVzb3VyY2UreG1sJywgJ3JlcyddLFxuICAgIFsnYXBwbGljYXRpb24veC1kdmknLCAnZHZpJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWVsYycsICdlbGMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZW52b3knLCBbJ2VudicsICdldnknXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LWVzcmVoYmVyJywgJ2VzJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWV4Y2VsJywgWyd4bHMnLCAneGxhJywgJ3hsYicsICd4bGMnLCAneGxkJywgJ3hsaycsICd4bGwnLCAneGxtJywgJ3hsdCcsICd4bHYnLCAneGx3J11dLFxuICAgIFsnYXBwbGljYXRpb24veC1mb250LWJkZicsICdiZGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZm9udC1naG9zdHNjcmlwdCcsICdnc2YnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZm9udC1saW51eC1wc2YnLCAncHNmJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWZvbnQtb3RmJywgJ290ZiddLFxuICAgIFsnYXBwbGljYXRpb24veC1mb250LXBjZicsICdwY2YnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZm9udC1zbmYnLCAnc25mJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWZvbnQtdHRmJywgJ3R0ZiddLFxuICAgIFsnYXBwbGljYXRpb24veC1mb250LXR5cGUxJywgJ3BmYSddLFxuICAgIFsnYXBwbGljYXRpb24veC1mb250LXdvZmYnLCAnd29mZiddLFxuICAgIFsnYXBwbGljYXRpb24veC1mcmFtZScsICdtaWYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZnJlZWxhbmNlJywgJ3ByZSddLFxuICAgIFsnYXBwbGljYXRpb24veC1mdXR1cmVzcGxhc2gnLCAnc3BsJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWdudW1lcmljJywgJ2dudW1lcmljJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWdzcCcsICdnc3AnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZ3NzJywgJ2dzcyddLFxuICAgIFsnYXBwbGljYXRpb24veC1ndGFyJywgJ2d0YXInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtZ3ppcCcsIFsnZ3onLCAnZ3ppcCddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtaGRmJywgJ2hkZiddLFxuICAgIFsnYXBwbGljYXRpb24veC1oZWxwZmlsZScsIFsnaGVscCcsICdobHAnXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LWh0dHBkLWltYXAnLCAnaW1hcCddLFxuICAgIFsnYXBwbGljYXRpb24veC1pbWEnLCAnaW1hJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWludGVybmV0LXNpZ251cCcsIFsnaW5zJywgJ2lzcCddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtaW50ZXJuZXR0LXNpZ251cCcsICdpbnMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtaW52ZW50b3InLCAnaXYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtaXAyJywgJ2lwJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWlwaG9uZScsICdpaWknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtamF2YS1jbGFzcycsICdjbGFzcyddLFxuICAgIFsnYXBwbGljYXRpb24veC1qYXZhLWNvbW1lcmNlJywgJ2pjbSddLFxuICAgIFsnYXBwbGljYXRpb24veC1qYXZhLWpubHAtZmlsZScsICdqbmxwJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQnLCAnanMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gta29hbicsIFsnc2tkJywgJ3NrbScsICdza3AnLCAnc2t0J11dLFxuICAgIFsnYXBwbGljYXRpb24veC1rc2gnLCAna3NoJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWxhdGV4JywgWydsYXRleCcsICdsdHgnXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LWxoYScsICdsaGEnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbGlzcCcsICdsc3AnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbGl2ZXNjcmVlbicsICdpdnknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbG90dXMnLCAnd3ExJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWxvdHVzc2NyZWVuY2FtJywgJ3NjbSddLFxuICAgIFsnYXBwbGljYXRpb24veC1semgnLCAnbHpoJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LWx6eCcsICdsengnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbWFjLWJpbmhleDQwJywgJ2hxeCddLFxuICAgIFsnYXBwbGljYXRpb24veC1tYWNiaW5hcnknLCAnYmluJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LW1hZ2ljLWNhcC1wYWNrYWdlLTEuMCcsICdtYyQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbWF0aGNhZCcsICdtY2QnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbWVtZScsICdtbSddLFxuICAgIFsnYXBwbGljYXRpb24veC1taWRpJywgWydtaWQnLCAnbWlkaSddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbWlmJywgJ21pZiddLFxuICAgIFsnYXBwbGljYXRpb24veC1taXgtdHJhbnNmZXInLCAnbml4J10sXG4gICAgWydhcHBsaWNhdGlvbi94LW1vYmlwb2NrZXQtZWJvb2snLCAncHJjJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LW1wbGF5ZXIyJywgJ2FzeCddLFxuICAgIFsnYXBwbGljYXRpb24veC1tcy1hcHBsaWNhdGlvbicsICdhcHBsaWNhdGlvbiddLFxuICAgIFsnYXBwbGljYXRpb24veC1tcy13bWQnLCAnd21kJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LW1zLXdteicsICd3bXonXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbXMteGJhcCcsICd4YmFwJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LW1zYWNjZXNzJywgJ21kYiddLFxuICAgIFsnYXBwbGljYXRpb24veC1tc2JpbmRlcicsICdvYmQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbXNjYXJkZmlsZScsICdjcmQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbXNjbGlwJywgJ2NscCddLFxuICAgIFsnYXBwbGljYXRpb24veC1tc2Rvd25sb2FkJywgWydleGUnLCAnZGxsJ11dLFxuICAgIFsnYXBwbGljYXRpb24veC1tc2V4Y2VsJywgWyd4bHMnLCAneGxhJywgJ3hsdyddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbXNtZWRpYXZpZXcnLCBbJ212YicsICdtMTMnLCAnbTE0J11dLFxuICAgIFsnYXBwbGljYXRpb24veC1tc21ldGFmaWxlJywgJ3dtZiddLFxuICAgIFsnYXBwbGljYXRpb24veC1tc21vbmV5JywgJ21ueSddLFxuICAgIFsnYXBwbGljYXRpb24veC1tc3Bvd2VycG9pbnQnLCAncHB0J10sXG4gICAgWydhcHBsaWNhdGlvbi94LW1zcHVibGlzaGVyJywgJ3B1YiddLFxuICAgIFsnYXBwbGljYXRpb24veC1tc3NjaGVkdWxlJywgJ3NjZCddLFxuICAgIFsnYXBwbGljYXRpb24veC1tc3Rlcm1pbmFsJywgJ3RybSddLFxuICAgIFsnYXBwbGljYXRpb24veC1tc3dyaXRlJywgJ3dyaSddLFxuICAgIFsnYXBwbGljYXRpb24veC1uYXZpLWFuaW1hdGlvbicsICdhbmknXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbmF2aWRvYycsICdudmQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbmF2aW1hcCcsICdtYXAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbmF2aXN0eWxlJywgJ3N0bCddLFxuICAgIFsnYXBwbGljYXRpb24veC1uZXRjZGYnLCBbJ2NkZicsICduYyddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtbmV3dG9uLWNvbXBhdGlibGUtcGtnJywgJ3BrZyddLFxuICAgIFsnYXBwbGljYXRpb24veC1ub2tpYS05MDAwLWNvbW11bmljYXRvci1hZGQtb24tc29mdHdhcmUnLCAnYW9zJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LW9tYycsICdvbWMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtb21jZGF0YW1ha2VyJywgJ29tY2QnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtb21jcmVnZXJhdG9yJywgJ29tY3InXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtcGFnZW1ha2VyJywgWydwbTQnLCAncG01J11dLFxuICAgIFsnYXBwbGljYXRpb24veC1wY2wnLCAncGNsJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXBlcmZtb24nLCBbJ3BtYScsICdwbWMnLCAncG1sJywgJ3BtcicsICdwbXcnXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LXBpeGNsc2NyaXB0JywgJ3BseCddLFxuICAgIFsnYXBwbGljYXRpb24veC1wa2NzMTAnLCAncDEwJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXBrY3MxMicsIFsncDEyJywgJ3BmeCddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzJywgWydwN2InLCAnc3BjJ11dLFxuICAgIFsnYXBwbGljYXRpb24veC1wa2NzNy1jZXJ0cmVxcmVzcCcsICdwN3InXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtcGtjczctbWltZScsIFsncDdtJywgJ3A3YyddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtcGtjczctc2lnbmF0dXJlJywgWydwN3MnLCAncDdhJ11dLFxuICAgIFsnYXBwbGljYXRpb24veC1wb2ludHBsdXMnLCAnY3NzJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXBvcnRhYmxlLWFueW1hcCcsICdwbm0nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtcHJvamVjdCcsIFsnbXBjJywgJ21wdCcsICdtcHYnLCAnbXB4J11dLFxuICAgIFsnYXBwbGljYXRpb24veC1xcHJvJywgJ3diMSddLFxuICAgIFsnYXBwbGljYXRpb24veC1yYXItY29tcHJlc3NlZCcsICdyYXInXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtcnRmJywgJ3J0ZiddLFxuICAgIFsnYXBwbGljYXRpb24veC1zZHAnLCAnc2RwJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXNlYScsICdzZWEnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtc2VlbG9nbycsICdzbCddLFxuICAgIFsnYXBwbGljYXRpb24veC1zaCcsICdzaCddLFxuICAgIFsnYXBwbGljYXRpb24veC1zaGFyJywgWydzaGFyJywgJ3NoJ11dLFxuICAgIFsnYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gnLCAnc3dmJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXNpbHZlcmxpZ2h0LWFwcCcsICd4YXAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtc2l0JywgJ3NpdCddLFxuICAgIFsnYXBwbGljYXRpb24veC1zcHJpdGUnLCBbJ3NwcicsICdzcHJpdGUnXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LXN0dWZmaXQnLCAnc2l0J10sXG4gICAgWydhcHBsaWNhdGlvbi94LXN0dWZmaXR4JywgJ3NpdHgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtc3Y0Y3BpbycsICdzdjRjcGlvJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXN2NGNyYycsICdzdjRjcmMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtdGFyJywgJ3RhciddLFxuICAgIFsnYXBwbGljYXRpb24veC10Ym9vaycsIFsnc2JrJywgJ3RiayddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtdGNsJywgJ3RjbCddLFxuICAgIFsnYXBwbGljYXRpb24veC10ZXgnLCAndGV4J10sXG4gICAgWydhcHBsaWNhdGlvbi94LXRleC10Zm0nLCAndGZtJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXRleGluZm8nLCBbJ3RleGknLCAndGV4aW5mbyddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtdHJvZmYnLCBbJ3JvZmYnLCAndCcsICd0ciddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtdHJvZmYtbWFuJywgJ21hbiddLFxuICAgIFsnYXBwbGljYXRpb24veC10cm9mZi1tZScsICdtZSddLFxuICAgIFsnYXBwbGljYXRpb24veC10cm9mZi1tcycsICdtcyddLFxuICAgIFsnYXBwbGljYXRpb24veC10cm9mZi1tc3ZpZGVvJywgJ2F2aSddLFxuICAgIFsnYXBwbGljYXRpb24veC11c3RhcicsICd1c3RhciddLFxuICAgIFsnYXBwbGljYXRpb24veC12aXNpbycsIFsndnNkJywgJ3ZzdCcsICd2c3cnXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LXZuZC5hdWRpb2V4cGxvc2lvbi5tenonLCAnbXp6J10sXG4gICAgWydhcHBsaWNhdGlvbi94LXZuZC5scy14cGl4JywgJ3hwaXgnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtdnJtbCcsICd2cm1sJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXdhaXMtc291cmNlJywgWydzcmMnLCAnd3NyYyddXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtd2luaGVscCcsICdobHAnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtd2ludGFsaycsICd3dGsnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3gtd29ybGQnLCBbJ3dybCcsICdzdnInXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LXdwd2luJywgJ3dwZCddLFxuICAgIFsnYXBwbGljYXRpb24veC13cmknLCAnd3JpJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXg1MDktY2EtY2VydCcsIFsnY2VyJywgJ2NydCcsICdkZXInXV0sXG4gICAgWydhcHBsaWNhdGlvbi94LXg1MDktdXNlci1jZXJ0JywgJ2NydCddLFxuICAgIFsnYXBwbGljYXRpb24veC14ZmlnJywgJ2ZpZyddLFxuICAgIFsnYXBwbGljYXRpb24veC14cGluc3RhbGwnLCAneHBpJ10sXG4gICAgWydhcHBsaWNhdGlvbi94LXppcC1jb21wcmVzc2VkJywgJ3ppcCddLFxuICAgIFsnYXBwbGljYXRpb24veGNhcC1kaWZmK3htbCcsICd4ZGYnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3hlbmMreG1sJywgJ3hlbmMnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3hodG1sK3htbCcsICd4aHRtbCddLFxuICAgIFsnYXBwbGljYXRpb24veG1sJywgJ3htbCddLFxuICAgIFsnYXBwbGljYXRpb24veG1sLWR0ZCcsICdkdGQnXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3hvcCt4bWwnLCAneG9wJ10sXG4gICAgWydhcHBsaWNhdGlvbi94c2x0K3htbCcsICd4c2x0J10sXG4gICAgWydhcHBsaWNhdGlvbi94c3BmK3htbCcsICd4c3BmJ10sXG4gICAgWydhcHBsaWNhdGlvbi94dit4bWwnLCAnbXhtbCddLFxuICAgIFsnYXBwbGljYXRpb24veWFuZycsICd5YW5nJ10sXG4gICAgWydhcHBsaWNhdGlvbi95aW4reG1sJywgJ3lpbiddLFxuICAgIFsnYXBwbGljYXRpb24veW5kLm1zLXBraXBrbycsICdwa28nXSxcbiAgICBbJ2FwcGxpY2F0aW9uL3ppcCcsICd6aXAnXSxcbiAgICBbJ2F1ZGlvL2FkcGNtJywgJ2FkcCddLFxuICAgIFsnYXVkaW8vYWlmZicsIFsnYWlmZicsICdhaWYnLCAnYWlmYyddXSxcbiAgICBbJ2F1ZGlvL2Jhc2ljJywgWydzbmQnLCAnYXUnXV0sXG4gICAgWydhdWRpby9pdCcsICdpdCddLFxuICAgIFsnYXVkaW8vbWFrZScsIFsnZnVuaycsICdteScsICdwZnVuayddXSxcbiAgICBbJ2F1ZGlvL21ha2UubXkuZnVuaycsICdwZnVuayddLFxuICAgIFsnYXVkaW8vbWlkJywgWydtaWQnLCAncm1pJ11dLFxuICAgIFsnYXVkaW8vbWlkaScsIFsnbWlkaScsICdrYXInLCAnbWlkJ11dLFxuICAgIFsnYXVkaW8vbW9kJywgJ21vZCddLFxuICAgIFsnYXVkaW8vbXA0JywgJ21wNGEnXSxcbiAgICBbJ2F1ZGlvL21wZWcnLCBbJ21wZ2EnLCAnbXAzJywgJ20yYScsICdtcDInLCAnbXBhJywgJ21wZyddXSxcbiAgICBbJ2F1ZGlvL21wZWczJywgJ21wMyddLFxuICAgIFsnYXVkaW8vbnNwYXVkaW8nLCBbJ2xhJywgJ2xtYSddXSxcbiAgICBbJ2F1ZGlvL29nZycsICdvZ2EnXSxcbiAgICBbJ2F1ZGlvL3MzbScsICdzM20nXSxcbiAgICBbJ2F1ZGlvL3RzcC1hdWRpbycsICd0c2knXSxcbiAgICBbJ2F1ZGlvL3RzcGxheWVyJywgJ3RzcCddLFxuICAgIFsnYXVkaW8vdm5kLmRlY2UuYXVkaW8nLCAndXZhJ10sXG4gICAgWydhdWRpby92bmQuZGlnaXRhbC13aW5kcycsICdlb2wnXSxcbiAgICBbJ2F1ZGlvL3ZuZC5kcmEnLCAnZHJhJ10sXG4gICAgWydhdWRpby92bmQuZHRzJywgJ2R0cyddLFxuICAgIFsnYXVkaW8vdm5kLmR0cy5oZCcsICdkdHNoZCddLFxuICAgIFsnYXVkaW8vdm5kLmx1Y2VudC52b2ljZScsICdsdnAnXSxcbiAgICBbJ2F1ZGlvL3ZuZC5tcy1wbGF5cmVhZHkubWVkaWEucHlhJywgJ3B5YSddLFxuICAgIFsnYXVkaW8vdm5kLm51ZXJhLmVjZWxwNDgwMCcsICdlY2VscDQ4MDAnXSxcbiAgICBbJ2F1ZGlvL3ZuZC5udWVyYS5lY2VscDc0NzAnLCAnZWNlbHA3NDcwJ10sXG4gICAgWydhdWRpby92bmQubnVlcmEuZWNlbHA5NjAwJywgJ2VjZWxwOTYwMCddLFxuICAgIFsnYXVkaW8vdm5kLnFjZWxwJywgJ3FjcCddLFxuICAgIFsnYXVkaW8vdm5kLnJpcCcsICdyaXAnXSxcbiAgICBbJ2F1ZGlvL3ZvYycsICd2b2MnXSxcbiAgICBbJ2F1ZGlvL3ZveHdhcmUnLCAndm94J10sXG4gICAgWydhdWRpby93YXYnLCAnd2F2J10sXG4gICAgWydhdWRpby93ZWJtJywgJ3dlYmEnXSxcbiAgICBbJ2F1ZGlvL3gtYWFjJywgJ2FhYyddLFxuICAgIFsnYXVkaW8veC1hZHBjbScsICdzbmQnXSxcbiAgICBbJ2F1ZGlvL3gtYWlmZicsIFsnYWlmZicsICdhaWYnLCAnYWlmYyddXSxcbiAgICBbJ2F1ZGlvL3gtYXUnLCAnYXUnXSxcbiAgICBbJ2F1ZGlvL3gtZ3NtJywgWydnc2QnLCAnZ3NtJ11dLFxuICAgIFsnYXVkaW8veC1qYW0nLCAnamFtJ10sXG4gICAgWydhdWRpby94LWxpdmVhdWRpbycsICdsYW0nXSxcbiAgICBbJ2F1ZGlvL3gtbWlkJywgWydtaWQnLCAnbWlkaSddXSxcbiAgICBbJ2F1ZGlvL3gtbWlkaScsIFsnbWlkaScsICdtaWQnXV0sXG4gICAgWydhdWRpby94LW1vZCcsICdtb2QnXSxcbiAgICBbJ2F1ZGlvL3gtbXBlZycsICdtcDInXSxcbiAgICBbJ2F1ZGlvL3gtbXBlZy0zJywgJ21wMyddLFxuICAgIFsnYXVkaW8veC1tcGVndXJsJywgJ20zdSddLFxuICAgIFsnYXVkaW8veC1tcGVxdXJsJywgJ20zdSddLFxuICAgIFsnYXVkaW8veC1tcy13YXgnLCAnd2F4J10sXG4gICAgWydhdWRpby94LW1zLXdtYScsICd3bWEnXSxcbiAgICBbJ2F1ZGlvL3gtbnNwYXVkaW8nLCBbJ2xhJywgJ2xtYSddXSxcbiAgICBbJ2F1ZGlvL3gtcG4tcmVhbGF1ZGlvJywgWydyYScsICdyYW0nLCAncm0nLCAncm1tJywgJ3JtcCddXSxcbiAgICBbJ2F1ZGlvL3gtcG4tcmVhbGF1ZGlvLXBsdWdpbicsIFsncmEnLCAncm1wJywgJ3JwbSddXSxcbiAgICBbJ2F1ZGlvL3gtcHNpZCcsICdzaWQnXSxcbiAgICBbJ2F1ZGlvL3gtcmVhbGF1ZGlvJywgJ3JhJ10sXG4gICAgWydhdWRpby94LXR3aW52cScsICd2cWYnXSxcbiAgICBbJ2F1ZGlvL3gtdHdpbnZxLXBsdWdpbicsIFsndnFlJywgJ3ZxbCddXSxcbiAgICBbJ2F1ZGlvL3gtdm5kLmF1ZGlvZXhwbG9zaW9uLm1qdWljZW1lZGlhZmlsZScsICdtamYnXSxcbiAgICBbJ2F1ZGlvL3gtdm9jJywgJ3ZvYyddLFxuICAgIFsnYXVkaW8veC13YXYnLCAnd2F2J10sXG4gICAgWydhdWRpby94bScsICd4bSddLFxuICAgIFsnY2hlbWljYWwveC1jZHgnLCAnY2R4J10sXG4gICAgWydjaGVtaWNhbC94LWNpZicsICdjaWYnXSxcbiAgICBbJ2NoZW1pY2FsL3gtY21kZicsICdjbWRmJ10sXG4gICAgWydjaGVtaWNhbC94LWNtbCcsICdjbWwnXSxcbiAgICBbJ2NoZW1pY2FsL3gtY3NtbCcsICdjc21sJ10sXG4gICAgWydjaGVtaWNhbC94LXBkYicsIFsncGRiJywgJ3h5eiddXSxcbiAgICBbJ2NoZW1pY2FsL3gteHl6JywgJ3h5eiddLFxuICAgIFsnZHJhd2luZy94LWR3ZicsICdkd2YnXSxcbiAgICBbJ2ktd29ybGQvaS12cm1sJywgJ2l2ciddLFxuICAgIFsnaW1hZ2UvYm1wJywgWydibXAnLCAnYm0nXV0sXG4gICAgWydpbWFnZS9jZ20nLCAnY2dtJ10sXG4gICAgWydpbWFnZS9jaXMtY29kJywgJ2NvZCddLFxuICAgIFsnaW1hZ2UvY211LXJhc3RlcicsIFsncmFzJywgJ3Jhc3QnXV0sXG4gICAgWydpbWFnZS9maWYnLCAnZmlmJ10sXG4gICAgWydpbWFnZS9mbG9yaWFuJywgWydmbG8nLCAndHVyYm90J11dLFxuICAgIFsnaW1hZ2UvZzNmYXgnLCAnZzMnXSxcbiAgICBbJ2ltYWdlL2dpZicsICdnaWYnXSxcbiAgICBbJ2ltYWdlL2llZicsIFsnaWVmJywgJ2llZnMnXV0sXG4gICAgWydpbWFnZS9qcGVnJywgWydqcGVnJywgJ2pwZScsICdqcGcnLCAnamZpZicsICdqZmlmLXRibmwnXV0sXG4gICAgWydpbWFnZS9qdXR2aXNpb24nLCAnanV0J10sXG4gICAgWydpbWFnZS9rdHgnLCAna3R4J10sXG4gICAgWydpbWFnZS9uYXBscHMnLCBbJ25hcCcsICduYXBscHMnXV0sXG4gICAgWydpbWFnZS9waWN0JywgWydwaWMnLCAncGljdCddXSxcbiAgICBbJ2ltYWdlL3BpcGVnJywgJ2pmaWYnXSxcbiAgICBbJ2ltYWdlL3BqcGVnJywgWydqZmlmJywgJ2pwZScsICdqcGVnJywgJ2pwZyddXSxcbiAgICBbJ2ltYWdlL3BuZycsIFsncG5nJywgJ3gtcG5nJ11dLFxuICAgIFsnaW1hZ2UvcHJzLmJ0aWYnLCAnYnRpZiddLFxuICAgIFsnaW1hZ2Uvc3ZnK3htbCcsICdzdmcnXSxcbiAgICBbJ2ltYWdlL3RpZmYnLCBbJ3RpZicsICd0aWZmJ11dLFxuICAgIFsnaW1hZ2UvdmFzYScsICdtY2YnXSxcbiAgICBbJ2ltYWdlL3ZuZC5hZG9iZS5waG90b3Nob3AnLCAncHNkJ10sXG4gICAgWydpbWFnZS92bmQuZGVjZS5ncmFwaGljJywgJ3V2aSddLFxuICAgIFsnaW1hZ2Uvdm5kLmRqdnUnLCAnZGp2dSddLFxuICAgIFsnaW1hZ2Uvdm5kLmR2Yi5zdWJ0aXRsZScsICdzdWInXSxcbiAgICBbJ2ltYWdlL3ZuZC5kd2cnLCBbJ2R3ZycsICdkeGYnLCAnc3ZmJ11dLFxuICAgIFsnaW1hZ2Uvdm5kLmR4ZicsICdkeGYnXSxcbiAgICBbJ2ltYWdlL3ZuZC5mYXN0Ymlkc2hlZXQnLCAnZmJzJ10sXG4gICAgWydpbWFnZS92bmQuZnB4JywgJ2ZweCddLFxuICAgIFsnaW1hZ2Uvdm5kLmZzdCcsICdmc3QnXSxcbiAgICBbJ2ltYWdlL3ZuZC5mdWppeGVyb3guZWRtaWNzLW1tcicsICdtbXInXSxcbiAgICBbJ2ltYWdlL3ZuZC5mdWppeGVyb3guZWRtaWNzLXJsYycsICdybGMnXSxcbiAgICBbJ2ltYWdlL3ZuZC5tcy1tb2RpJywgJ21kaSddLFxuICAgIFsnaW1hZ2Uvdm5kLm5ldC1mcHgnLCBbJ2ZweCcsICducHgnXV0sXG4gICAgWydpbWFnZS92bmQucm4tcmVhbGZsYXNoJywgJ3JmJ10sXG4gICAgWydpbWFnZS92bmQucm4tcmVhbHBpeCcsICdycCddLFxuICAgIFsnaW1hZ2Uvdm5kLndhcC53Ym1wJywgJ3dibXAnXSxcbiAgICBbJ2ltYWdlL3ZuZC54aWZmJywgJ3hpZiddLFxuICAgIFsnaW1hZ2Uvd2VicCcsICd3ZWJwJ10sXG4gICAgWydpbWFnZS94LWNtdS1yYXN0ZXInLCAncmFzJ10sXG4gICAgWydpbWFnZS94LWNteCcsICdjbXgnXSxcbiAgICBbJ2ltYWdlL3gtZHdnJywgWydkd2cnLCAnZHhmJywgJ3N2ZiddXSxcbiAgICBbJ2ltYWdlL3gtZnJlZWhhbmQnLCAnZmgnXSxcbiAgICBbJ2ltYWdlL3gtaWNvbicsICdpY28nXSxcbiAgICBbJ2ltYWdlL3gtamcnLCAnYXJ0J10sXG4gICAgWydpbWFnZS94LWpwcycsICdqcHMnXSxcbiAgICBbJ2ltYWdlL3gtbmlmZicsIFsnbmlmZicsICduaWYnXV0sXG4gICAgWydpbWFnZS94LXBjeCcsICdwY3gnXSxcbiAgICBbJ2ltYWdlL3gtcGljdCcsIFsncGN0JywgJ3BpYyddXSxcbiAgICBbJ2ltYWdlL3gtcG9ydGFibGUtYW55bWFwJywgJ3BubSddLFxuICAgIFsnaW1hZ2UveC1wb3J0YWJsZS1iaXRtYXAnLCAncGJtJ10sXG4gICAgWydpbWFnZS94LXBvcnRhYmxlLWdyYXltYXAnLCAncGdtJ10sXG4gICAgWydpbWFnZS94LXBvcnRhYmxlLWdyZXltYXAnLCAncGdtJ10sXG4gICAgWydpbWFnZS94LXBvcnRhYmxlLXBpeG1hcCcsICdwcG0nXSxcbiAgICBbJ2ltYWdlL3gtcXVpY2t0aW1lJywgWydxaWYnLCAncXRpJywgJ3F0aWYnXV0sXG4gICAgWydpbWFnZS94LXJnYicsICdyZ2InXSxcbiAgICBbJ2ltYWdlL3gtdGlmZicsIFsndGlmJywgJ3RpZmYnXV0sXG4gICAgWydpbWFnZS94LXdpbmRvd3MtYm1wJywgJ2JtcCddLFxuICAgIFsnaW1hZ2UveC14Yml0bWFwJywgJ3hibSddLFxuICAgIFsnaW1hZ2UveC14Ym0nLCAneGJtJ10sXG4gICAgWydpbWFnZS94LXhwaXhtYXAnLCBbJ3hwbScsICdwbSddXSxcbiAgICBbJ2ltYWdlL3gteHdkJywgJ3h3ZCddLFxuICAgIFsnaW1hZ2UveC14d2luZG93ZHVtcCcsICd4d2QnXSxcbiAgICBbJ2ltYWdlL3hibScsICd4Ym0nXSxcbiAgICBbJ2ltYWdlL3hwbScsICd4cG0nXSxcbiAgICBbJ21lc3NhZ2UvcmZjODIyJywgWydlbWwnLCAnbWh0JywgJ21odG1sJywgJ253cycsICdtaW1lJ11dLFxuICAgIFsnbW9kZWwvaWdlcycsIFsnaWdlcycsICdpZ3MnXV0sXG4gICAgWydtb2RlbC9tZXNoJywgJ21zaCddLFxuICAgIFsnbW9kZWwvdm5kLmNvbGxhZGEreG1sJywgJ2RhZSddLFxuICAgIFsnbW9kZWwvdm5kLmR3ZicsICdkd2YnXSxcbiAgICBbJ21vZGVsL3ZuZC5nZGwnLCAnZ2RsJ10sXG4gICAgWydtb2RlbC92bmQuZ3R3JywgJ2d0dyddLFxuICAgIFsnbW9kZWwvdm5kLm10cycsICdtdHMnXSxcbiAgICBbJ21vZGVsL3ZuZC52dHUnLCAndnR1J10sXG4gICAgWydtb2RlbC92cm1sJywgWyd2cm1sJywgJ3dybCcsICd3cnonXV0sXG4gICAgWydtb2RlbC94LXBvdicsICdwb3YnXSxcbiAgICBbJ211bHRpcGFydC94LWd6aXAnLCAnZ3ppcCddLFxuICAgIFsnbXVsdGlwYXJ0L3gtdXN0YXInLCAndXN0YXInXSxcbiAgICBbJ211bHRpcGFydC94LXppcCcsICd6aXAnXSxcbiAgICBbJ211c2ljL2NyZXNjZW5kbycsIFsnbWlkJywgJ21pZGknXV0sXG4gICAgWydtdXNpYy94LWthcmFva2UnLCAna2FyJ10sXG4gICAgWydwYWxlb3Z1L3gtcHYnLCAncHZ1J10sXG4gICAgWyd0ZXh0L2FzcCcsICdhc3AnXSxcbiAgICBbJ3RleHQvY2FsZW5kYXInLCAnaWNzJ10sXG4gICAgWyd0ZXh0L2NzcycsICdjc3MnXSxcbiAgICBbJ3RleHQvY3N2JywgJ2NzdiddLFxuICAgIFsndGV4dC9lY21hc2NyaXB0JywgJ2pzJ10sXG4gICAgWyd0ZXh0L2gzMjMnLCAnMzIzJ10sXG4gICAgWyd0ZXh0L2h0bWwnLCBbJ2h0bWwnLCAnaHRtJywgJ3N0bScsICdhY2dpJywgJ2h0bWxzJywgJ2h0eCcsICdzaHRtbCddXSxcbiAgICBbJ3RleHQvaXVscycsICd1bHMnXSxcbiAgICBbJ3RleHQvamF2YXNjcmlwdCcsICdqcyddLFxuICAgIFsndGV4dC9tY2YnLCAnbWNmJ10sXG4gICAgWyd0ZXh0L24zJywgJ24zJ10sXG4gICAgWyd0ZXh0L3Bhc2NhbCcsICdwYXMnXSxcbiAgICBbXG4gICAgICAgICd0ZXh0L3BsYWluJyxcbiAgICAgICAgW1xuICAgICAgICAgICAgJ3R4dCcsXG4gICAgICAgICAgICAnYmFzJyxcbiAgICAgICAgICAgICdjJyxcbiAgICAgICAgICAgICdoJyxcbiAgICAgICAgICAgICdjKysnLFxuICAgICAgICAgICAgJ2NjJyxcbiAgICAgICAgICAgICdjb20nLFxuICAgICAgICAgICAgJ2NvbmYnLFxuICAgICAgICAgICAgJ2N4eCcsXG4gICAgICAgICAgICAnZGVmJyxcbiAgICAgICAgICAgICdmJyxcbiAgICAgICAgICAgICdmOTAnLFxuICAgICAgICAgICAgJ2ZvcicsXG4gICAgICAgICAgICAnZycsXG4gICAgICAgICAgICAnaGgnLFxuICAgICAgICAgICAgJ2lkYycsXG4gICAgICAgICAgICAnamF2JyxcbiAgICAgICAgICAgICdqYXZhJyxcbiAgICAgICAgICAgICdsaXN0JyxcbiAgICAgICAgICAgICdsb2cnLFxuICAgICAgICAgICAgJ2xzdCcsXG4gICAgICAgICAgICAnbScsXG4gICAgICAgICAgICAnbWFyJyxcbiAgICAgICAgICAgICdwbCcsXG4gICAgICAgICAgICAnc2RtbCcsXG4gICAgICAgICAgICAndGV4dCdcbiAgICAgICAgXVxuICAgIF0sXG4gICAgWyd0ZXh0L3BsYWluLWJhcycsICdwYXInXSxcbiAgICBbJ3RleHQvcHJzLmxpbmVzLnRhZycsICdkc2MnXSxcbiAgICBbJ3RleHQvcmljaHRleHQnLCBbJ3J0eCcsICdydCcsICdydGYnXV0sXG4gICAgWyd0ZXh0L3NjcmlwbGV0JywgJ3dzYyddLFxuICAgIFsndGV4dC9zY3JpcHRsZXQnLCAnc2N0J10sXG4gICAgWyd0ZXh0L3NnbWwnLCBbJ3NnbScsICdzZ21sJ11dLFxuICAgIFsndGV4dC90YWItc2VwYXJhdGVkLXZhbHVlcycsICd0c3YnXSxcbiAgICBbJ3RleHQvdHJvZmYnLCAndCddLFxuICAgIFsndGV4dC90dXJ0bGUnLCAndHRsJ10sXG4gICAgWyd0ZXh0L3VyaS1saXN0JywgWyd1bmknLCAndW5pcycsICd1cmknLCAndXJpcyddXSxcbiAgICBbJ3RleHQvdm5kLmFiYycsICdhYmMnXSxcbiAgICBbJ3RleHQvdm5kLmN1cmwnLCAnY3VybCddLFxuICAgIFsndGV4dC92bmQuY3VybC5kY3VybCcsICdkY3VybCddLFxuICAgIFsndGV4dC92bmQuY3VybC5tY3VybCcsICdtY3VybCddLFxuICAgIFsndGV4dC92bmQuY3VybC5zY3VybCcsICdzY3VybCddLFxuICAgIFsndGV4dC92bmQuZmx5JywgJ2ZseSddLFxuICAgIFsndGV4dC92bmQuZm1pLmZsZXhzdG9yJywgJ2ZseCddLFxuICAgIFsndGV4dC92bmQuZ3JhcGh2aXonLCAnZ3YnXSxcbiAgICBbJ3RleHQvdm5kLmluM2QuM2RtbCcsICczZG1sJ10sXG4gICAgWyd0ZXh0L3ZuZC5pbjNkLnNwb3QnLCAnc3BvdCddLFxuICAgIFsndGV4dC92bmQucm4tcmVhbHRleHQnLCAncnQnXSxcbiAgICBbJ3RleHQvdm5kLnN1bi5qMm1lLmFwcC1kZXNjcmlwdG9yJywgJ2phZCddLFxuICAgIFsndGV4dC92bmQud2FwLndtbCcsICd3bWwnXSxcbiAgICBbJ3RleHQvdm5kLndhcC53bWxzY3JpcHQnLCAnd21scyddLFxuICAgIFsndGV4dC93ZWJ2aWV3aHRtbCcsICdodHQnXSxcbiAgICBbJ3RleHQveC1hc20nLCBbJ2FzbScsICdzJ11dLFxuICAgIFsndGV4dC94LWF1ZGlvc29mdC1pbnRyYScsICdhaXAnXSxcbiAgICBbJ3RleHQveC1jJywgWydjJywgJ2NjJywgJ2NwcCddXSxcbiAgICBbJ3RleHQveC1jb21wb25lbnQnLCAnaHRjJ10sXG4gICAgWyd0ZXh0L3gtZm9ydHJhbicsIFsnZm9yJywgJ2YnLCAnZjc3JywgJ2Y5MCddXSxcbiAgICBbJ3RleHQveC1oJywgWydoJywgJ2hoJ11dLFxuICAgIFsndGV4dC94LWphdmEtc291cmNlJywgWydqYXZhJywgJ2phdiddXSxcbiAgICBbJ3RleHQveC1qYXZhLXNvdXJjZSxqYXZhJywgJ2phdmEnXSxcbiAgICBbJ3RleHQveC1sYS1hc2YnLCAnbHN4J10sXG4gICAgWyd0ZXh0L3gtbScsICdtJ10sXG4gICAgWyd0ZXh0L3gtcGFzY2FsJywgJ3AnXSxcbiAgICBbJ3RleHQveC1zY3JpcHQnLCAnaGxiJ10sXG4gICAgWyd0ZXh0L3gtc2NyaXB0LmNzaCcsICdjc2gnXSxcbiAgICBbJ3RleHQveC1zY3JpcHQuZWxpc3AnLCAnZWwnXSxcbiAgICBbJ3RleHQveC1zY3JpcHQuZ3VpbGUnLCAnc2NtJ10sXG4gICAgWyd0ZXh0L3gtc2NyaXB0LmtzaCcsICdrc2gnXSxcbiAgICBbJ3RleHQveC1zY3JpcHQubGlzcCcsICdsc3AnXSxcbiAgICBbJ3RleHQveC1zY3JpcHQucGVybCcsICdwbCddLFxuICAgIFsndGV4dC94LXNjcmlwdC5wZXJsLW1vZHVsZScsICdwbSddLFxuICAgIFsndGV4dC94LXNjcmlwdC5waHl0b24nLCAncHknXSxcbiAgICBbJ3RleHQveC1zY3JpcHQucmV4eCcsICdyZXh4J10sXG4gICAgWyd0ZXh0L3gtc2NyaXB0LnNjaGVtZScsICdzY20nXSxcbiAgICBbJ3RleHQveC1zY3JpcHQuc2gnLCAnc2gnXSxcbiAgICBbJ3RleHQveC1zY3JpcHQudGNsJywgJ3RjbCddLFxuICAgIFsndGV4dC94LXNjcmlwdC50Y3NoJywgJ3Rjc2gnXSxcbiAgICBbJ3RleHQveC1zY3JpcHQuenNoJywgJ3pzaCddLFxuICAgIFsndGV4dC94LXNlcnZlci1wYXJzZWQtaHRtbCcsIFsnc2h0bWwnLCAnc3NpJ11dLFxuICAgIFsndGV4dC94LXNldGV4dCcsICdldHgnXSxcbiAgICBbJ3RleHQveC1zZ21sJywgWydzZ20nLCAnc2dtbCddXSxcbiAgICBbJ3RleHQveC1zcGVlY2gnLCBbJ3NwYycsICd0YWxrJ11dLFxuICAgIFsndGV4dC94LXVpbCcsICd1aWwnXSxcbiAgICBbJ3RleHQveC11dWVuY29kZScsIFsndXUnLCAndXVlJ11dLFxuICAgIFsndGV4dC94LXZjYWxlbmRhcicsICd2Y3MnXSxcbiAgICBbJ3RleHQveC12Y2FyZCcsICd2Y2YnXSxcbiAgICBbJ3RleHQveG1sJywgJ3htbCddLFxuICAgIFsndmlkZW8vM2dwcCcsICczZ3AnXSxcbiAgICBbJ3ZpZGVvLzNncHAyJywgJzNnMiddLFxuICAgIFsndmlkZW8vYW5pbWFmbGV4JywgJ2FmbCddLFxuICAgIFsndmlkZW8vYXZpJywgJ2F2aSddLFxuICAgIFsndmlkZW8vYXZzLXZpZGVvJywgJ2F2cyddLFxuICAgIFsndmlkZW8vZGwnLCAnZGwnXSxcbiAgICBbJ3ZpZGVvL2ZsaScsICdmbGknXSxcbiAgICBbJ3ZpZGVvL2dsJywgJ2dsJ10sXG4gICAgWyd2aWRlby9oMjYxJywgJ2gyNjEnXSxcbiAgICBbJ3ZpZGVvL2gyNjMnLCAnaDI2MyddLFxuICAgIFsndmlkZW8vaDI2NCcsICdoMjY0J10sXG4gICAgWyd2aWRlby9qcGVnJywgJ2pwZ3YnXSxcbiAgICBbJ3ZpZGVvL2pwbScsICdqcG0nXSxcbiAgICBbJ3ZpZGVvL21qMicsICdtajInXSxcbiAgICBbJ3ZpZGVvL21wNCcsICdtcDQnXSxcbiAgICBbJ3ZpZGVvL21wZWcnLCBbJ21wZWcnLCAnbXAyJywgJ21wYScsICdtcGUnLCAnbXBnJywgJ21wdjInLCAnbTF2JywgJ20ydicsICdtcDMnXV0sXG4gICAgWyd2aWRlby9tc3ZpZGVvJywgJ2F2aSddLFxuICAgIFsndmlkZW8vb2dnJywgJ29ndiddLFxuICAgIFsndmlkZW8vcXVpY2t0aW1lJywgWydtb3YnLCAncXQnLCAnbW9vdiddXSxcbiAgICBbJ3ZpZGVvL3ZkbycsICd2ZG8nXSxcbiAgICBbJ3ZpZGVvL3Zpdm8nLCBbJ3ZpdicsICd2aXZvJ11dLFxuICAgIFsndmlkZW8vdm5kLmRlY2UuaGQnLCAndXZoJ10sXG4gICAgWyd2aWRlby92bmQuZGVjZS5tb2JpbGUnLCAndXZtJ10sXG4gICAgWyd2aWRlby92bmQuZGVjZS5wZCcsICd1dnAnXSxcbiAgICBbJ3ZpZGVvL3ZuZC5kZWNlLnNkJywgJ3V2cyddLFxuICAgIFsndmlkZW8vdm5kLmRlY2UudmlkZW8nLCAndXZ2J10sXG4gICAgWyd2aWRlby92bmQuZnZ0JywgJ2Z2dCddLFxuICAgIFsndmlkZW8vdm5kLm1wZWd1cmwnLCAnbXh1J10sXG4gICAgWyd2aWRlby92bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5dicsICdweXYnXSxcbiAgICBbJ3ZpZGVvL3ZuZC5ybi1yZWFsdmlkZW8nLCAncnYnXSxcbiAgICBbJ3ZpZGVvL3ZuZC51dnZ1Lm1wNCcsICd1dnUnXSxcbiAgICBbJ3ZpZGVvL3ZuZC52aXZvJywgWyd2aXYnLCAndml2byddXSxcbiAgICBbJ3ZpZGVvL3Zvc2FpYycsICd2b3MnXSxcbiAgICBbJ3ZpZGVvL3dlYm0nLCAnd2VibSddLFxuICAgIFsndmlkZW8veC1hbXQtZGVtb3J1bicsICd4ZHInXSxcbiAgICBbJ3ZpZGVvL3gtYW10LXNob3dydW4nLCAneHNyJ10sXG4gICAgWyd2aWRlby94LWF0b21pYzNkLWZlYXR1cmUnLCAnZm1mJ10sXG4gICAgWyd2aWRlby94LWRsJywgJ2RsJ10sXG4gICAgWyd2aWRlby94LWR2JywgWydkaWYnLCAnZHYnXV0sXG4gICAgWyd2aWRlby94LWY0dicsICdmNHYnXSxcbiAgICBbJ3ZpZGVvL3gtZmxpJywgJ2ZsaSddLFxuICAgIFsndmlkZW8veC1mbHYnLCAnZmx2J10sXG4gICAgWyd2aWRlby94LWdsJywgJ2dsJ10sXG4gICAgWyd2aWRlby94LWlzdmlkZW8nLCAnaXN1J10sXG4gICAgWyd2aWRlby94LWxhLWFzZicsIFsnbHNmJywgJ2xzeCddXSxcbiAgICBbJ3ZpZGVvL3gtbTR2JywgJ200diddLFxuICAgIFsndmlkZW8veC1tb3Rpb24tanBlZycsICdtanBnJ10sXG4gICAgWyd2aWRlby94LW1wZWcnLCBbJ21wMycsICdtcDInXV0sXG4gICAgWyd2aWRlby94LW1wZXEyYScsICdtcDInXSxcbiAgICBbJ3ZpZGVvL3gtbXMtYXNmJywgWydhc2YnLCAnYXNyJywgJ2FzeCddXSxcbiAgICBbJ3ZpZGVvL3gtbXMtYXNmLXBsdWdpbicsICdhc3gnXSxcbiAgICBbJ3ZpZGVvL3gtbXMtd20nLCAnd20nXSxcbiAgICBbJ3ZpZGVvL3gtbXMtd212JywgJ3dtdiddLFxuICAgIFsndmlkZW8veC1tcy13bXgnLCAnd214J10sXG4gICAgWyd2aWRlby94LW1zLXd2eCcsICd3dngnXSxcbiAgICBbJ3ZpZGVvL3gtbXN2aWRlbycsICdhdmknXSxcbiAgICBbJ3ZpZGVvL3gtcXRjJywgJ3F0YyddLFxuICAgIFsndmlkZW8veC1zY20nLCAnc2NtJ10sXG4gICAgWyd2aWRlby94LXNnaS1tb3ZpZScsIFsnbW92aWUnLCAnbXYnXV0sXG4gICAgWyd3aW5kb3dzL21ldGFmaWxlJywgJ3dtZiddLFxuICAgIFsnd3d3L21pbWUnLCAnbWltZSddLFxuICAgIFsneC1jb25mZXJlbmNlL3gtY29vbHRhbGsnLCAnaWNlJ10sXG4gICAgWyd4LW11c2ljL3gtbWlkaScsIFsnbWlkJywgJ21pZGknXV0sXG4gICAgWyd4LXdvcmxkL3gtM2RtZicsIFsnM2RtJywgJzNkbWYnLCAncWQzJywgJ3FkM2QnXV0sXG4gICAgWyd4LXdvcmxkL3gtc3ZyJywgJ3N2ciddLFxuICAgIFsneC13b3JsZC94LXZybWwnLCBbJ2ZscicsICd2cm1sJywgJ3dybCcsICd3cnonLCAneGFmJywgJ3hvZiddXSxcbiAgICBbJ3gtd29ybGQveC12cnQnLCAndnJ0J10sXG4gICAgWyd4Z2wvZHJhd2luZycsICd4Z3onXSxcbiAgICBbJ3hnbC9tb3ZpZScsICd4bXonXVxuXSk7XG5jb25zdCBleHRlbnNpb25zID0gbmV3IE1hcChbXG4gICAgWycxMjMnLCAnYXBwbGljYXRpb24vdm5kLmxvdHVzLTEtMi0zJ10sXG4gICAgWyczMjMnLCAndGV4dC9oMzIzJ10sXG4gICAgWycqJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnM2RtJywgJ3gtd29ybGQveC0zZG1mJ10sXG4gICAgWyczZG1mJywgJ3gtd29ybGQveC0zZG1mJ10sXG4gICAgWyczZG1sJywgJ3RleHQvdm5kLmluM2QuM2RtbCddLFxuICAgIFsnM2cyJywgJ3ZpZGVvLzNncHAyJ10sXG4gICAgWyczZ3AnLCAndmlkZW8vM2dwcCddLFxuICAgIFsnN3onLCAnYXBwbGljYXRpb24veC03ei1jb21wcmVzc2VkJ10sXG4gICAgWydhJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnYWFiJywgJ2FwcGxpY2F0aW9uL3gtYXV0aG9yd2FyZS1iaW4nXSxcbiAgICBbJ2FhYycsICdhdWRpby94LWFhYyddLFxuICAgIFsnYWFtJywgJ2FwcGxpY2F0aW9uL3gtYXV0aG9yd2FyZS1tYXAnXSxcbiAgICBbJ2FhcycsICdhcHBsaWNhdGlvbi94LWF1dGhvcndhcmUtc2VnJ10sXG4gICAgWydhYmMnLCAndGV4dC92bmQuYWJjJ10sXG4gICAgWydhYncnLCAnYXBwbGljYXRpb24veC1hYml3b3JkJ10sXG4gICAgWydhYycsICdhcHBsaWNhdGlvbi9wa2l4LWF0dHItY2VydCddLFxuICAgIFsnYWNjJywgJ2FwcGxpY2F0aW9uL3ZuZC5hbWVyaWNhbmR5bmFtaWNzLmFjYyddLFxuICAgIFsnYWNlJywgJ2FwcGxpY2F0aW9uL3gtYWNlLWNvbXByZXNzZWQnXSxcbiAgICBbJ2FjZ2knLCAndGV4dC9odG1sJ10sXG4gICAgWydhY3UnLCAnYXBwbGljYXRpb24vdm5kLmFjdWNvYm9sJ10sXG4gICAgWydhY3gnLCAnYXBwbGljYXRpb24vaW50ZXJuZXQtcHJvcGVydHktc3RyZWFtJ10sXG4gICAgWydhZHAnLCAnYXVkaW8vYWRwY20nXSxcbiAgICBbJ2FlcCcsICdhcHBsaWNhdGlvbi92bmQuYXVkaW9ncmFwaCddLFxuICAgIFsnYWZsJywgJ3ZpZGVvL2FuaW1hZmxleCddLFxuICAgIFsnYWZwJywgJ2FwcGxpY2F0aW9uL3ZuZC5pYm0ubW9kY2FwJ10sXG4gICAgWydhaGVhZCcsICdhcHBsaWNhdGlvbi92bmQuYWhlYWQuc3BhY2UnXSxcbiAgICBbJ2FpJywgJ2FwcGxpY2F0aW9uL3Bvc3RzY3JpcHQnXSxcbiAgICBbJ2FpZicsIFsnYXVkaW8vYWlmZicsICdhdWRpby94LWFpZmYnXV0sXG4gICAgWydhaWZjJywgWydhdWRpby9haWZmJywgJ2F1ZGlvL3gtYWlmZiddXSxcbiAgICBbJ2FpZmYnLCBbJ2F1ZGlvL2FpZmYnLCAnYXVkaW8veC1haWZmJ11dLFxuICAgIFsnYWltJywgJ2FwcGxpY2F0aW9uL3gtYWltJ10sXG4gICAgWydhaXAnLCAndGV4dC94LWF1ZGlvc29mdC1pbnRyYSddLFxuICAgIFsnYWlyJywgJ2FwcGxpY2F0aW9uL3ZuZC5hZG9iZS5haXItYXBwbGljYXRpb24taW5zdGFsbGVyLXBhY2thZ2UremlwJ10sXG4gICAgWydhaXQnLCAnYXBwbGljYXRpb24vdm5kLmR2Yi5haXQnXSxcbiAgICBbJ2FtaScsICdhcHBsaWNhdGlvbi92bmQuYW1pZ2EuYW1pJ10sXG4gICAgWydhbmknLCAnYXBwbGljYXRpb24veC1uYXZpLWFuaW1hdGlvbiddLFxuICAgIFsnYW9zJywgJ2FwcGxpY2F0aW9uL3gtbm9raWEtOTAwMC1jb21tdW5pY2F0b3ItYWRkLW9uLXNvZnR3YXJlJ10sXG4gICAgWydhcGsnLCAnYXBwbGljYXRpb24vdm5kLmFuZHJvaWQucGFja2FnZS1hcmNoaXZlJ10sXG4gICAgWydhcHBsaWNhdGlvbicsICdhcHBsaWNhdGlvbi94LW1zLWFwcGxpY2F0aW9uJ10sXG4gICAgWydhcHInLCAnYXBwbGljYXRpb24vdm5kLmxvdHVzLWFwcHJvYWNoJ10sXG4gICAgWydhcHMnLCAnYXBwbGljYXRpb24vbWltZSddLFxuICAgIFsnYXJjJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnYXJqJywgWydhcHBsaWNhdGlvbi9hcmonLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ11dLFxuICAgIFsnYXJ0JywgJ2ltYWdlL3gtamcnXSxcbiAgICBbJ2FzZicsICd2aWRlby94LW1zLWFzZiddLFxuICAgIFsnYXNtJywgJ3RleHQveC1hc20nXSxcbiAgICBbJ2FzbycsICdhcHBsaWNhdGlvbi92bmQuYWNjcGFjLnNpbXBseS5hc28nXSxcbiAgICBbJ2FzcCcsICd0ZXh0L2FzcCddLFxuICAgIFsnYXNyJywgJ3ZpZGVvL3gtbXMtYXNmJ10sXG4gICAgWydhc3gnLCBbJ3ZpZGVvL3gtbXMtYXNmJywgJ2FwcGxpY2F0aW9uL3gtbXBsYXllcjInLCAndmlkZW8veC1tcy1hc2YtcGx1Z2luJ11dLFxuICAgIFsnYXRjJywgJ2FwcGxpY2F0aW9uL3ZuZC5hY3Vjb3JwJ10sXG4gICAgWydhdG9tY2F0JywgJ2FwcGxpY2F0aW9uL2F0b21jYXQreG1sJ10sXG4gICAgWydhdG9tc3ZjJywgJ2FwcGxpY2F0aW9uL2F0b21zdmMreG1sJ10sXG4gICAgWydhdHgnLCAnYXBwbGljYXRpb24vdm5kLmFudGl4LmdhbWUtY29tcG9uZW50J10sXG4gICAgWydhdScsIFsnYXVkaW8vYmFzaWMnLCAnYXVkaW8veC1hdSddXSxcbiAgICBbJ2F2aScsIFsndmlkZW8vYXZpJywgJ3ZpZGVvL21zdmlkZW8nLCAnYXBwbGljYXRpb24veC10cm9mZi1tc3ZpZGVvJywgJ3ZpZGVvL3gtbXN2aWRlbyddXSxcbiAgICBbJ2F2cycsICd2aWRlby9hdnMtdmlkZW8nXSxcbiAgICBbJ2F3JywgJ2FwcGxpY2F0aW9uL2FwcGxpeHdhcmUnXSxcbiAgICBbJ2F4cycsICdhcHBsaWNhdGlvbi9vbGVzY3JpcHQnXSxcbiAgICBbJ2F6ZicsICdhcHBsaWNhdGlvbi92bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpmJ10sXG4gICAgWydhenMnLCAnYXBwbGljYXRpb24vdm5kLmFpcnppcC5maWxlc2VjdXJlLmF6cyddLFxuICAgIFsnYXp3JywgJ2FwcGxpY2F0aW9uL3ZuZC5hbWF6b24uZWJvb2snXSxcbiAgICBbJ2JhcycsICd0ZXh0L3BsYWluJ10sXG4gICAgWydiY3BpbycsICdhcHBsaWNhdGlvbi94LWJjcGlvJ10sXG4gICAgWydiZGYnLCAnYXBwbGljYXRpb24veC1mb250LWJkZiddLFxuICAgIFsnYmRtJywgJ2FwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG0rd2J4bWwnXSxcbiAgICBbJ2JlZCcsICdhcHBsaWNhdGlvbi92bmQucmVhbHZuYy5iZWQnXSxcbiAgICBbJ2JoMicsICdhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c3BycyddLFxuICAgIFsnYmluJywgWydhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLCAnYXBwbGljYXRpb24vbWFjLWJpbmFyeScsICdhcHBsaWNhdGlvbi9tYWNiaW5hcnknLCAnYXBwbGljYXRpb24veC1tYWNiaW5hcnknLCAnYXBwbGljYXRpb24veC1iaW5hcnknXV0sXG4gICAgWydibScsICdpbWFnZS9ibXAnXSxcbiAgICBbJ2JtaScsICdhcHBsaWNhdGlvbi92bmQuYm1pJ10sXG4gICAgWydibXAnLCBbJ2ltYWdlL2JtcCcsICdpbWFnZS94LXdpbmRvd3MtYm1wJ11dLFxuICAgIFsnYm9vJywgJ2FwcGxpY2F0aW9uL2Jvb2snXSxcbiAgICBbJ2Jvb2snLCAnYXBwbGljYXRpb24vYm9vayddLFxuICAgIFsnYm94JywgJ2FwcGxpY2F0aW9uL3ZuZC5wcmV2aWV3c3lzdGVtcy5ib3gnXSxcbiAgICBbJ2JveicsICdhcHBsaWNhdGlvbi94LWJ6aXAyJ10sXG4gICAgWydic2gnLCAnYXBwbGljYXRpb24veC1ic2gnXSxcbiAgICBbJ2J0aWYnLCAnaW1hZ2UvcHJzLmJ0aWYnXSxcbiAgICBbJ2J6JywgJ2FwcGxpY2F0aW9uL3gtYnppcCddLFxuICAgIFsnYnoyJywgJ2FwcGxpY2F0aW9uL3gtYnppcDInXSxcbiAgICBbJ2MnLCBbJ3RleHQvcGxhaW4nLCAndGV4dC94LWMnXV0sXG4gICAgWydjKysnLCAndGV4dC9wbGFpbiddLFxuICAgIFsnYzExYW1jJywgJ2FwcGxpY2F0aW9uL3ZuZC5jbHVldHJ1c3QuY2FydG9tb2JpbGUtY29uZmlnJ10sXG4gICAgWydjMTFhbXonLCAnYXBwbGljYXRpb24vdm5kLmNsdWV0cnVzdC5jYXJ0b21vYmlsZS1jb25maWctcGtnJ10sXG4gICAgWydjNGcnLCAnYXBwbGljYXRpb24vdm5kLmNsb25rLmM0Z3JvdXAnXSxcbiAgICBbJ2NhYicsICdhcHBsaWNhdGlvbi92bmQubXMtY2FiLWNvbXByZXNzZWQnXSxcbiAgICBbJ2NhcicsICdhcHBsaWNhdGlvbi92bmQuY3VybC5jYXInXSxcbiAgICBbJ2NhdCcsIFsnYXBwbGljYXRpb24vdm5kLm1zLXBraXNlY2NhdCcsICdhcHBsaWNhdGlvbi92bmQubXMtcGtpLnNlY2NhdCddXSxcbiAgICBbJ2NjJywgWyd0ZXh0L3BsYWluJywgJ3RleHQveC1jJ11dLFxuICAgIFsnY2NhZCcsICdhcHBsaWNhdGlvbi9jbGFyaXNjYWQnXSxcbiAgICBbJ2NjbycsICdhcHBsaWNhdGlvbi94LWNvY29hJ10sXG4gICAgWydjY3htbCcsICdhcHBsaWNhdGlvbi9jY3htbCt4bWwsJ10sXG4gICAgWydjZGJjbXNnJywgJ2FwcGxpY2F0aW9uL3ZuZC5jb250YWN0LmNtc2cnXSxcbiAgICBbJ2NkZicsIFsnYXBwbGljYXRpb24vY2RmJywgJ2FwcGxpY2F0aW9uL3gtY2RmJywgJ2FwcGxpY2F0aW9uL3gtbmV0Y2RmJ11dLFxuICAgIFsnY2RrZXknLCAnYXBwbGljYXRpb24vdm5kLm1lZGlhc3RhdGlvbi5jZGtleSddLFxuICAgIFsnY2RtaWEnLCAnYXBwbGljYXRpb24vY2RtaS1jYXBhYmlsaXR5J10sXG4gICAgWydjZG1pYycsICdhcHBsaWNhdGlvbi9jZG1pLWNvbnRhaW5lciddLFxuICAgIFsnY2RtaWQnLCAnYXBwbGljYXRpb24vY2RtaS1kb21haW4nXSxcbiAgICBbJ2NkbWlvJywgJ2FwcGxpY2F0aW9uL2NkbWktb2JqZWN0J10sXG4gICAgWydjZG1pcScsICdhcHBsaWNhdGlvbi9jZG1pLXF1ZXVlJ10sXG4gICAgWydjZHgnLCAnY2hlbWljYWwveC1jZHgnXSxcbiAgICBbJ2NkeG1sJywgJ2FwcGxpY2F0aW9uL3ZuZC5jaGVtZHJhdyt4bWwnXSxcbiAgICBbJ2NkeScsICdhcHBsaWNhdGlvbi92bmQuY2luZGVyZWxsYSddLFxuICAgIFsnY2VyJywgWydhcHBsaWNhdGlvbi9wa2l4LWNlcnQnLCAnYXBwbGljYXRpb24veC14NTA5LWNhLWNlcnQnXV0sXG4gICAgWydjZ20nLCAnaW1hZ2UvY2dtJ10sXG4gICAgWydjaGEnLCAnYXBwbGljYXRpb24veC1jaGF0J10sXG4gICAgWydjaGF0JywgJ2FwcGxpY2F0aW9uL3gtY2hhdCddLFxuICAgIFsnY2htJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1odG1saGVscCddLFxuICAgIFsnY2hydCcsICdhcHBsaWNhdGlvbi92bmQua2RlLmtjaGFydCddLFxuICAgIFsnY2lmJywgJ2NoZW1pY2FsL3gtY2lmJ10sXG4gICAgWydjaWknLCAnYXBwbGljYXRpb24vdm5kLmFuc2VyLXdlYi1jZXJ0aWZpY2F0ZS1pc3N1ZS1pbml0aWF0aW9uJ10sXG4gICAgWydjaWwnLCAnYXBwbGljYXRpb24vdm5kLm1zLWFydGdhbHJ5J10sXG4gICAgWydjbGEnLCAnYXBwbGljYXRpb24vdm5kLmNsYXltb3JlJ10sXG4gICAgWydjbGFzcycsIFsnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJywgJ2FwcGxpY2F0aW9uL2phdmEnLCAnYXBwbGljYXRpb24vamF2YS1ieXRlLWNvZGUnLCAnYXBwbGljYXRpb24vamF2YS12bScsICdhcHBsaWNhdGlvbi94LWphdmEtY2xhc3MnXV0sXG4gICAgWydjbGtrJywgJ2FwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLmtleWJvYXJkJ10sXG4gICAgWydjbGtwJywgJ2FwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLnBhbGV0dGUnXSxcbiAgICBbJ2Nsa3QnLCAnYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIudGVtcGxhdGUnXSxcbiAgICBbJ2Nsa3cnLCAnYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIud29yZGJhbmsnXSxcbiAgICBbJ2Nsa3gnLCAnYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXInXSxcbiAgICBbJ2NscCcsICdhcHBsaWNhdGlvbi94LW1zY2xpcCddLFxuICAgIFsnY21jJywgJ2FwcGxpY2F0aW9uL3ZuZC5jb3Ntb2NhbGxlciddLFxuICAgIFsnY21kZicsICdjaGVtaWNhbC94LWNtZGYnXSxcbiAgICBbJ2NtbCcsICdjaGVtaWNhbC94LWNtbCddLFxuICAgIFsnY21wJywgJ2FwcGxpY2F0aW9uL3ZuZC55ZWxsb3dyaXZlci1jdXN0b20tbWVudSddLFxuICAgIFsnY214JywgJ2ltYWdlL3gtY214J10sXG4gICAgWydjb2QnLCBbJ2ltYWdlL2Npcy1jb2QnLCAnYXBwbGljYXRpb24vdm5kLnJpbS5jb2QnXV0sXG4gICAgWydjb20nLCBbJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsICd0ZXh0L3BsYWluJ11dLFxuICAgIFsnY29uZicsICd0ZXh0L3BsYWluJ10sXG4gICAgWydjcGlvJywgJ2FwcGxpY2F0aW9uL3gtY3BpbyddLFxuICAgIFsnY3BwJywgJ3RleHQveC1jJ10sXG4gICAgWydjcHQnLCBbJ2FwcGxpY2F0aW9uL21hYy1jb21wYWN0cHJvJywgJ2FwcGxpY2F0aW9uL3gtY29tcGFjdHBybycsICdhcHBsaWNhdGlvbi94LWNwdCddXSxcbiAgICBbJ2NyZCcsICdhcHBsaWNhdGlvbi94LW1zY2FyZGZpbGUnXSxcbiAgICBbJ2NybCcsIFsnYXBwbGljYXRpb24vcGtpeC1jcmwnLCAnYXBwbGljYXRpb24vcGtjcy1jcmwnXV0sXG4gICAgWydjcnQnLCBbJ2FwcGxpY2F0aW9uL3BraXgtY2VydCcsICdhcHBsaWNhdGlvbi94LXg1MDktdXNlci1jZXJ0JywgJ2FwcGxpY2F0aW9uL3gteDUwOS1jYS1jZXJ0J11dLFxuICAgIFsnY3J5cHRvbm90ZScsICdhcHBsaWNhdGlvbi92bmQucmlnLmNyeXB0b25vdGUnXSxcbiAgICBbJ2NzaCcsIFsndGV4dC94LXNjcmlwdC5jc2gnLCAnYXBwbGljYXRpb24veC1jc2gnXV0sXG4gICAgWydjc21sJywgJ2NoZW1pY2FsL3gtY3NtbCddLFxuICAgIFsnY3NwJywgJ2FwcGxpY2F0aW9uL3ZuZC5jb21tb25zcGFjZSddLFxuICAgIFsnY3NzJywgWyd0ZXh0L2NzcycsICdhcHBsaWNhdGlvbi94LXBvaW50cGx1cyddXSxcbiAgICBbJ2NzdicsICd0ZXh0L2NzdiddLFxuICAgIFsnY3UnLCAnYXBwbGljYXRpb24vY3Utc2VlbWUnXSxcbiAgICBbJ2N1cmwnLCAndGV4dC92bmQuY3VybCddLFxuICAgIFsnY3d3JywgJ2FwcGxpY2F0aW9uL3Bycy5jd3cnXSxcbiAgICBbJ2N4eCcsICd0ZXh0L3BsYWluJ10sXG4gICAgWydkYWUnLCAnbW9kZWwvdm5kLmNvbGxhZGEreG1sJ10sXG4gICAgWydkYWYnLCAnYXBwbGljYXRpb24vdm5kLm1vYml1cy5kYWYnXSxcbiAgICBbJ2Rhdm1vdW50JywgJ2FwcGxpY2F0aW9uL2Rhdm1vdW50K3htbCddLFxuICAgIFsnZGNyJywgJ2FwcGxpY2F0aW9uL3gtZGlyZWN0b3InXSxcbiAgICBbJ2RjdXJsJywgJ3RleHQvdm5kLmN1cmwuZGN1cmwnXSxcbiAgICBbJ2RkMicsICdhcHBsaWNhdGlvbi92bmQub21hLmRkMit4bWwnXSxcbiAgICBbJ2RkZCcsICdhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRkZCddLFxuICAgIFsnZGViJywgJ2FwcGxpY2F0aW9uL3gtZGViaWFuLXBhY2thZ2UnXSxcbiAgICBbJ2RlZXB2JywgJ2FwcGxpY2F0aW9uL3gtZGVlcHYnXSxcbiAgICBbJ2RlZicsICd0ZXh0L3BsYWluJ10sXG4gICAgWydkZXInLCAnYXBwbGljYXRpb24veC14NTA5LWNhLWNlcnQnXSxcbiAgICBbJ2RmYWMnLCAnYXBwbGljYXRpb24vdm5kLmRyZWFtZmFjdG9yeSddLFxuICAgIFsnZGlmJywgJ3ZpZGVvL3gtZHYnXSxcbiAgICBbJ2RpcicsICdhcHBsaWNhdGlvbi94LWRpcmVjdG9yJ10sXG4gICAgWydkaXMnLCAnYXBwbGljYXRpb24vdm5kLm1vYml1cy5kaXMnXSxcbiAgICBbJ2RqdnUnLCAnaW1hZ2Uvdm5kLmRqdnUnXSxcbiAgICBbJ2RsJywgWyd2aWRlby9kbCcsICd2aWRlby94LWRsJ11dLFxuICAgIFsnZGxsJywgJ2FwcGxpY2F0aW9uL3gtbXNkb3dubG9hZCddLFxuICAgIFsnZG1zJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnZG5hJywgJ2FwcGxpY2F0aW9uL3ZuZC5kbmEnXSxcbiAgICBbJ2RvYycsICdhcHBsaWNhdGlvbi9tc3dvcmQnXSxcbiAgICBbJ2RvY20nLCAnYXBwbGljYXRpb24vdm5kLm1zLXdvcmQuZG9jdW1lbnQubWFjcm9lbmFibGVkLjEyJ10sXG4gICAgWydkb2N4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50J10sXG4gICAgWydkb3QnLCAnYXBwbGljYXRpb24vbXN3b3JkJ10sXG4gICAgWydkb3RtJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLnRlbXBsYXRlLm1hY3JvZW5hYmxlZC4xMiddLFxuICAgIFsnZG90eCcsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC50ZW1wbGF0ZSddLFxuICAgIFsnZHAnLCBbJ2FwcGxpY2F0aW9uL2NvbW1vbmdyb3VuZCcsICdhcHBsaWNhdGlvbi92bmQub3NnaS5kcCddXSxcbiAgICBbJ2RwZycsICdhcHBsaWNhdGlvbi92bmQuZHBncmFwaCddLFxuICAgIFsnZHJhJywgJ2F1ZGlvL3ZuZC5kcmEnXSxcbiAgICBbJ2RydycsICdhcHBsaWNhdGlvbi9kcmFmdGluZyddLFxuICAgIFsnZHNjJywgJ3RleHQvcHJzLmxpbmVzLnRhZyddLFxuICAgIFsnZHNzYycsICdhcHBsaWNhdGlvbi9kc3NjK2RlciddLFxuICAgIFsnZHRiJywgJ2FwcGxpY2F0aW9uL3gtZHRib29rK3htbCddLFxuICAgIFsnZHRkJywgJ2FwcGxpY2F0aW9uL3htbC1kdGQnXSxcbiAgICBbJ2R0cycsICdhdWRpby92bmQuZHRzJ10sXG4gICAgWydkdHNoZCcsICdhdWRpby92bmQuZHRzLmhkJ10sXG4gICAgWydkdW1wJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnZHYnLCAndmlkZW8veC1kdiddLFxuICAgIFsnZHZpJywgJ2FwcGxpY2F0aW9uL3gtZHZpJ10sXG4gICAgWydkd2YnLCBbJ21vZGVsL3ZuZC5kd2YnLCAnZHJhd2luZy94LWR3ZiddXSxcbiAgICBbJ2R3ZycsIFsnYXBwbGljYXRpb24vYWNhZCcsICdpbWFnZS92bmQuZHdnJywgJ2ltYWdlL3gtZHdnJ11dLFxuICAgIFsnZHhmJywgWydhcHBsaWNhdGlvbi9keGYnLCAnaW1hZ2Uvdm5kLmR3ZycsICdpbWFnZS92bmQuZHhmJywgJ2ltYWdlL3gtZHdnJ11dLFxuICAgIFsnZHhwJywgJ2FwcGxpY2F0aW9uL3ZuZC5zcG90ZmlyZS5keHAnXSxcbiAgICBbJ2R4cicsICdhcHBsaWNhdGlvbi94LWRpcmVjdG9yJ10sXG4gICAgWydlY2VscDQ4MDAnLCAnYXVkaW8vdm5kLm51ZXJhLmVjZWxwNDgwMCddLFxuICAgIFsnZWNlbHA3NDcwJywgJ2F1ZGlvL3ZuZC5udWVyYS5lY2VscDc0NzAnXSxcbiAgICBbJ2VjZWxwOTYwMCcsICdhdWRpby92bmQubnVlcmEuZWNlbHA5NjAwJ10sXG4gICAgWydlZG0nLCAnYXBwbGljYXRpb24vdm5kLm5vdmFkaWdtLmVkbSddLFxuICAgIFsnZWR4JywgJ2FwcGxpY2F0aW9uL3ZuZC5ub3ZhZGlnbS5lZHgnXSxcbiAgICBbJ2VmaWYnLCAnYXBwbGljYXRpb24vdm5kLnBpY3NlbCddLFxuICAgIFsnZWk2JywgJ2FwcGxpY2F0aW9uL3ZuZC5wZy5vc2FzbGknXSxcbiAgICBbJ2VsJywgJ3RleHQveC1zY3JpcHQuZWxpc3AnXSxcbiAgICBbJ2VsYycsIFsnYXBwbGljYXRpb24veC1lbGMnLCAnYXBwbGljYXRpb24veC1ieXRlY29kZS5lbGlzcCddXSxcbiAgICBbJ2VtbCcsICdtZXNzYWdlL3JmYzgyMiddLFxuICAgIFsnZW1tYScsICdhcHBsaWNhdGlvbi9lbW1hK3htbCddLFxuICAgIFsnZW52JywgJ2FwcGxpY2F0aW9uL3gtZW52b3knXSxcbiAgICBbJ2VvbCcsICdhdWRpby92bmQuZGlnaXRhbC13aW5kcyddLFxuICAgIFsnZW90JywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1mb250b2JqZWN0J10sXG4gICAgWydlcHMnLCAnYXBwbGljYXRpb24vcG9zdHNjcmlwdCddLFxuICAgIFsnZXB1YicsICdhcHBsaWNhdGlvbi9lcHViK3ppcCddLFxuICAgIFsnZXMnLCBbJ2FwcGxpY2F0aW9uL2VjbWFzY3JpcHQnLCAnYXBwbGljYXRpb24veC1lc3JlaGJlciddXSxcbiAgICBbJ2VzMycsICdhcHBsaWNhdGlvbi92bmQuZXN6aWdubzMreG1sJ10sXG4gICAgWydlc2YnLCAnYXBwbGljYXRpb24vdm5kLmVwc29uLmVzZiddLFxuICAgIFsnZXR4JywgJ3RleHQveC1zZXRleHQnXSxcbiAgICBbJ2V2eScsIFsnYXBwbGljYXRpb24vZW52b3knLCAnYXBwbGljYXRpb24veC1lbnZveSddXSxcbiAgICBbJ2V4ZScsIFsnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJywgJ2FwcGxpY2F0aW9uL3gtbXNkb3dubG9hZCddXSxcbiAgICBbJ2V4aScsICdhcHBsaWNhdGlvbi9leGknXSxcbiAgICBbJ2V4dCcsICdhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZXh0J10sXG4gICAgWydlejInLCAnYXBwbGljYXRpb24vdm5kLmV6cGl4LWFsYnVtJ10sXG4gICAgWydlejMnLCAnYXBwbGljYXRpb24vdm5kLmV6cGl4LXBhY2thZ2UnXSxcbiAgICBbJ2YnLCBbJ3RleHQvcGxhaW4nLCAndGV4dC94LWZvcnRyYW4nXV0sXG4gICAgWydmNHYnLCAndmlkZW8veC1mNHYnXSxcbiAgICBbJ2Y3NycsICd0ZXh0L3gtZm9ydHJhbiddLFxuICAgIFsnZjkwJywgWyd0ZXh0L3BsYWluJywgJ3RleHQveC1mb3J0cmFuJ11dLFxuICAgIFsnZmJzJywgJ2ltYWdlL3ZuZC5mYXN0Ymlkc2hlZXQnXSxcbiAgICBbJ2ZjcycsICdhcHBsaWNhdGlvbi92bmQuaXNhYy5mY3MnXSxcbiAgICBbJ2ZkZicsICdhcHBsaWNhdGlvbi92bmQuZmRmJ10sXG4gICAgWydmZV9sYXVuY2gnLCAnYXBwbGljYXRpb24vdm5kLmRlbm92by5mY3NlbGF5b3V0LWxpbmsnXSxcbiAgICBbJ2ZnNScsICdhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c2dwJ10sXG4gICAgWydmaCcsICdpbWFnZS94LWZyZWVoYW5kJ10sXG4gICAgWydmaWYnLCBbJ2FwcGxpY2F0aW9uL2ZyYWN0YWxzJywgJ2ltYWdlL2ZpZiddXSxcbiAgICBbJ2ZpZycsICdhcHBsaWNhdGlvbi94LXhmaWcnXSxcbiAgICBbJ2ZsaScsIFsndmlkZW8vZmxpJywgJ3ZpZGVvL3gtZmxpJ11dLFxuICAgIFsnZmxvJywgWydpbWFnZS9mbG9yaWFuJywgJ2FwcGxpY2F0aW9uL3ZuZC5taWNyb2dyYWZ4LmZsbyddXSxcbiAgICBbJ2ZscicsICd4LXdvcmxkL3gtdnJtbCddLFxuICAgIFsnZmx2JywgJ3ZpZGVvL3gtZmx2J10sXG4gICAgWydmbHcnLCAnYXBwbGljYXRpb24vdm5kLmtkZS5raXZpbyddLFxuICAgIFsnZmx4JywgJ3RleHQvdm5kLmZtaS5mbGV4c3RvciddLFxuICAgIFsnZmx5JywgJ3RleHQvdm5kLmZseSddLFxuICAgIFsnZm0nLCAnYXBwbGljYXRpb24vdm5kLmZyYW1lbWFrZXInXSxcbiAgICBbJ2ZtZicsICd2aWRlby94LWF0b21pYzNkLWZlYXR1cmUnXSxcbiAgICBbJ2ZuYycsICdhcHBsaWNhdGlvbi92bmQuZnJvZ2Fucy5mbmMnXSxcbiAgICBbJ2ZvcicsIFsndGV4dC9wbGFpbicsICd0ZXh0L3gtZm9ydHJhbiddXSxcbiAgICBbJ2ZweCcsIFsnaW1hZ2Uvdm5kLmZweCcsICdpbWFnZS92bmQubmV0LWZweCddXSxcbiAgICBbJ2ZybCcsICdhcHBsaWNhdGlvbi9mcmVlbG9hZGVyJ10sXG4gICAgWydmc2MnLCAnYXBwbGljYXRpb24vdm5kLmZzYy53ZWJsYXVuY2gnXSxcbiAgICBbJ2ZzdCcsICdpbWFnZS92bmQuZnN0J10sXG4gICAgWydmdGMnLCAnYXBwbGljYXRpb24vdm5kLmZsdXh0aW1lLmNsaXAnXSxcbiAgICBbJ2Z0aScsICdhcHBsaWNhdGlvbi92bmQuYW5zZXItd2ViLWZ1bmRzLXRyYW5zZmVyLWluaXRpYXRpb24nXSxcbiAgICBbJ2Z1bmsnLCAnYXVkaW8vbWFrZSddLFxuICAgIFsnZnZ0JywgJ3ZpZGVvL3ZuZC5mdnQnXSxcbiAgICBbJ2Z4cCcsICdhcHBsaWNhdGlvbi92bmQuYWRvYmUuZnhwJ10sXG4gICAgWydmenMnLCAnYXBwbGljYXRpb24vdm5kLmZ1enp5c2hlZXQnXSxcbiAgICBbJ2cnLCAndGV4dC9wbGFpbiddLFxuICAgIFsnZzJ3JywgJ2FwcGxpY2F0aW9uL3ZuZC5nZW9wbGFuJ10sXG4gICAgWydnMycsICdpbWFnZS9nM2ZheCddLFxuICAgIFsnZzN3JywgJ2FwcGxpY2F0aW9uL3ZuZC5nZW9zcGFjZSddLFxuICAgIFsnZ2FjJywgJ2FwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtYWNjb3VudCddLFxuICAgIFsnZ2RsJywgJ21vZGVsL3ZuZC5nZGwnXSxcbiAgICBbJ2dlbycsICdhcHBsaWNhdGlvbi92bmQuZHluYWdlbyddLFxuICAgIFsnZ2V4JywgJ2FwcGxpY2F0aW9uL3ZuZC5nZW9tZXRyeS1leHBsb3JlciddLFxuICAgIFsnZ2diJywgJ2FwcGxpY2F0aW9uL3ZuZC5nZW9nZWJyYS5maWxlJ10sXG4gICAgWydnZ3QnLCAnYXBwbGljYXRpb24vdm5kLmdlb2dlYnJhLnRvb2wnXSxcbiAgICBbJ2doZicsICdhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWhlbHAnXSxcbiAgICBbJ2dpZicsICdpbWFnZS9naWYnXSxcbiAgICBbJ2dpbScsICdhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWlkZW50aXR5LW1lc3NhZ2UnXSxcbiAgICBbJ2dsJywgWyd2aWRlby9nbCcsICd2aWRlby94LWdsJ11dLFxuICAgIFsnZ214JywgJ2FwcGxpY2F0aW9uL3ZuZC5nbXgnXSxcbiAgICBbJ2dudW1lcmljJywgJ2FwcGxpY2F0aW9uL3gtZ251bWVyaWMnXSxcbiAgICBbJ2dwaCcsICdhcHBsaWNhdGlvbi92bmQuZmxvZ3JhcGhpdCddLFxuICAgIFsnZ3FmJywgJ2FwcGxpY2F0aW9uL3ZuZC5ncmFmZXEnXSxcbiAgICBbJ2dyYW0nLCAnYXBwbGljYXRpb24vc3JncyddLFxuICAgIFsnZ3J2JywgJ2FwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtaW5qZWN0b3InXSxcbiAgICBbJ2dyeG1sJywgJ2FwcGxpY2F0aW9uL3NyZ3MreG1sJ10sXG4gICAgWydnc2QnLCAnYXVkaW8veC1nc20nXSxcbiAgICBbJ2dzZicsICdhcHBsaWNhdGlvbi94LWZvbnQtZ2hvc3RzY3JpcHQnXSxcbiAgICBbJ2dzbScsICdhdWRpby94LWdzbSddLFxuICAgIFsnZ3NwJywgJ2FwcGxpY2F0aW9uL3gtZ3NwJ10sXG4gICAgWydnc3MnLCAnYXBwbGljYXRpb24veC1nc3MnXSxcbiAgICBbJ2d0YXInLCAnYXBwbGljYXRpb24veC1ndGFyJ10sXG4gICAgWydndG0nLCAnYXBwbGljYXRpb24vdm5kLmdyb292ZS10b29sLW1lc3NhZ2UnXSxcbiAgICBbJ2d0dycsICdtb2RlbC92bmQuZ3R3J10sXG4gICAgWydndicsICd0ZXh0L3ZuZC5ncmFwaHZpeiddLFxuICAgIFsnZ3h0JywgJ2FwcGxpY2F0aW9uL3ZuZC5nZW9uZXh0J10sXG4gICAgWydneicsIFsnYXBwbGljYXRpb24veC1nemlwJywgJ2FwcGxpY2F0aW9uL3gtY29tcHJlc3NlZCddXSxcbiAgICBbJ2d6aXAnLCBbJ211bHRpcGFydC94LWd6aXAnLCAnYXBwbGljYXRpb24veC1nemlwJ11dLFxuICAgIFsnaCcsIFsndGV4dC9wbGFpbicsICd0ZXh0L3gtaCddXSxcbiAgICBbJ2gyNjEnLCAndmlkZW8vaDI2MSddLFxuICAgIFsnaDI2MycsICd2aWRlby9oMjYzJ10sXG4gICAgWydoMjY0JywgJ3ZpZGVvL2gyNjQnXSxcbiAgICBbJ2hhbCcsICdhcHBsaWNhdGlvbi92bmQuaGFsK3htbCddLFxuICAgIFsnaGJjaScsICdhcHBsaWNhdGlvbi92bmQuaGJjaSddLFxuICAgIFsnaGRmJywgJ2FwcGxpY2F0aW9uL3gtaGRmJ10sXG4gICAgWydoZWxwJywgJ2FwcGxpY2F0aW9uL3gtaGVscGZpbGUnXSxcbiAgICBbJ2hnbCcsICdhcHBsaWNhdGlvbi92bmQuaHAtaHBnbCddLFxuICAgIFsnaGgnLCBbJ3RleHQvcGxhaW4nLCAndGV4dC94LWgnXV0sXG4gICAgWydobGInLCAndGV4dC94LXNjcmlwdCddLFxuICAgIFsnaGxwJywgWydhcHBsaWNhdGlvbi93aW5obHAnLCAnYXBwbGljYXRpb24vaGxwJywgJ2FwcGxpY2F0aW9uL3gtaGVscGZpbGUnLCAnYXBwbGljYXRpb24veC13aW5oZWxwJ11dLFxuICAgIFsnaHBnJywgJ2FwcGxpY2F0aW9uL3ZuZC5ocC1ocGdsJ10sXG4gICAgWydocGdsJywgJ2FwcGxpY2F0aW9uL3ZuZC5ocC1ocGdsJ10sXG4gICAgWydocGlkJywgJ2FwcGxpY2F0aW9uL3ZuZC5ocC1ocGlkJ10sXG4gICAgWydocHMnLCAnYXBwbGljYXRpb24vdm5kLmhwLWhwcyddLFxuICAgIFtcbiAgICAgICAgJ2hxeCcsXG4gICAgICAgIFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9tYWMtYmluaGV4NDAnLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2JpbmhleCcsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vYmluaGV4NCcsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vbWFjLWJpbmhleCcsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veC1iaW5oZXg0MCcsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veC1tYWMtYmluaGV4NDAnXG4gICAgICAgIF1cbiAgICBdLFxuICAgIFsnaHRhJywgJ2FwcGxpY2F0aW9uL2h0YSddLFxuICAgIFsnaHRjJywgJ3RleHQveC1jb21wb25lbnQnXSxcbiAgICBbJ2h0a2UnLCAnYXBwbGljYXRpb24vdm5kLmtlbmFtZWFhcHAnXSxcbiAgICBbJ2h0bScsICd0ZXh0L2h0bWwnXSxcbiAgICBbJ2h0bWwnLCAndGV4dC9odG1sJ10sXG4gICAgWydodG1scycsICd0ZXh0L2h0bWwnXSxcbiAgICBbJ2h0dCcsICd0ZXh0L3dlYnZpZXdodG1sJ10sXG4gICAgWydodHgnLCAndGV4dC9odG1sJ10sXG4gICAgWydodmQnLCAnYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi1kaWMnXSxcbiAgICBbJ2h2cCcsICdhcHBsaWNhdGlvbi92bmQueWFtYWhhLmh2LXZvaWNlJ10sXG4gICAgWydodnMnLCAnYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi1zY3JpcHQnXSxcbiAgICBbJ2kyZycsICdhcHBsaWNhdGlvbi92bmQuaW50ZXJnZW8nXSxcbiAgICBbJ2ljYycsICdhcHBsaWNhdGlvbi92bmQuaWNjcHJvZmlsZSddLFxuICAgIFsnaWNlJywgJ3gtY29uZmVyZW5jZS94LWNvb2x0YWxrJ10sXG4gICAgWydpY28nLCAnaW1hZ2UveC1pY29uJ10sXG4gICAgWydpY3MnLCAndGV4dC9jYWxlbmRhciddLFxuICAgIFsnaWRjJywgJ3RleHQvcGxhaW4nXSxcbiAgICBbJ2llZicsICdpbWFnZS9pZWYnXSxcbiAgICBbJ2llZnMnLCAnaW1hZ2UvaWVmJ10sXG4gICAgWydpZm0nLCAnYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm1kYXRhJ10sXG4gICAgWydpZ2VzJywgWydhcHBsaWNhdGlvbi9pZ2VzJywgJ21vZGVsL2lnZXMnXV0sXG4gICAgWydpZ2wnLCAnYXBwbGljYXRpb24vdm5kLmlnbG9hZGVyJ10sXG4gICAgWydpZ20nLCAnYXBwbGljYXRpb24vdm5kLmluc29ycy5pZ20nXSxcbiAgICBbJ2lncycsIFsnYXBwbGljYXRpb24vaWdlcycsICdtb2RlbC9pZ2VzJ11dLFxuICAgIFsnaWd4JywgJ2FwcGxpY2F0aW9uL3ZuZC5taWNyb2dyYWZ4LmlneCddLFxuICAgIFsnaWlmJywgJ2FwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5pbnRlcmNoYW5nZSddLFxuICAgIFsnaWlpJywgJ2FwcGxpY2F0aW9uL3gtaXBob25lJ10sXG4gICAgWydpbWEnLCAnYXBwbGljYXRpb24veC1pbWEnXSxcbiAgICBbJ2ltYXAnLCAnYXBwbGljYXRpb24veC1odHRwZC1pbWFwJ10sXG4gICAgWydpbXAnLCAnYXBwbGljYXRpb24vdm5kLmFjY3BhYy5zaW1wbHkuaW1wJ10sXG4gICAgWydpbXMnLCAnYXBwbGljYXRpb24vdm5kLm1zLWltcyddLFxuICAgIFsnaW5mJywgJ2FwcGxpY2F0aW9uL2luZiddLFxuICAgIFsnaW5zJywgWydhcHBsaWNhdGlvbi94LWludGVybmV0LXNpZ251cCcsICdhcHBsaWNhdGlvbi94LWludGVybmV0dC1zaWdudXAnXV0sXG4gICAgWydpcCcsICdhcHBsaWNhdGlvbi94LWlwMiddLFxuICAgIFsnaXBmaXgnLCAnYXBwbGljYXRpb24vaXBmaXgnXSxcbiAgICBbJ2lwaycsICdhcHBsaWNhdGlvbi92bmQuc2hhbmEuaW5mb3JtZWQucGFja2FnZSddLFxuICAgIFsnaXJtJywgJ2FwcGxpY2F0aW9uL3ZuZC5pYm0ucmlnaHRzLW1hbmFnZW1lbnQnXSxcbiAgICBbJ2lycCcsICdhcHBsaWNhdGlvbi92bmQuaXJlcG9zaXRvcnkucGFja2FnZSt4bWwnXSxcbiAgICBbJ2lzcCcsICdhcHBsaWNhdGlvbi94LWludGVybmV0LXNpZ251cCddLFxuICAgIFsnaXN1JywgJ3ZpZGVvL3gtaXN2aWRlbyddLFxuICAgIFsnaXQnLCAnYXVkaW8vaXQnXSxcbiAgICBbJ2l0cCcsICdhcHBsaWNhdGlvbi92bmQuc2hhbmEuaW5mb3JtZWQuZm9ybXRlbXBsYXRlJ10sXG4gICAgWydpdicsICdhcHBsaWNhdGlvbi94LWludmVudG9yJ10sXG4gICAgWydpdnAnLCAnYXBwbGljYXRpb24vdm5kLmltbWVydmlzaW9uLWl2cCddLFxuICAgIFsnaXZyJywgJ2ktd29ybGQvaS12cm1sJ10sXG4gICAgWydpdnUnLCAnYXBwbGljYXRpb24vdm5kLmltbWVydmlzaW9uLWl2dSddLFxuICAgIFsnaXZ5JywgJ2FwcGxpY2F0aW9uL3gtbGl2ZXNjcmVlbiddLFxuICAgIFsnamFkJywgJ3RleHQvdm5kLnN1bi5qMm1lLmFwcC1kZXNjcmlwdG9yJ10sXG4gICAgWydqYW0nLCBbJ2FwcGxpY2F0aW9uL3ZuZC5qYW0nLCAnYXVkaW8veC1qYW0nXV0sXG4gICAgWydqYXInLCAnYXBwbGljYXRpb24vamF2YS1hcmNoaXZlJ10sXG4gICAgWydqYXYnLCBbJ3RleHQvcGxhaW4nLCAndGV4dC94LWphdmEtc291cmNlJ11dLFxuICAgIFsnamF2YScsIFsndGV4dC9wbGFpbicsICd0ZXh0L3gtamF2YS1zb3VyY2UsamF2YScsICd0ZXh0L3gtamF2YS1zb3VyY2UnXV0sXG4gICAgWydqY20nLCAnYXBwbGljYXRpb24veC1qYXZhLWNvbW1lcmNlJ10sXG4gICAgWydqZmlmJywgWydpbWFnZS9waXBlZycsICdpbWFnZS9qcGVnJywgJ2ltYWdlL3BqcGVnJ11dLFxuICAgIFsnamZpZi10Ym5sJywgJ2ltYWdlL2pwZWcnXSxcbiAgICBbJ2ppc3AnLCAnYXBwbGljYXRpb24vdm5kLmppc3AnXSxcbiAgICBbJ2psdCcsICdhcHBsaWNhdGlvbi92bmQuaHAtamx5dCddLFxuICAgIFsnam5scCcsICdhcHBsaWNhdGlvbi94LWphdmEtam5scC1maWxlJ10sXG4gICAgWydqb2RhJywgJ2FwcGxpY2F0aW9uL3ZuZC5qb29zdC5qb2RhLWFyY2hpdmUnXSxcbiAgICBbJ2pwZScsIFsnaW1hZ2UvanBlZycsICdpbWFnZS9wanBlZyddXSxcbiAgICBbJ2pwZWcnLCBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvcGpwZWcnXV0sXG4gICAgWydqcGcnLCBbJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvcGpwZWcnXV0sXG4gICAgWydqcGd2JywgJ3ZpZGVvL2pwZWcnXSxcbiAgICBbJ2pwbScsICd2aWRlby9qcG0nXSxcbiAgICBbJ2pwcycsICdpbWFnZS94LWpwcyddLFxuICAgIFsnanMnLCBbJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnLCAnYXBwbGljYXRpb24vZWNtYXNjcmlwdCcsICd0ZXh0L2phdmFzY3JpcHQnLCAndGV4dC9lY21hc2NyaXB0JywgJ2FwcGxpY2F0aW9uL3gtamF2YXNjcmlwdCddXSxcbiAgICBbJ2pzb24nLCAnYXBwbGljYXRpb24vanNvbiddLFxuICAgIFsnanV0JywgJ2ltYWdlL2p1dHZpc2lvbiddLFxuICAgIFsna2FyJywgWydhdWRpby9taWRpJywgJ211c2ljL3gta2FyYW9rZSddXSxcbiAgICBbJ2thcmJvbicsICdhcHBsaWNhdGlvbi92bmQua2RlLmthcmJvbiddLFxuICAgIFsna2ZvJywgJ2FwcGxpY2F0aW9uL3ZuZC5rZGUua2Zvcm11bGEnXSxcbiAgICBbJ2tpYScsICdhcHBsaWNhdGlvbi92bmQua2lkc3BpcmF0aW9uJ10sXG4gICAgWydrbWwnLCAnYXBwbGljYXRpb24vdm5kLmdvb2dsZS1lYXJ0aC5rbWwreG1sJ10sXG4gICAgWydrbXonLCAnYXBwbGljYXRpb24vdm5kLmdvb2dsZS1lYXJ0aC5rbXonXSxcbiAgICBbJ2tuZScsICdhcHBsaWNhdGlvbi92bmQua2luYXInXSxcbiAgICBbJ2tvbicsICdhcHBsaWNhdGlvbi92bmQua2RlLmtvbnRvdXInXSxcbiAgICBbJ2twcicsICdhcHBsaWNhdGlvbi92bmQua2RlLmtwcmVzZW50ZXInXSxcbiAgICBbJ2tzaCcsIFsnYXBwbGljYXRpb24veC1rc2gnLCAndGV4dC94LXNjcmlwdC5rc2gnXV0sXG4gICAgWydrc3AnLCAnYXBwbGljYXRpb24vdm5kLmtkZS5rc3ByZWFkJ10sXG4gICAgWydrdHgnLCAnaW1hZ2Uva3R4J10sXG4gICAgWydrdHonLCAnYXBwbGljYXRpb24vdm5kLmthaG9vdHonXSxcbiAgICBbJ2t3ZCcsICdhcHBsaWNhdGlvbi92bmQua2RlLmt3b3JkJ10sXG4gICAgWydsYScsIFsnYXVkaW8vbnNwYXVkaW8nLCAnYXVkaW8veC1uc3BhdWRpbyddXSxcbiAgICBbJ2xhbScsICdhdWRpby94LWxpdmVhdWRpbyddLFxuICAgIFsnbGFzeG1sJywgJ2FwcGxpY2F0aW9uL3ZuZC5sYXMubGFzK3htbCddLFxuICAgIFsnbGF0ZXgnLCAnYXBwbGljYXRpb24veC1sYXRleCddLFxuICAgIFsnbGJkJywgJ2FwcGxpY2F0aW9uL3ZuZC5sbGFtYWdyYXBoaWNzLmxpZmUtYmFsYW5jZS5kZXNrdG9wJ10sXG4gICAgWydsYmUnLCAnYXBwbGljYXRpb24vdm5kLmxsYW1hZ3JhcGhpY3MubGlmZS1iYWxhbmNlLmV4Y2hhbmdlK3htbCddLFxuICAgIFsnbGVzJywgJ2FwcGxpY2F0aW9uL3ZuZC5oaGUubGVzc29uLXBsYXllciddLFxuICAgIFsnbGhhJywgWydhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLCAnYXBwbGljYXRpb24vbGhhJywgJ2FwcGxpY2F0aW9uL3gtbGhhJ11dLFxuICAgIFsnbGh4JywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLFxuICAgIFsnbGluazY2JywgJ2FwcGxpY2F0aW9uL3ZuZC5yb3V0ZTY2Lmxpbms2Nit4bWwnXSxcbiAgICBbJ2xpc3QnLCAndGV4dC9wbGFpbiddLFxuICAgIFsnbG1hJywgWydhdWRpby9uc3BhdWRpbycsICdhdWRpby94LW5zcGF1ZGlvJ11dLFxuICAgIFsnbG9nJywgJ3RleHQvcGxhaW4nXSxcbiAgICBbJ2xybScsICdhcHBsaWNhdGlvbi92bmQubXMtbHJtJ10sXG4gICAgWydsc2YnLCAndmlkZW8veC1sYS1hc2YnXSxcbiAgICBbJ2xzcCcsIFsnYXBwbGljYXRpb24veC1saXNwJywgJ3RleHQveC1zY3JpcHQubGlzcCddXSxcbiAgICBbJ2xzdCcsICd0ZXh0L3BsYWluJ10sXG4gICAgWydsc3gnLCBbJ3ZpZGVvL3gtbGEtYXNmJywgJ3RleHQveC1sYS1hc2YnXV0sXG4gICAgWydsdGYnLCAnYXBwbGljYXRpb24vdm5kLmZyb2dhbnMubHRmJ10sXG4gICAgWydsdHgnLCAnYXBwbGljYXRpb24veC1sYXRleCddLFxuICAgIFsnbHZwJywgJ2F1ZGlvL3ZuZC5sdWNlbnQudm9pY2UnXSxcbiAgICBbJ2x3cCcsICdhcHBsaWNhdGlvbi92bmQubG90dXMtd29yZHBybyddLFxuICAgIFsnbHpoJywgWydhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLCAnYXBwbGljYXRpb24veC1semgnXV0sXG4gICAgWydsengnLCBbJ2FwcGxpY2F0aW9uL2x6eCcsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLCAnYXBwbGljYXRpb24veC1sengnXV0sXG4gICAgWydtJywgWyd0ZXh0L3BsYWluJywgJ3RleHQveC1tJ11dLFxuICAgIFsnbTEzJywgJ2FwcGxpY2F0aW9uL3gtbXNtZWRpYXZpZXcnXSxcbiAgICBbJ20xNCcsICdhcHBsaWNhdGlvbi94LW1zbWVkaWF2aWV3J10sXG4gICAgWydtMXYnLCAndmlkZW8vbXBlZyddLFxuICAgIFsnbTIxJywgJ2FwcGxpY2F0aW9uL21wMjEnXSxcbiAgICBbJ20yYScsICdhdWRpby9tcGVnJ10sXG4gICAgWydtMnYnLCAndmlkZW8vbXBlZyddLFxuICAgIFsnbTN1JywgWydhdWRpby94LW1wZWd1cmwnLCAnYXVkaW8veC1tcGVxdXJsJ11dLFxuICAgIFsnbTN1OCcsICdhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybCddLFxuICAgIFsnbTR2JywgJ3ZpZGVvL3gtbTR2J10sXG4gICAgWydtYScsICdhcHBsaWNhdGlvbi9tYXRoZW1hdGljYSddLFxuICAgIFsnbWFkcycsICdhcHBsaWNhdGlvbi9tYWRzK3htbCddLFxuICAgIFsnbWFnJywgJ2FwcGxpY2F0aW9uL3ZuZC5lY293aW4uY2hhcnQnXSxcbiAgICBbJ21hbicsICdhcHBsaWNhdGlvbi94LXRyb2ZmLW1hbiddLFxuICAgIFsnbWFwJywgJ2FwcGxpY2F0aW9uL3gtbmF2aW1hcCddLFxuICAgIFsnbWFyJywgJ3RleHQvcGxhaW4nXSxcbiAgICBbJ21hdGhtbCcsICdhcHBsaWNhdGlvbi9tYXRobWwreG1sJ10sXG4gICAgWydtYmQnLCAnYXBwbGljYXRpb24vbWJlZGxldCddLFxuICAgIFsnbWJrJywgJ2FwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubWJrJ10sXG4gICAgWydtYm94JywgJ2FwcGxpY2F0aW9uL21ib3gnXSxcbiAgICBbJ21jJCcsICdhcHBsaWNhdGlvbi94LW1hZ2ljLWNhcC1wYWNrYWdlLTEuMCddLFxuICAgIFsnbWMxJywgJ2FwcGxpY2F0aW9uL3ZuZC5tZWRjYWxjZGF0YSddLFxuICAgIFsnbWNkJywgWydhcHBsaWNhdGlvbi9tY2FkJywgJ2FwcGxpY2F0aW9uL3ZuZC5tY2QnLCAnYXBwbGljYXRpb24veC1tYXRoY2FkJ11dLFxuICAgIFsnbWNmJywgWydpbWFnZS92YXNhJywgJ3RleHQvbWNmJ11dLFxuICAgIFsnbWNwJywgJ2FwcGxpY2F0aW9uL25ldG1jJ10sXG4gICAgWydtY3VybCcsICd0ZXh0L3ZuZC5jdXJsLm1jdXJsJ10sXG4gICAgWydtZGInLCAnYXBwbGljYXRpb24veC1tc2FjY2VzcyddLFxuICAgIFsnbWRpJywgJ2ltYWdlL3ZuZC5tcy1tb2RpJ10sXG4gICAgWydtZScsICdhcHBsaWNhdGlvbi94LXRyb2ZmLW1lJ10sXG4gICAgWydtZXRhNCcsICdhcHBsaWNhdGlvbi9tZXRhbGluazQreG1sJ10sXG4gICAgWydtZXRzJywgJ2FwcGxpY2F0aW9uL21ldHMreG1sJ10sXG4gICAgWydtZm0nLCAnYXBwbGljYXRpb24vdm5kLm1mbXAnXSxcbiAgICBbJ21ncCcsICdhcHBsaWNhdGlvbi92bmQub3NnZW8ubWFwZ3VpZGUucGFja2FnZSddLFxuICAgIFsnbWd6JywgJ2FwcGxpY2F0aW9uL3ZuZC5wcm90ZXVzLm1hZ2F6aW5lJ10sXG4gICAgWydtaHQnLCAnbWVzc2FnZS9yZmM4MjInXSxcbiAgICBbJ21odG1sJywgJ21lc3NhZ2UvcmZjODIyJ10sXG4gICAgWydtaWQnLCBbJ2F1ZGlvL21pZCcsICdhdWRpby9taWRpJywgJ211c2ljL2NyZXNjZW5kbycsICd4LW11c2ljL3gtbWlkaScsICdhdWRpby94LW1pZGknLCAnYXBwbGljYXRpb24veC1taWRpJywgJ2F1ZGlvL3gtbWlkJ11dLFxuICAgIFsnbWlkaScsIFsnYXVkaW8vbWlkaScsICdtdXNpYy9jcmVzY2VuZG8nLCAneC1tdXNpYy94LW1pZGknLCAnYXVkaW8veC1taWRpJywgJ2FwcGxpY2F0aW9uL3gtbWlkaScsICdhdWRpby94LW1pZCddXSxcbiAgICBbJ21pZicsIFsnYXBwbGljYXRpb24vdm5kLm1pZicsICdhcHBsaWNhdGlvbi94LW1pZicsICdhcHBsaWNhdGlvbi94LWZyYW1lJ11dLFxuICAgIFsnbWltZScsIFsnbWVzc2FnZS9yZmM4MjInLCAnd3d3L21pbWUnXV0sXG4gICAgWydtajInLCAndmlkZW8vbWoyJ10sXG4gICAgWydtamYnLCAnYXVkaW8veC12bmQuYXVkaW9leHBsb3Npb24ubWp1aWNlbWVkaWFmaWxlJ10sXG4gICAgWydtanBnJywgJ3ZpZGVvL3gtbW90aW9uLWpwZWcnXSxcbiAgICBbJ21scCcsICdhcHBsaWNhdGlvbi92bmQuZG9sYnkubWxwJ10sXG4gICAgWydtbScsIFsnYXBwbGljYXRpb24vYmFzZTY0JywgJ2FwcGxpY2F0aW9uL3gtbWVtZSddXSxcbiAgICBbJ21tZCcsICdhcHBsaWNhdGlvbi92bmQuY2hpcG51dHMua2FyYW9rZS1tbWQnXSxcbiAgICBbJ21tZScsICdhcHBsaWNhdGlvbi9iYXNlNjQnXSxcbiAgICBbJ21tZicsICdhcHBsaWNhdGlvbi92bmQuc21hZiddLFxuICAgIFsnbW1yJywgJ2ltYWdlL3ZuZC5mdWppeGVyb3guZWRtaWNzLW1tciddLFxuICAgIFsnbW55JywgJ2FwcGxpY2F0aW9uL3gtbXNtb25leSddLFxuICAgIFsnbW9kJywgWydhdWRpby9tb2QnLCAnYXVkaW8veC1tb2QnXV0sXG4gICAgWydtb2RzJywgJ2FwcGxpY2F0aW9uL21vZHMreG1sJ10sXG4gICAgWydtb292JywgJ3ZpZGVvL3F1aWNrdGltZSddLFxuICAgIFsnbW92JywgJ3ZpZGVvL3F1aWNrdGltZSddLFxuICAgIFsnbW92aWUnLCAndmlkZW8veC1zZ2ktbW92aWUnXSxcbiAgICBbJ21wMicsIFsndmlkZW8vbXBlZycsICdhdWRpby9tcGVnJywgJ3ZpZGVvL3gtbXBlZycsICdhdWRpby94LW1wZWcnLCAndmlkZW8veC1tcGVxMmEnXV0sXG4gICAgWydtcDMnLCBbJ2F1ZGlvL21wZWcnLCAnYXVkaW8vbXBlZzMnLCAndmlkZW8vbXBlZycsICdhdWRpby94LW1wZWctMycsICd2aWRlby94LW1wZWcnXV0sXG4gICAgWydtcDQnLCBbJ3ZpZGVvL21wNCcsICdhcHBsaWNhdGlvbi9tcDQnXV0sXG4gICAgWydtcDRhJywgJ2F1ZGlvL21wNCddLFxuICAgIFsnbXBhJywgWyd2aWRlby9tcGVnJywgJ2F1ZGlvL21wZWcnXV0sXG4gICAgWydtcGMnLCBbJ2FwcGxpY2F0aW9uL3ZuZC5tb3BodW4uY2VydGlmaWNhdGUnLCAnYXBwbGljYXRpb24veC1wcm9qZWN0J11dLFxuICAgIFsnbXBlJywgJ3ZpZGVvL21wZWcnXSxcbiAgICBbJ21wZWcnLCAndmlkZW8vbXBlZyddLFxuICAgIFsnbXBnJywgWyd2aWRlby9tcGVnJywgJ2F1ZGlvL21wZWcnXV0sXG4gICAgWydtcGdhJywgJ2F1ZGlvL21wZWcnXSxcbiAgICBbJ21wa2cnLCAnYXBwbGljYXRpb24vdm5kLmFwcGxlLmluc3RhbGxlcit4bWwnXSxcbiAgICBbJ21wbScsICdhcHBsaWNhdGlvbi92bmQuYmx1ZWljZS5tdWx0aXBhc3MnXSxcbiAgICBbJ21wbicsICdhcHBsaWNhdGlvbi92bmQubW9waHVuLmFwcGxpY2F0aW9uJ10sXG4gICAgWydtcHAnLCAnYXBwbGljYXRpb24vdm5kLm1zLXByb2plY3QnXSxcbiAgICBbJ21wdCcsICdhcHBsaWNhdGlvbi94LXByb2plY3QnXSxcbiAgICBbJ21wdicsICdhcHBsaWNhdGlvbi94LXByb2plY3QnXSxcbiAgICBbJ21wdjInLCAndmlkZW8vbXBlZyddLFxuICAgIFsnbXB4JywgJ2FwcGxpY2F0aW9uL3gtcHJvamVjdCddLFxuICAgIFsnbXB5JywgJ2FwcGxpY2F0aW9uL3ZuZC5pYm0ubWluaXBheSddLFxuICAgIFsnbXF5JywgJ2FwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubXF5J10sXG4gICAgWydtcmMnLCAnYXBwbGljYXRpb24vbWFyYyddLFxuICAgIFsnbXJjeCcsICdhcHBsaWNhdGlvbi9tYXJjeG1sK3htbCddLFxuICAgIFsnbXMnLCAnYXBwbGljYXRpb24veC10cm9mZi1tcyddLFxuICAgIFsnbXNjbWwnLCAnYXBwbGljYXRpb24vbWVkaWFzZXJ2ZXJjb250cm9sK3htbCddLFxuICAgIFsnbXNlcScsICdhcHBsaWNhdGlvbi92bmQubXNlcSddLFxuICAgIFsnbXNmJywgJ2FwcGxpY2F0aW9uL3ZuZC5lcHNvbi5tc2YnXSxcbiAgICBbJ21zZycsICdhcHBsaWNhdGlvbi92bmQubXMtb3V0bG9vayddLFxuICAgIFsnbXNoJywgJ21vZGVsL21lc2gnXSxcbiAgICBbJ21zbCcsICdhcHBsaWNhdGlvbi92bmQubW9iaXVzLm1zbCddLFxuICAgIFsnbXN0eScsICdhcHBsaWNhdGlvbi92bmQubXV2ZWUuc3R5bGUnXSxcbiAgICBbJ210cycsICdtb2RlbC92bmQubXRzJ10sXG4gICAgWydtdXMnLCAnYXBwbGljYXRpb24vdm5kLm11c2ljaWFuJ10sXG4gICAgWydtdXNpY3htbCcsICdhcHBsaWNhdGlvbi92bmQucmVjb3JkYXJlLm11c2ljeG1sK3htbCddLFxuICAgIFsnbXYnLCAndmlkZW8veC1zZ2ktbW92aWUnXSxcbiAgICBbJ212YicsICdhcHBsaWNhdGlvbi94LW1zbWVkaWF2aWV3J10sXG4gICAgWydtd2YnLCAnYXBwbGljYXRpb24vdm5kLm1mZXInXSxcbiAgICBbJ214ZicsICdhcHBsaWNhdGlvbi9teGYnXSxcbiAgICBbJ214bCcsICdhcHBsaWNhdGlvbi92bmQucmVjb3JkYXJlLm11c2ljeG1sJ10sXG4gICAgWydteG1sJywgJ2FwcGxpY2F0aW9uL3h2K3htbCddLFxuICAgIFsnbXhzJywgJ2FwcGxpY2F0aW9uL3ZuZC50cmlzY2FwZS5teHMnXSxcbiAgICBbJ214dScsICd2aWRlby92bmQubXBlZ3VybCddLFxuICAgIFsnbXknLCAnYXVkaW8vbWFrZSddLFxuICAgIFsnbXp6JywgJ2FwcGxpY2F0aW9uL3gtdm5kLmF1ZGlvZXhwbG9zaW9uLm16eiddLFxuICAgIFsnbi1nYWdlJywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uLWdhZ2Uuc3ltYmlhbi5pbnN0YWxsJ10sXG4gICAgWyduMycsICd0ZXh0L24zJ10sXG4gICAgWyduYXAnLCAnaW1hZ2UvbmFwbHBzJ10sXG4gICAgWyduYXBscHMnLCAnaW1hZ2UvbmFwbHBzJ10sXG4gICAgWyduYnAnLCAnYXBwbGljYXRpb24vdm5kLndvbGZyYW0ucGxheWVyJ10sXG4gICAgWyduYycsICdhcHBsaWNhdGlvbi94LW5ldGNkZiddLFxuICAgIFsnbmNtJywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5jb25maWd1cmF0aW9uLW1lc3NhZ2UnXSxcbiAgICBbJ25jeCcsICdhcHBsaWNhdGlvbi94LWR0Ym5jeCt4bWwnXSxcbiAgICBbJ25nZGF0JywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uLWdhZ2UuZGF0YSddLFxuICAgIFsnbmlmJywgJ2ltYWdlL3gtbmlmZiddLFxuICAgIFsnbmlmZicsICdpbWFnZS94LW5pZmYnXSxcbiAgICBbJ25peCcsICdhcHBsaWNhdGlvbi94LW1peC10cmFuc2ZlciddLFxuICAgIFsnbmx1JywgJ2FwcGxpY2F0aW9uL3ZuZC5uZXVyb2xhbmd1YWdlLm5sdSddLFxuICAgIFsnbm1sJywgJ2FwcGxpY2F0aW9uL3ZuZC5lbmxpdmVuJ10sXG4gICAgWydubmQnLCAnYXBwbGljYXRpb24vdm5kLm5vYmxlbmV0LWRpcmVjdG9yeSddLFxuICAgIFsnbm5zJywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2JsZW5ldC1zZWFsZXInXSxcbiAgICBbJ25udycsICdhcHBsaWNhdGlvbi92bmQubm9ibGVuZXQtd2ViJ10sXG4gICAgWyducHgnLCAnaW1hZ2Uvdm5kLm5ldC1mcHgnXSxcbiAgICBbJ25zYycsICdhcHBsaWNhdGlvbi94LWNvbmZlcmVuY2UnXSxcbiAgICBbJ25zZicsICdhcHBsaWNhdGlvbi92bmQubG90dXMtbm90ZXMnXSxcbiAgICBbJ252ZCcsICdhcHBsaWNhdGlvbi94LW5hdmlkb2MnXSxcbiAgICBbJ253cycsICdtZXNzYWdlL3JmYzgyMiddLFxuICAgIFsnbycsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ29hMicsICdhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5czInXSxcbiAgICBbJ29hMycsICdhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5czMnXSxcbiAgICBbJ29hcycsICdhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5cyddLFxuICAgIFsnb2JkJywgJ2FwcGxpY2F0aW9uL3gtbXNiaW5kZXInXSxcbiAgICBbJ29kYScsICdhcHBsaWNhdGlvbi9vZGEnXSxcbiAgICBbJ29kYicsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmRhdGFiYXNlJ10sXG4gICAgWydvZGMnLCAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5jaGFydCddLFxuICAgIFsnb2RmJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZm9ybXVsYSddLFxuICAgIFsnb2RmdCcsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmZvcm11bGEtdGVtcGxhdGUnXSxcbiAgICBbJ29kZycsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmdyYXBoaWNzJ10sXG4gICAgWydvZGknLCAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5pbWFnZSddLFxuICAgIFsnb2RtJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC1tYXN0ZXInXSxcbiAgICBbJ29kcCcsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvbiddLFxuICAgIFsnb2RzJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQnXSxcbiAgICBbJ29kdCcsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQnXSxcbiAgICBbJ29nYScsICdhdWRpby9vZ2cnXSxcbiAgICBbJ29ndicsICd2aWRlby9vZ2cnXSxcbiAgICBbJ29neCcsICdhcHBsaWNhdGlvbi9vZ2cnXSxcbiAgICBbJ29tYycsICdhcHBsaWNhdGlvbi94LW9tYyddLFxuICAgIFsnb21jZCcsICdhcHBsaWNhdGlvbi94LW9tY2RhdGFtYWtlciddLFxuICAgIFsnb21jcicsICdhcHBsaWNhdGlvbi94LW9tY3JlZ2VyYXRvciddLFxuICAgIFsnb25ldG9jJywgJ2FwcGxpY2F0aW9uL29uZW5vdGUnXSxcbiAgICBbJ29wZicsICdhcHBsaWNhdGlvbi9vZWJwcy1wYWNrYWdlK3htbCddLFxuICAgIFsnb3JnJywgJ2FwcGxpY2F0aW9uL3ZuZC5sb3R1cy1vcmdhbml6ZXInXSxcbiAgICBbJ29zZicsICdhcHBsaWNhdGlvbi92bmQueWFtYWhhLm9wZW5zY29yZWZvcm1hdCddLFxuICAgIFsnb3NmcHZnJywgJ2FwcGxpY2F0aW9uL3ZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0Lm9zZnB2Zyt4bWwnXSxcbiAgICBbJ290YycsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmNoYXJ0LXRlbXBsYXRlJ10sXG4gICAgWydvdGYnLCAnYXBwbGljYXRpb24veC1mb250LW90ZiddLFxuICAgIFsnb3RnJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3MtdGVtcGxhdGUnXSxcbiAgICBbJ290aCcsICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtd2ViJ10sXG4gICAgWydvdGknLCAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5pbWFnZS10ZW1wbGF0ZSddLFxuICAgIFsnb3RwJywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uLXRlbXBsYXRlJ10sXG4gICAgWydvdHMnLCAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldC10ZW1wbGF0ZSddLFxuICAgIFsnb3R0JywgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC10ZW1wbGF0ZSddLFxuICAgIFsnb3h0JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVub2ZmaWNlb3JnLmV4dGVuc2lvbiddLFxuICAgIFsncCcsICd0ZXh0L3gtcGFzY2FsJ10sXG4gICAgWydwMTAnLCBbJ2FwcGxpY2F0aW9uL3BrY3MxMCcsICdhcHBsaWNhdGlvbi94LXBrY3MxMCddXSxcbiAgICBbJ3AxMicsIFsnYXBwbGljYXRpb24vcGtjcy0xMicsICdhcHBsaWNhdGlvbi94LXBrY3MxMiddXSxcbiAgICBbJ3A3YScsICdhcHBsaWNhdGlvbi94LXBrY3M3LXNpZ25hdHVyZSddLFxuICAgIFsncDdiJywgJ2FwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzJ10sXG4gICAgWydwN2MnLCBbJ2FwcGxpY2F0aW9uL3BrY3M3LW1pbWUnLCAnYXBwbGljYXRpb24veC1wa2NzNy1taW1lJ11dLFxuICAgIFsncDdtJywgWydhcHBsaWNhdGlvbi9wa2NzNy1taW1lJywgJ2FwcGxpY2F0aW9uL3gtcGtjczctbWltZSddXSxcbiAgICBbJ3A3cicsICdhcHBsaWNhdGlvbi94LXBrY3M3LWNlcnRyZXFyZXNwJ10sXG4gICAgWydwN3MnLCBbJ2FwcGxpY2F0aW9uL3BrY3M3LXNpZ25hdHVyZScsICdhcHBsaWNhdGlvbi94LXBrY3M3LXNpZ25hdHVyZSddXSxcbiAgICBbJ3A4JywgJ2FwcGxpY2F0aW9uL3BrY3M4J10sXG4gICAgWydwYXInLCAndGV4dC9wbGFpbi1iYXMnXSxcbiAgICBbJ3BhcnQnLCAnYXBwbGljYXRpb24vcHJvX2VuZyddLFxuICAgIFsncGFzJywgJ3RleHQvcGFzY2FsJ10sXG4gICAgWydwYXcnLCAnYXBwbGljYXRpb24vdm5kLnBhd2FhZmlsZSddLFxuICAgIFsncGJkJywgJ2FwcGxpY2F0aW9uL3ZuZC5wb3dlcmJ1aWxkZXI2J10sXG4gICAgWydwYm0nLCAnaW1hZ2UveC1wb3J0YWJsZS1iaXRtYXAnXSxcbiAgICBbJ3BjZicsICdhcHBsaWNhdGlvbi94LWZvbnQtcGNmJ10sXG4gICAgWydwY2wnLCBbJ2FwcGxpY2F0aW9uL3ZuZC5ocC1wY2wnLCAnYXBwbGljYXRpb24veC1wY2wnXV0sXG4gICAgWydwY2x4bCcsICdhcHBsaWNhdGlvbi92bmQuaHAtcGNseGwnXSxcbiAgICBbJ3BjdCcsICdpbWFnZS94LXBpY3QnXSxcbiAgICBbJ3BjdXJsJywgJ2FwcGxpY2F0aW9uL3ZuZC5jdXJsLnBjdXJsJ10sXG4gICAgWydwY3gnLCAnaW1hZ2UveC1wY3gnXSxcbiAgICBbJ3BkYicsIFsnYXBwbGljYXRpb24vdm5kLnBhbG0nLCAnY2hlbWljYWwveC1wZGInXV0sXG4gICAgWydwZGYnLCAnYXBwbGljYXRpb24vcGRmJ10sXG4gICAgWydwZmEnLCAnYXBwbGljYXRpb24veC1mb250LXR5cGUxJ10sXG4gICAgWydwZnInLCAnYXBwbGljYXRpb24vZm9udC10ZHBmciddLFxuICAgIFsncGZ1bmsnLCBbJ2F1ZGlvL21ha2UnLCAnYXVkaW8vbWFrZS5teS5mdW5rJ11dLFxuICAgIFsncGZ4JywgJ2FwcGxpY2F0aW9uL3gtcGtjczEyJ10sXG4gICAgWydwZ20nLCBbJ2ltYWdlL3gtcG9ydGFibGUtZ3JheW1hcCcsICdpbWFnZS94LXBvcnRhYmxlLWdyZXltYXAnXV0sXG4gICAgWydwZ24nLCAnYXBwbGljYXRpb24veC1jaGVzcy1wZ24nXSxcbiAgICBbJ3BncCcsICdhcHBsaWNhdGlvbi9wZ3Atc2lnbmF0dXJlJ10sXG4gICAgWydwaWMnLCBbJ2ltYWdlL3BpY3QnLCAnaW1hZ2UveC1waWN0J11dLFxuICAgIFsncGljdCcsICdpbWFnZS9waWN0J10sXG4gICAgWydwa2cnLCAnYXBwbGljYXRpb24veC1uZXd0b24tY29tcGF0aWJsZS1wa2cnXSxcbiAgICBbJ3BraScsICdhcHBsaWNhdGlvbi9wa2l4Y21wJ10sXG4gICAgWydwa2lwYXRoJywgJ2FwcGxpY2F0aW9uL3BraXgtcGtpcGF0aCddLFxuICAgIFsncGtvJywgWydhcHBsaWNhdGlvbi95bmQubXMtcGtpcGtvJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wa2kucGtvJ11dLFxuICAgIFsncGwnLCBbJ3RleHQvcGxhaW4nLCAndGV4dC94LXNjcmlwdC5wZXJsJ11dLFxuICAgIFsncGxiJywgJ2FwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy1sYXJnZSddLFxuICAgIFsncGxjJywgJ2FwcGxpY2F0aW9uL3ZuZC5tb2JpdXMucGxjJ10sXG4gICAgWydwbGYnLCAnYXBwbGljYXRpb24vdm5kLnBvY2tldGxlYXJuJ10sXG4gICAgWydwbHMnLCAnYXBwbGljYXRpb24vcGxzK3htbCddLFxuICAgIFsncGx4JywgJ2FwcGxpY2F0aW9uL3gtcGl4Y2xzY3JpcHQnXSxcbiAgICBbJ3BtJywgWyd0ZXh0L3gtc2NyaXB0LnBlcmwtbW9kdWxlJywgJ2ltYWdlL3gteHBpeG1hcCddXSxcbiAgICBbJ3BtNCcsICdhcHBsaWNhdGlvbi94LXBhZ2VtYWtlciddLFxuICAgIFsncG01JywgJ2FwcGxpY2F0aW9uL3gtcGFnZW1ha2VyJ10sXG4gICAgWydwbWEnLCAnYXBwbGljYXRpb24veC1wZXJmbW9uJ10sXG4gICAgWydwbWMnLCAnYXBwbGljYXRpb24veC1wZXJmbW9uJ10sXG4gICAgWydwbWwnLCBbJ2FwcGxpY2F0aW9uL3ZuZC5jdGMtcG9zbWwnLCAnYXBwbGljYXRpb24veC1wZXJmbW9uJ11dLFxuICAgIFsncG1yJywgJ2FwcGxpY2F0aW9uL3gtcGVyZm1vbiddLFxuICAgIFsncG13JywgJ2FwcGxpY2F0aW9uL3gtcGVyZm1vbiddLFxuICAgIFsncG5nJywgJ2ltYWdlL3BuZyddLFxuICAgIFsncG5tJywgWydhcHBsaWNhdGlvbi94LXBvcnRhYmxlLWFueW1hcCcsICdpbWFnZS94LXBvcnRhYmxlLWFueW1hcCddXSxcbiAgICBbJ3BvcnRwa2cnLCAnYXBwbGljYXRpb24vdm5kLm1hY3BvcnRzLnBvcnRwa2cnXSxcbiAgICBbJ3BvdCcsIFsnYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQnLCAnYXBwbGljYXRpb24vbXNwb3dlcnBvaW50J11dLFxuICAgIFsncG90bScsICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTInXSxcbiAgICBbJ3BvdHgnLCAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRlbXBsYXRlJ10sXG4gICAgWydwb3YnLCAnbW9kZWwveC1wb3YnXSxcbiAgICBbJ3BwYScsICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludCddLFxuICAgIFsncHBhbScsICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5hZGRpbi5tYWNyb2VuYWJsZWQuMTInXSxcbiAgICBbJ3BwZCcsICdhcHBsaWNhdGlvbi92bmQuY3Vwcy1wcGQnXSxcbiAgICBbJ3BwbScsICdpbWFnZS94LXBvcnRhYmxlLXBpeG1hcCddLFxuICAgIFsncHBzJywgWydhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludCcsICdhcHBsaWNhdGlvbi9tc3Bvd2VycG9pbnQnXV0sXG4gICAgWydwcHNtJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnNsaWRlc2hvdy5tYWNyb2VuYWJsZWQuMTInXSxcbiAgICBbJ3Bwc3gnLCAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlc2hvdyddLFxuICAgIFsncHB0JywgWydhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludCcsICdhcHBsaWNhdGlvbi9tc3Bvd2VycG9pbnQnLCAnYXBwbGljYXRpb24vcG93ZXJwb2ludCcsICdhcHBsaWNhdGlvbi94LW1zcG93ZXJwb2ludCddXSxcbiAgICBbJ3BwdG0nLCAnYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQucHJlc2VudGF0aW9uLm1hY3JvZW5hYmxlZC4xMiddLFxuICAgIFsncHB0eCcsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uJ10sXG4gICAgWydwcHonLCAnYXBwbGljYXRpb24vbXNwb3dlcnBvaW50J10sXG4gICAgWydwcmMnLCAnYXBwbGljYXRpb24veC1tb2JpcG9ja2V0LWVib29rJ10sXG4gICAgWydwcmUnLCBbJ2FwcGxpY2F0aW9uL3ZuZC5sb3R1cy1mcmVlbGFuY2UnLCAnYXBwbGljYXRpb24veC1mcmVlbGFuY2UnXV0sXG4gICAgWydwcmYnLCAnYXBwbGljYXRpb24vcGljcy1ydWxlcyddLFxuICAgIFsncHJ0JywgJ2FwcGxpY2F0aW9uL3Byb19lbmcnXSxcbiAgICBbJ3BzJywgJ2FwcGxpY2F0aW9uL3Bvc3RzY3JpcHQnXSxcbiAgICBbJ3BzYicsICdhcHBsaWNhdGlvbi92bmQuM2dwcC5waWMtYnctc21hbGwnXSxcbiAgICBbJ3BzZCcsIFsnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJywgJ2ltYWdlL3ZuZC5hZG9iZS5waG90b3Nob3AnXV0sXG4gICAgWydwc2YnLCAnYXBwbGljYXRpb24veC1mb250LWxpbnV4LXBzZiddLFxuICAgIFsncHNrY3htbCcsICdhcHBsaWNhdGlvbi9wc2tjK3htbCddLFxuICAgIFsncHRpZCcsICdhcHBsaWNhdGlvbi92bmQucHZpLnB0aWQxJ10sXG4gICAgWydwdWInLCAnYXBwbGljYXRpb24veC1tc3B1Ymxpc2hlciddLFxuICAgIFsncHZiJywgJ2FwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy12YXInXSxcbiAgICBbJ3B2dScsICdwYWxlb3Z1L3gtcHYnXSxcbiAgICBbJ3B3bicsICdhcHBsaWNhdGlvbi92bmQuM20ucG9zdC1pdC1ub3RlcyddLFxuICAgIFsncHd6JywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50J10sXG4gICAgWydweScsICd0ZXh0L3gtc2NyaXB0LnBoeXRvbiddLFxuICAgIFsncHlhJywgJ2F1ZGlvL3ZuZC5tcy1wbGF5cmVhZHkubWVkaWEucHlhJ10sXG4gICAgWydweWMnLCAnYXBwbGljYXRpb24veC1ieXRlY29kZS5weXRob24nXSxcbiAgICBbJ3B5dicsICd2aWRlby92bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5diddLFxuICAgIFsncWFtJywgJ2FwcGxpY2F0aW9uL3ZuZC5lcHNvbi5xdWlja2FuaW1lJ10sXG4gICAgWydxYm8nLCAnYXBwbGljYXRpb24vdm5kLmludHUucWJvJ10sXG4gICAgWydxY3AnLCAnYXVkaW8vdm5kLnFjZWxwJ10sXG4gICAgWydxZDMnLCAneC13b3JsZC94LTNkbWYnXSxcbiAgICBbJ3FkM2QnLCAneC13b3JsZC94LTNkbWYnXSxcbiAgICBbJ3FmeCcsICdhcHBsaWNhdGlvbi92bmQuaW50dS5xZngnXSxcbiAgICBbJ3FpZicsICdpbWFnZS94LXF1aWNrdGltZSddLFxuICAgIFsncXBzJywgJ2FwcGxpY2F0aW9uL3ZuZC5wdWJsaXNoYXJlLWRlbHRhLXRyZWUnXSxcbiAgICBbJ3F0JywgJ3ZpZGVvL3F1aWNrdGltZSddLFxuICAgIFsncXRjJywgJ3ZpZGVvL3gtcXRjJ10sXG4gICAgWydxdGknLCAnaW1hZ2UveC1xdWlja3RpbWUnXSxcbiAgICBbJ3F0aWYnLCAnaW1hZ2UveC1xdWlja3RpbWUnXSxcbiAgICBbJ3F4ZCcsICdhcHBsaWNhdGlvbi92bmQucXVhcmsucXVhcmt4cHJlc3MnXSxcbiAgICBbJ3JhJywgWydhdWRpby94LXJlYWxhdWRpbycsICdhdWRpby94LXBuLXJlYWxhdWRpbycsICdhdWRpby94LXBuLXJlYWxhdWRpby1wbHVnaW4nXV0sXG4gICAgWydyYW0nLCAnYXVkaW8veC1wbi1yZWFsYXVkaW8nXSxcbiAgICBbJ3JhcicsICdhcHBsaWNhdGlvbi94LXJhci1jb21wcmVzc2VkJ10sXG4gICAgWydyYXMnLCBbJ2ltYWdlL2NtdS1yYXN0ZXInLCAnYXBwbGljYXRpb24veC1jbXUtcmFzdGVyJywgJ2ltYWdlL3gtY211LXJhc3RlciddXSxcbiAgICBbJ3Jhc3QnLCAnaW1hZ2UvY211LXJhc3RlciddLFxuICAgIFsncmNwcm9maWxlJywgJ2FwcGxpY2F0aW9uL3ZuZC5pcHVucGx1Z2dlZC5yY3Byb2ZpbGUnXSxcbiAgICBbJ3JkZicsICdhcHBsaWNhdGlvbi9yZGYreG1sJ10sXG4gICAgWydyZHonLCAnYXBwbGljYXRpb24vdm5kLmRhdGEtdmlzaW9uLnJkeiddLFxuICAgIFsncmVwJywgJ2FwcGxpY2F0aW9uL3ZuZC5idXNpbmVzc29iamVjdHMnXSxcbiAgICBbJ3JlcycsICdhcHBsaWNhdGlvbi94LWR0YnJlc291cmNlK3htbCddLFxuICAgIFsncmV4eCcsICd0ZXh0L3gtc2NyaXB0LnJleHgnXSxcbiAgICBbJ3JmJywgJ2ltYWdlL3ZuZC5ybi1yZWFsZmxhc2gnXSxcbiAgICBbJ3JnYicsICdpbWFnZS94LXJnYiddLFxuICAgIFsncmlmJywgJ2FwcGxpY2F0aW9uL3JlZ2luZm8reG1sJ10sXG4gICAgWydyaXAnLCAnYXVkaW8vdm5kLnJpcCddLFxuICAgIFsncmwnLCAnYXBwbGljYXRpb24vcmVzb3VyY2UtbGlzdHMreG1sJ10sXG4gICAgWydybGMnLCAnaW1hZ2Uvdm5kLmZ1aml4ZXJveC5lZG1pY3MtcmxjJ10sXG4gICAgWydybGQnLCAnYXBwbGljYXRpb24vcmVzb3VyY2UtbGlzdHMtZGlmZit4bWwnXSxcbiAgICBbJ3JtJywgWydhcHBsaWNhdGlvbi92bmQucm4tcmVhbG1lZGlhJywgJ2F1ZGlvL3gtcG4tcmVhbGF1ZGlvJ11dLFxuICAgIFsncm1pJywgJ2F1ZGlvL21pZCddLFxuICAgIFsncm1tJywgJ2F1ZGlvL3gtcG4tcmVhbGF1ZGlvJ10sXG4gICAgWydybXAnLCBbJ2F1ZGlvL3gtcG4tcmVhbGF1ZGlvLXBsdWdpbicsICdhdWRpby94LXBuLXJlYWxhdWRpbyddXSxcbiAgICBbJ3JtcycsICdhcHBsaWNhdGlvbi92bmQuamNwLmphdmFtZS5taWRsZXQtcm1zJ10sXG4gICAgWydybmMnLCAnYXBwbGljYXRpb24vcmVsYXgtbmctY29tcGFjdC1zeW50YXgnXSxcbiAgICBbJ3JuZycsIFsnYXBwbGljYXRpb24vcmluZ2luZy10b25lcycsICdhcHBsaWNhdGlvbi92bmQubm9raWEucmluZ2luZy10b25lJ11dLFxuICAgIFsncm54JywgJ2FwcGxpY2F0aW9uL3ZuZC5ybi1yZWFscGxheWVyJ10sXG4gICAgWydyb2ZmJywgJ2FwcGxpY2F0aW9uL3gtdHJvZmYnXSxcbiAgICBbJ3JwJywgJ2ltYWdlL3ZuZC5ybi1yZWFscGl4J10sXG4gICAgWydycDknLCAnYXBwbGljYXRpb24vdm5kLmNsb2FudG8ucnA5J10sXG4gICAgWydycG0nLCAnYXVkaW8veC1wbi1yZWFsYXVkaW8tcGx1Z2luJ10sXG4gICAgWydycHNzJywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5yYWRpby1wcmVzZXRzJ10sXG4gICAgWydycHN0JywgJ2FwcGxpY2F0aW9uL3ZuZC5ub2tpYS5yYWRpby1wcmVzZXQnXSxcbiAgICBbJ3JxJywgJ2FwcGxpY2F0aW9uL3NwYXJxbC1xdWVyeSddLFxuICAgIFsncnMnLCAnYXBwbGljYXRpb24vcmxzLXNlcnZpY2VzK3htbCddLFxuICAgIFsncnNkJywgJ2FwcGxpY2F0aW9uL3JzZCt4bWwnXSxcbiAgICBbJ3J0JywgWyd0ZXh0L3JpY2h0ZXh0JywgJ3RleHQvdm5kLnJuLXJlYWx0ZXh0J11dLFxuICAgIFsncnRmJywgWydhcHBsaWNhdGlvbi9ydGYnLCAndGV4dC9yaWNodGV4dCcsICdhcHBsaWNhdGlvbi94LXJ0ZiddXSxcbiAgICBbJ3J0eCcsIFsndGV4dC9yaWNodGV4dCcsICdhcHBsaWNhdGlvbi9ydGYnXV0sXG4gICAgWydydicsICd2aWRlby92bmQucm4tcmVhbHZpZGVvJ10sXG4gICAgWydzJywgJ3RleHQveC1hc20nXSxcbiAgICBbJ3MzbScsICdhdWRpby9zM20nXSxcbiAgICBbJ3NhZicsICdhcHBsaWNhdGlvbi92bmQueWFtYWhhLnNtYWYtYXVkaW8nXSxcbiAgICBbJ3NhdmVtZScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ3NiaycsICdhcHBsaWNhdGlvbi94LXRib29rJ10sXG4gICAgWydzYm1sJywgJ2FwcGxpY2F0aW9uL3NibWwreG1sJ10sXG4gICAgWydzYycsICdhcHBsaWNhdGlvbi92bmQuaWJtLnNlY3VyZS1jb250YWluZXInXSxcbiAgICBbJ3NjZCcsICdhcHBsaWNhdGlvbi94LW1zc2NoZWR1bGUnXSxcbiAgICBbJ3NjbScsIFsnYXBwbGljYXRpb24vdm5kLmxvdHVzLXNjcmVlbmNhbScsICd2aWRlby94LXNjbScsICd0ZXh0L3gtc2NyaXB0Lmd1aWxlJywgJ2FwcGxpY2F0aW9uL3gtbG90dXNzY3JlZW5jYW0nLCAndGV4dC94LXNjcmlwdC5zY2hlbWUnXV0sXG4gICAgWydzY3EnLCAnYXBwbGljYXRpb24vc2N2cC1jdi1yZXF1ZXN0J10sXG4gICAgWydzY3MnLCAnYXBwbGljYXRpb24vc2N2cC1jdi1yZXNwb25zZSddLFxuICAgIFsnc2N0JywgJ3RleHQvc2NyaXB0bGV0J10sXG4gICAgWydzY3VybCcsICd0ZXh0L3ZuZC5jdXJsLnNjdXJsJ10sXG4gICAgWydzZGEnLCAnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5kcmF3J10sXG4gICAgWydzZGMnLCAnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5jYWxjJ10sXG4gICAgWydzZGQnLCAnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5pbXByZXNzJ10sXG4gICAgWydzZGttJywgJ2FwcGxpY2F0aW9uL3ZuZC5zb2xlbnQuc2RrbSt4bWwnXSxcbiAgICBbJ3NkbWwnLCAndGV4dC9wbGFpbiddLFxuICAgIFsnc2RwJywgWydhcHBsaWNhdGlvbi9zZHAnLCAnYXBwbGljYXRpb24veC1zZHAnXV0sXG4gICAgWydzZHInLCAnYXBwbGljYXRpb24vc291bmRlciddLFxuICAgIFsnc2R3JywgJ2FwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24ud3JpdGVyJ10sXG4gICAgWydzZWEnLCBbJ2FwcGxpY2F0aW9uL3NlYScsICdhcHBsaWNhdGlvbi94LXNlYSddXSxcbiAgICBbJ3NlZScsICdhcHBsaWNhdGlvbi92bmQuc2VlbWFpbCddLFxuICAgIFsnc2VlZCcsICdhcHBsaWNhdGlvbi92bmQuZmRzbi5zZWVkJ10sXG4gICAgWydzZW1hJywgJ2FwcGxpY2F0aW9uL3ZuZC5zZW1hJ10sXG4gICAgWydzZW1kJywgJ2FwcGxpY2F0aW9uL3ZuZC5zZW1kJ10sXG4gICAgWydzZW1mJywgJ2FwcGxpY2F0aW9uL3ZuZC5zZW1mJ10sXG4gICAgWydzZXInLCAnYXBwbGljYXRpb24vamF2YS1zZXJpYWxpemVkLW9iamVjdCddLFxuICAgIFsnc2V0JywgJ2FwcGxpY2F0aW9uL3NldCddLFxuICAgIFsnc2V0cGF5JywgJ2FwcGxpY2F0aW9uL3NldC1wYXltZW50LWluaXRpYXRpb24nXSxcbiAgICBbJ3NldHJlZycsICdhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb24nXSxcbiAgICBbJ3NmZC1oZHN0eCcsICdhcHBsaWNhdGlvbi92bmQuaHlkcm9zdGF0aXguc29mLWRhdGEnXSxcbiAgICBbJ3NmcycsICdhcHBsaWNhdGlvbi92bmQuc3BvdGZpcmUuc2ZzJ10sXG4gICAgWydzZ2wnLCAnYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi53cml0ZXItZ2xvYmFsJ10sXG4gICAgWydzZ20nLCBbJ3RleHQvc2dtbCcsICd0ZXh0L3gtc2dtbCddXSxcbiAgICBbJ3NnbWwnLCBbJ3RleHQvc2dtbCcsICd0ZXh0L3gtc2dtbCddXSxcbiAgICBbJ3NoJywgWydhcHBsaWNhdGlvbi94LXNoYXInLCAnYXBwbGljYXRpb24veC1ic2gnLCAnYXBwbGljYXRpb24veC1zaCcsICd0ZXh0L3gtc2NyaXB0LnNoJ11dLFxuICAgIFsnc2hhcicsIFsnYXBwbGljYXRpb24veC1ic2gnLCAnYXBwbGljYXRpb24veC1zaGFyJ11dLFxuICAgIFsnc2hmJywgJ2FwcGxpY2F0aW9uL3NoZit4bWwnXSxcbiAgICBbJ3NodG1sJywgWyd0ZXh0L2h0bWwnLCAndGV4dC94LXNlcnZlci1wYXJzZWQtaHRtbCddXSxcbiAgICBbJ3NpZCcsICdhdWRpby94LXBzaWQnXSxcbiAgICBbJ3NpcycsICdhcHBsaWNhdGlvbi92bmQuc3ltYmlhbi5pbnN0YWxsJ10sXG4gICAgWydzaXQnLCBbJ2FwcGxpY2F0aW9uL3gtc3R1ZmZpdCcsICdhcHBsaWNhdGlvbi94LXNpdCddXSxcbiAgICBbJ3NpdHgnLCAnYXBwbGljYXRpb24veC1zdHVmZml0eCddLFxuICAgIFsnc2tkJywgJ2FwcGxpY2F0aW9uL3gta29hbiddLFxuICAgIFsnc2ttJywgJ2FwcGxpY2F0aW9uL3gta29hbiddLFxuICAgIFsnc2twJywgWydhcHBsaWNhdGlvbi92bmQua29hbicsICdhcHBsaWNhdGlvbi94LWtvYW4nXV0sXG4gICAgWydza3QnLCAnYXBwbGljYXRpb24veC1rb2FuJ10sXG4gICAgWydzbCcsICdhcHBsaWNhdGlvbi94LXNlZWxvZ28nXSxcbiAgICBbJ3NsZG0nLCAnYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGUubWFjcm9lbmFibGVkLjEyJ10sXG4gICAgWydzbGR4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZSddLFxuICAgIFsnc2x0JywgJ2FwcGxpY2F0aW9uL3ZuZC5lcHNvbi5zYWx0J10sXG4gICAgWydzbScsICdhcHBsaWNhdGlvbi92bmQuc3RlcG1hbmlhLnN0ZXBjaGFydCddLFxuICAgIFsnc21mJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24ubWF0aCddLFxuICAgIFsnc21pJywgWydhcHBsaWNhdGlvbi9zbWlsJywgJ2FwcGxpY2F0aW9uL3NtaWwreG1sJ11dLFxuICAgIFsnc21pbCcsICdhcHBsaWNhdGlvbi9zbWlsJ10sXG4gICAgWydzbmQnLCBbJ2F1ZGlvL2Jhc2ljJywgJ2F1ZGlvL3gtYWRwY20nXV0sXG4gICAgWydzbmYnLCAnYXBwbGljYXRpb24veC1mb250LXNuZiddLFxuICAgIFsnc29sJywgJ2FwcGxpY2F0aW9uL3NvbGlkcyddLFxuICAgIFsnc3BjJywgWyd0ZXh0L3gtc3BlZWNoJywgJ2FwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzJ11dLFxuICAgIFsnc3BmJywgJ2FwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1waHJhc2UnXSxcbiAgICBbJ3NwbCcsIFsnYXBwbGljYXRpb24vZnV0dXJlc3BsYXNoJywgJ2FwcGxpY2F0aW9uL3gtZnV0dXJlc3BsYXNoJ11dLFxuICAgIFsnc3BvdCcsICd0ZXh0L3ZuZC5pbjNkLnNwb3QnXSxcbiAgICBbJ3NwcCcsICdhcHBsaWNhdGlvbi9zY3ZwLXZwLXJlc3BvbnNlJ10sXG4gICAgWydzcHEnLCAnYXBwbGljYXRpb24vc2N2cC12cC1yZXF1ZXN0J10sXG4gICAgWydzcHInLCAnYXBwbGljYXRpb24veC1zcHJpdGUnXSxcbiAgICBbJ3Nwcml0ZScsICdhcHBsaWNhdGlvbi94LXNwcml0ZSddLFxuICAgIFsnc3JjJywgJ2FwcGxpY2F0aW9uL3gtd2Fpcy1zb3VyY2UnXSxcbiAgICBbJ3NydScsICdhcHBsaWNhdGlvbi9zcnUreG1sJ10sXG4gICAgWydzcngnLCAnYXBwbGljYXRpb24vc3BhcnFsLXJlc3VsdHMreG1sJ10sXG4gICAgWydzc2UnLCAnYXBwbGljYXRpb24vdm5kLmtvZGFrLWRlc2NyaXB0b3InXSxcbiAgICBbJ3NzZicsICdhcHBsaWNhdGlvbi92bmQuZXBzb24uc3NmJ10sXG4gICAgWydzc2knLCAndGV4dC94LXNlcnZlci1wYXJzZWQtaHRtbCddLFxuICAgIFsnc3NtJywgJ2FwcGxpY2F0aW9uL3N0cmVhbWluZ21lZGlhJ10sXG4gICAgWydzc21sJywgJ2FwcGxpY2F0aW9uL3NzbWwreG1sJ10sXG4gICAgWydzc3QnLCBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1wa2ljZXJ0c3RvcmUnLCAnYXBwbGljYXRpb24vdm5kLm1zLXBraS5jZXJ0c3RvcmUnXV0sXG4gICAgWydzdCcsICdhcHBsaWNhdGlvbi92bmQuc2FpbGluZ3RyYWNrZXIudHJhY2snXSxcbiAgICBbJ3N0YycsICdhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5jYWxjLnRlbXBsYXRlJ10sXG4gICAgWydzdGQnLCAnYXBwbGljYXRpb24vdm5kLnN1bi54bWwuZHJhdy50ZW1wbGF0ZSddLFxuICAgIFsnc3RlcCcsICdhcHBsaWNhdGlvbi9zdGVwJ10sXG4gICAgWydzdGYnLCAnYXBwbGljYXRpb24vdm5kLnd0LnN0ZiddLFxuICAgIFsnc3RpJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmltcHJlc3MudGVtcGxhdGUnXSxcbiAgICBbJ3N0aycsICdhcHBsaWNhdGlvbi9oeXBlcnN0dWRpbyddLFxuICAgIFsnc3RsJywgWydhcHBsaWNhdGlvbi92bmQubXMtcGtpc3RsJywgJ2FwcGxpY2F0aW9uL3NsYScsICdhcHBsaWNhdGlvbi92bmQubXMtcGtpLnN0bCcsICdhcHBsaWNhdGlvbi94LW5hdmlzdHlsZSddXSxcbiAgICBbJ3N0bScsICd0ZXh0L2h0bWwnXSxcbiAgICBbJ3N0cCcsICdhcHBsaWNhdGlvbi9zdGVwJ10sXG4gICAgWydzdHInLCAnYXBwbGljYXRpb24vdm5kLnBnLmZvcm1hdCddLFxuICAgIFsnc3R3JywgJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLndyaXRlci50ZW1wbGF0ZSddLFxuICAgIFsnc3ViJywgJ2ltYWdlL3ZuZC5kdmIuc3VidGl0bGUnXSxcbiAgICBbJ3N1cycsICdhcHBsaWNhdGlvbi92bmQuc3VzLWNhbGVuZGFyJ10sXG4gICAgWydzdjRjcGlvJywgJ2FwcGxpY2F0aW9uL3gtc3Y0Y3BpbyddLFxuICAgIFsnc3Y0Y3JjJywgJ2FwcGxpY2F0aW9uL3gtc3Y0Y3JjJ10sXG4gICAgWydzdmMnLCAnYXBwbGljYXRpb24vdm5kLmR2Yi5zZXJ2aWNlJ10sXG4gICAgWydzdmQnLCAnYXBwbGljYXRpb24vdm5kLnN2ZCddLFxuICAgIFsnc3ZmJywgWydpbWFnZS92bmQuZHdnJywgJ2ltYWdlL3gtZHdnJ11dLFxuICAgIFsnc3ZnJywgJ2ltYWdlL3N2Zyt4bWwnXSxcbiAgICBbJ3N2cicsIFsneC13b3JsZC94LXN2cicsICdhcHBsaWNhdGlvbi94LXdvcmxkJ11dLFxuICAgIFsnc3dmJywgJ2FwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoJ10sXG4gICAgWydzd2knLCAnYXBwbGljYXRpb24vdm5kLmFyaXN0YW5ldHdvcmtzLnN3aSddLFxuICAgIFsnc3hjJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmNhbGMnXSxcbiAgICBbJ3N4ZCcsICdhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5kcmF3J10sXG4gICAgWydzeGcnLCAnYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyLmdsb2JhbCddLFxuICAgIFsnc3hpJywgJ2FwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmltcHJlc3MnXSxcbiAgICBbJ3N4bScsICdhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5tYXRoJ10sXG4gICAgWydzeHcnLCAnYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyJ10sXG4gICAgWyd0JywgWyd0ZXh0L3Ryb2ZmJywgJ2FwcGxpY2F0aW9uL3gtdHJvZmYnXV0sXG4gICAgWyd0YWxrJywgJ3RleHQveC1zcGVlY2gnXSxcbiAgICBbJ3RhbycsICdhcHBsaWNhdGlvbi92bmQudGFvLmludGVudC1tb2R1bGUtYXJjaGl2ZSddLFxuICAgIFsndGFyJywgJ2FwcGxpY2F0aW9uL3gtdGFyJ10sXG4gICAgWyd0YmsnLCBbJ2FwcGxpY2F0aW9uL3Rvb2xib29rJywgJ2FwcGxpY2F0aW9uL3gtdGJvb2snXV0sXG4gICAgWyd0Y2FwJywgJ2FwcGxpY2F0aW9uL3ZuZC4zZ3BwMi50Y2FwJ10sXG4gICAgWyd0Y2wnLCBbJ3RleHQveC1zY3JpcHQudGNsJywgJ2FwcGxpY2F0aW9uL3gtdGNsJ11dLFxuICAgIFsndGNzaCcsICd0ZXh0L3gtc2NyaXB0LnRjc2gnXSxcbiAgICBbJ3RlYWNoZXInLCAnYXBwbGljYXRpb24vdm5kLnNtYXJ0LnRlYWNoZXInXSxcbiAgICBbJ3RlaScsICdhcHBsaWNhdGlvbi90ZWkreG1sJ10sXG4gICAgWyd0ZXgnLCAnYXBwbGljYXRpb24veC10ZXgnXSxcbiAgICBbJ3RleGknLCAnYXBwbGljYXRpb24veC10ZXhpbmZvJ10sXG4gICAgWyd0ZXhpbmZvJywgJ2FwcGxpY2F0aW9uL3gtdGV4aW5mbyddLFxuICAgIFsndGV4dCcsIFsnYXBwbGljYXRpb24vcGxhaW4nLCAndGV4dC9wbGFpbiddXSxcbiAgICBbJ3RmaScsICdhcHBsaWNhdGlvbi90aHJhdWQreG1sJ10sXG4gICAgWyd0Zm0nLCAnYXBwbGljYXRpb24veC10ZXgtdGZtJ10sXG4gICAgWyd0Z3onLCBbJ2FwcGxpY2F0aW9uL2dudXRhcicsICdhcHBsaWNhdGlvbi94LWNvbXByZXNzZWQnXV0sXG4gICAgWyd0aG14JywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2V0aGVtZSddLFxuICAgIFsndGlmJywgWydpbWFnZS90aWZmJywgJ2ltYWdlL3gtdGlmZiddXSxcbiAgICBbJ3RpZmYnLCBbJ2ltYWdlL3RpZmYnLCAnaW1hZ2UveC10aWZmJ11dLFxuICAgIFsndG1vJywgJ2FwcGxpY2F0aW9uL3ZuZC50bW9iaWxlLWxpdmV0diddLFxuICAgIFsndG9ycmVudCcsICdhcHBsaWNhdGlvbi94LWJpdHRvcnJlbnQnXSxcbiAgICBbJ3RwbCcsICdhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXRvb2wtdGVtcGxhdGUnXSxcbiAgICBbJ3RwdCcsICdhcHBsaWNhdGlvbi92bmQudHJpZC50cHQnXSxcbiAgICBbJ3RyJywgJ2FwcGxpY2F0aW9uL3gtdHJvZmYnXSxcbiAgICBbJ3RyYScsICdhcHBsaWNhdGlvbi92bmQudHJ1ZWFwcCddLFxuICAgIFsndHJtJywgJ2FwcGxpY2F0aW9uL3gtbXN0ZXJtaW5hbCddLFxuICAgIFsndHNkJywgJ2FwcGxpY2F0aW9uL3RpbWVzdGFtcGVkLWRhdGEnXSxcbiAgICBbJ3RzaScsICdhdWRpby90c3AtYXVkaW8nXSxcbiAgICBbJ3RzcCcsIFsnYXBwbGljYXRpb24vZHNwdHlwZScsICdhdWRpby90c3BsYXllciddXSxcbiAgICBbJ3RzdicsICd0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzJ10sXG4gICAgWyd0dGYnLCAnYXBwbGljYXRpb24veC1mb250LXR0ZiddLFxuICAgIFsndHRsJywgJ3RleHQvdHVydGxlJ10sXG4gICAgWyd0dXJib3QnLCAnaW1hZ2UvZmxvcmlhbiddLFxuICAgIFsndHdkJywgJ2FwcGxpY2F0aW9uL3ZuZC5zaW10ZWNoLW1pbmRtYXBwZXInXSxcbiAgICBbJ3R4ZCcsICdhcHBsaWNhdGlvbi92bmQuZ2Vub21hdGl4LnR1eGVkbyddLFxuICAgIFsndHhmJywgJ2FwcGxpY2F0aW9uL3ZuZC5tb2JpdXMudHhmJ10sXG4gICAgWyd0eHQnLCAndGV4dC9wbGFpbiddLFxuICAgIFsndWZkJywgJ2FwcGxpY2F0aW9uL3ZuZC51ZmRsJ10sXG4gICAgWyd1aWwnLCAndGV4dC94LXVpbCddLFxuICAgIFsndWxzJywgJ3RleHQvaXVscyddLFxuICAgIFsndW1qJywgJ2FwcGxpY2F0aW9uL3ZuZC51bWFqaW4nXSxcbiAgICBbJ3VuaScsICd0ZXh0L3VyaS1saXN0J10sXG4gICAgWyd1bmlzJywgJ3RleHQvdXJpLWxpc3QnXSxcbiAgICBbJ3VuaXR5d2ViJywgJ2FwcGxpY2F0aW9uL3ZuZC51bml0eSddLFxuICAgIFsndW52JywgJ2FwcGxpY2F0aW9uL2ktZGVhcyddLFxuICAgIFsndW9tbCcsICdhcHBsaWNhdGlvbi92bmQudW9tbCt4bWwnXSxcbiAgICBbJ3VyaScsICd0ZXh0L3VyaS1saXN0J10sXG4gICAgWyd1cmlzJywgJ3RleHQvdXJpLWxpc3QnXSxcbiAgICBbJ3VzdGFyJywgWydhcHBsaWNhdGlvbi94LXVzdGFyJywgJ211bHRpcGFydC94LXVzdGFyJ11dLFxuICAgIFsndXR6JywgJ2FwcGxpY2F0aW9uL3ZuZC51aXEudGhlbWUnXSxcbiAgICBbJ3V1JywgWydhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLCAndGV4dC94LXV1ZW5jb2RlJ11dLFxuICAgIFsndXVlJywgJ3RleHQveC11dWVuY29kZSddLFxuICAgIFsndXZhJywgJ2F1ZGlvL3ZuZC5kZWNlLmF1ZGlvJ10sXG4gICAgWyd1dmgnLCAndmlkZW8vdm5kLmRlY2UuaGQnXSxcbiAgICBbJ3V2aScsICdpbWFnZS92bmQuZGVjZS5ncmFwaGljJ10sXG4gICAgWyd1dm0nLCAndmlkZW8vdm5kLmRlY2UubW9iaWxlJ10sXG4gICAgWyd1dnAnLCAndmlkZW8vdm5kLmRlY2UucGQnXSxcbiAgICBbJ3V2cycsICd2aWRlby92bmQuZGVjZS5zZCddLFxuICAgIFsndXZ1JywgJ3ZpZGVvL3ZuZC51dnZ1Lm1wNCddLFxuICAgIFsndXZ2JywgJ3ZpZGVvL3ZuZC5kZWNlLnZpZGVvJ10sXG4gICAgWyd2Y2QnLCAnYXBwbGljYXRpb24veC1jZGxpbmsnXSxcbiAgICBbJ3ZjZicsICd0ZXh0L3gtdmNhcmQnXSxcbiAgICBbJ3ZjZycsICdhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXZjYXJkJ10sXG4gICAgWyd2Y3MnLCAndGV4dC94LXZjYWxlbmRhciddLFxuICAgIFsndmN4JywgJ2FwcGxpY2F0aW9uL3ZuZC52Y3gnXSxcbiAgICBbJ3ZkYScsICdhcHBsaWNhdGlvbi92ZGEnXSxcbiAgICBbJ3ZkbycsICd2aWRlby92ZG8nXSxcbiAgICBbJ3ZldycsICdhcHBsaWNhdGlvbi9ncm91cHdpc2UnXSxcbiAgICBbJ3ZpcycsICdhcHBsaWNhdGlvbi92bmQudmlzaW9uYXJ5J10sXG4gICAgWyd2aXYnLCBbJ3ZpZGVvL3Zpdm8nLCAndmlkZW8vdm5kLnZpdm8nXV0sXG4gICAgWyd2aXZvJywgWyd2aWRlby92aXZvJywgJ3ZpZGVvL3ZuZC52aXZvJ11dLFxuICAgIFsndm1kJywgJ2FwcGxpY2F0aW9uL3ZvY2FsdGVjLW1lZGlhLWRlc2MnXSxcbiAgICBbJ3ZtZicsICdhcHBsaWNhdGlvbi92b2NhbHRlYy1tZWRpYS1maWxlJ10sXG4gICAgWyd2b2MnLCBbJ2F1ZGlvL3ZvYycsICdhdWRpby94LXZvYyddXSxcbiAgICBbJ3ZvcycsICd2aWRlby92b3NhaWMnXSxcbiAgICBbJ3ZveCcsICdhdWRpby92b3h3YXJlJ10sXG4gICAgWyd2cWUnLCAnYXVkaW8veC10d2ludnEtcGx1Z2luJ10sXG4gICAgWyd2cWYnLCAnYXVkaW8veC10d2ludnEnXSxcbiAgICBbJ3ZxbCcsICdhdWRpby94LXR3aW52cS1wbHVnaW4nXSxcbiAgICBbJ3ZybWwnLCBbJ21vZGVsL3ZybWwnLCAneC13b3JsZC94LXZybWwnLCAnYXBwbGljYXRpb24veC12cm1sJ11dLFxuICAgIFsndnJ0JywgJ3gtd29ybGQveC12cnQnXSxcbiAgICBbJ3ZzZCcsIFsnYXBwbGljYXRpb24vdm5kLnZpc2lvJywgJ2FwcGxpY2F0aW9uL3gtdmlzaW8nXV0sXG4gICAgWyd2c2YnLCAnYXBwbGljYXRpb24vdm5kLnZzZiddLFxuICAgIFsndnN0JywgJ2FwcGxpY2F0aW9uL3gtdmlzaW8nXSxcbiAgICBbJ3ZzdycsICdhcHBsaWNhdGlvbi94LXZpc2lvJ10sXG4gICAgWyd2dHUnLCAnbW9kZWwvdm5kLnZ0dSddLFxuICAgIFsndnhtbCcsICdhcHBsaWNhdGlvbi92b2ljZXhtbCt4bWwnXSxcbiAgICBbJ3c2MCcsICdhcHBsaWNhdGlvbi93b3JkcGVyZmVjdDYuMCddLFxuICAgIFsndzYxJywgJ2FwcGxpY2F0aW9uL3dvcmRwZXJmZWN0Ni4xJ10sXG4gICAgWyd3NncnLCAnYXBwbGljYXRpb24vbXN3b3JkJ10sXG4gICAgWyd3YWQnLCAnYXBwbGljYXRpb24veC1kb29tJ10sXG4gICAgWyd3YXYnLCBbJ2F1ZGlvL3dhdicsICdhdWRpby94LXdhdiddXSxcbiAgICBbJ3dheCcsICdhdWRpby94LW1zLXdheCddLFxuICAgIFsnd2IxJywgJ2FwcGxpY2F0aW9uL3gtcXBybyddLFxuICAgIFsnd2JtcCcsICdpbWFnZS92bmQud2FwLndibXAnXSxcbiAgICBbJ3dicycsICdhcHBsaWNhdGlvbi92bmQuY3JpdGljYWx0b29scy53YnMreG1sJ10sXG4gICAgWyd3YnhtbCcsICdhcHBsaWNhdGlvbi92bmQud2FwLndieG1sJ10sXG4gICAgWyd3Y20nLCAnYXBwbGljYXRpb24vdm5kLm1zLXdvcmtzJ10sXG4gICAgWyd3ZGInLCAnYXBwbGljYXRpb24vdm5kLm1zLXdvcmtzJ10sXG4gICAgWyd3ZWInLCAnYXBwbGljYXRpb24vdm5kLnhhcmEnXSxcbiAgICBbJ3dlYmEnLCAnYXVkaW8vd2VibSddLFxuICAgIFsnd2VibScsICd2aWRlby93ZWJtJ10sXG4gICAgWyd3ZWJwJywgJ2ltYWdlL3dlYnAnXSxcbiAgICBbJ3dnJywgJ2FwcGxpY2F0aW9uL3ZuZC5wbWkud2lkZ2V0J10sXG4gICAgWyd3Z3QnLCAnYXBwbGljYXRpb24vd2lkZ2V0J10sXG4gICAgWyd3aXonLCAnYXBwbGljYXRpb24vbXN3b3JkJ10sXG4gICAgWyd3azEnLCAnYXBwbGljYXRpb24veC0xMjMnXSxcbiAgICBbJ3drcycsICdhcHBsaWNhdGlvbi92bmQubXMtd29ya3MnXSxcbiAgICBbJ3dtJywgJ3ZpZGVvL3gtbXMtd20nXSxcbiAgICBbJ3dtYScsICdhdWRpby94LW1zLXdtYSddLFxuICAgIFsnd21kJywgJ2FwcGxpY2F0aW9uL3gtbXMtd21kJ10sXG4gICAgWyd3bWYnLCBbJ3dpbmRvd3MvbWV0YWZpbGUnLCAnYXBwbGljYXRpb24veC1tc21ldGFmaWxlJ11dLFxuICAgIFsnd21sJywgJ3RleHQvdm5kLndhcC53bWwnXSxcbiAgICBbJ3dtbGMnLCAnYXBwbGljYXRpb24vdm5kLndhcC53bWxjJ10sXG4gICAgWyd3bWxzJywgJ3RleHQvdm5kLndhcC53bWxzY3JpcHQnXSxcbiAgICBbJ3dtbHNjJywgJ2FwcGxpY2F0aW9uL3ZuZC53YXAud21sc2NyaXB0YyddLFxuICAgIFsnd212JywgJ3ZpZGVvL3gtbXMtd212J10sXG4gICAgWyd3bXgnLCAndmlkZW8veC1tcy13bXgnXSxcbiAgICBbJ3dteicsICdhcHBsaWNhdGlvbi94LW1zLXdteiddLFxuICAgIFsnd29mZicsICdhcHBsaWNhdGlvbi94LWZvbnQtd29mZiddLFxuICAgIFsnd29yZCcsICdhcHBsaWNhdGlvbi9tc3dvcmQnXSxcbiAgICBbJ3dwJywgJ2FwcGxpY2F0aW9uL3dvcmRwZXJmZWN0J10sXG4gICAgWyd3cDUnLCBbJ2FwcGxpY2F0aW9uL3dvcmRwZXJmZWN0JywgJ2FwcGxpY2F0aW9uL3dvcmRwZXJmZWN0Ni4wJ11dLFxuICAgIFsnd3A2JywgJ2FwcGxpY2F0aW9uL3dvcmRwZXJmZWN0J10sXG4gICAgWyd3cGQnLCBbJ2FwcGxpY2F0aW9uL3dvcmRwZXJmZWN0JywgJ2FwcGxpY2F0aW9uL3ZuZC53b3JkcGVyZmVjdCcsICdhcHBsaWNhdGlvbi94LXdwd2luJ11dLFxuICAgIFsnd3BsJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy13cGwnXSxcbiAgICBbJ3dwcycsICdhcHBsaWNhdGlvbi92bmQubXMtd29ya3MnXSxcbiAgICBbJ3dxMScsICdhcHBsaWNhdGlvbi94LWxvdHVzJ10sXG4gICAgWyd3cWQnLCAnYXBwbGljYXRpb24vdm5kLndxZCddLFxuICAgIFsnd3JpJywgWydhcHBsaWNhdGlvbi9tc3dyaXRlJywgJ2FwcGxpY2F0aW9uL3gtd3JpJywgJ2FwcGxpY2F0aW9uL3gtbXN3cml0ZSddXSxcbiAgICBbJ3dybCcsIFsnbW9kZWwvdnJtbCcsICd4LXdvcmxkL3gtdnJtbCcsICdhcHBsaWNhdGlvbi94LXdvcmxkJ11dLFxuICAgIFsnd3J6JywgWydtb2RlbC92cm1sJywgJ3gtd29ybGQveC12cm1sJ11dLFxuICAgIFsnd3NjJywgJ3RleHQvc2NyaXBsZXQnXSxcbiAgICBbJ3dzZGwnLCAnYXBwbGljYXRpb24vd3NkbCt4bWwnXSxcbiAgICBbJ3dzcG9saWN5JywgJ2FwcGxpY2F0aW9uL3dzcG9saWN5K3htbCddLFxuICAgIFsnd3NyYycsICdhcHBsaWNhdGlvbi94LXdhaXMtc291cmNlJ10sXG4gICAgWyd3dGInLCAnYXBwbGljYXRpb24vdm5kLndlYnR1cmJvJ10sXG4gICAgWyd3dGsnLCAnYXBwbGljYXRpb24veC13aW50YWxrJ10sXG4gICAgWyd3dngnLCAndmlkZW8veC1tcy13dngnXSxcbiAgICBbJ3gtcG5nJywgJ2ltYWdlL3BuZyddLFxuICAgIFsneDNkJywgJ2FwcGxpY2F0aW9uL3ZuZC5oem4tM2QtY3Jvc3N3b3JkJ10sXG4gICAgWyd4YWYnLCAneC13b3JsZC94LXZybWwnXSxcbiAgICBbJ3hhcCcsICdhcHBsaWNhdGlvbi94LXNpbHZlcmxpZ2h0LWFwcCddLFxuICAgIFsneGFyJywgJ2FwcGxpY2F0aW9uL3ZuZC54YXJhJ10sXG4gICAgWyd4YmFwJywgJ2FwcGxpY2F0aW9uL3gtbXMteGJhcCddLFxuICAgIFsneGJkJywgJ2FwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guZG9jdXdvcmtzLmJpbmRlciddLFxuICAgIFsneGJtJywgWydpbWFnZS94Ym0nLCAnaW1hZ2UveC14Ym0nLCAnaW1hZ2UveC14Yml0bWFwJ11dLFxuICAgIFsneGRmJywgJ2FwcGxpY2F0aW9uL3hjYXAtZGlmZit4bWwnXSxcbiAgICBbJ3hkbScsICdhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtK3htbCddLFxuICAgIFsneGRwJywgJ2FwcGxpY2F0aW9uL3ZuZC5hZG9iZS54ZHAreG1sJ10sXG4gICAgWyd4ZHInLCAndmlkZW8veC1hbXQtZGVtb3J1biddLFxuICAgIFsneGRzc2MnLCAnYXBwbGljYXRpb24vZHNzYyt4bWwnXSxcbiAgICBbJ3hkdycsICdhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRvY3V3b3JrcyddLFxuICAgIFsneGVuYycsICdhcHBsaWNhdGlvbi94ZW5jK3htbCddLFxuICAgIFsneGVyJywgJ2FwcGxpY2F0aW9uL3BhdGNoLW9wcy1lcnJvcit4bWwnXSxcbiAgICBbJ3hmZGYnLCAnYXBwbGljYXRpb24vdm5kLmFkb2JlLnhmZGYnXSxcbiAgICBbJ3hmZGwnLCAnYXBwbGljYXRpb24vdm5kLnhmZGwnXSxcbiAgICBbJ3hneicsICd4Z2wvZHJhd2luZyddLFxuICAgIFsneGh0bWwnLCAnYXBwbGljYXRpb24veGh0bWwreG1sJ10sXG4gICAgWyd4aWYnLCAnaW1hZ2Uvdm5kLnhpZmYnXSxcbiAgICBbJ3hsJywgJ2FwcGxpY2F0aW9uL2V4Y2VsJ10sXG4gICAgWyd4bGEnLCBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcsICdhcHBsaWNhdGlvbi9leGNlbCcsICdhcHBsaWNhdGlvbi94LW1zZXhjZWwnLCAnYXBwbGljYXRpb24veC1leGNlbCddXSxcbiAgICBbJ3hsYW0nLCAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmFkZGluLm1hY3JvZW5hYmxlZC4xMiddLFxuICAgIFsneGxiJywgWydhcHBsaWNhdGlvbi9leGNlbCcsICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnLCAnYXBwbGljYXRpb24veC1leGNlbCddXSxcbiAgICBbJ3hsYycsIFsnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJywgJ2FwcGxpY2F0aW9uL2V4Y2VsJywgJ2FwcGxpY2F0aW9uL3gtZXhjZWwnXV0sXG4gICAgWyd4bGQnLCBbJ2FwcGxpY2F0aW9uL2V4Y2VsJywgJ2FwcGxpY2F0aW9uL3gtZXhjZWwnXV0sXG4gICAgWyd4bGsnLCBbJ2FwcGxpY2F0aW9uL2V4Y2VsJywgJ2FwcGxpY2F0aW9uL3gtZXhjZWwnXV0sXG4gICAgWyd4bGwnLCBbJ2FwcGxpY2F0aW9uL2V4Y2VsJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcsICdhcHBsaWNhdGlvbi94LWV4Y2VsJ11dLFxuICAgIFsneGxtJywgWydhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnLCAnYXBwbGljYXRpb24vZXhjZWwnLCAnYXBwbGljYXRpb24veC1leGNlbCddXSxcbiAgICBbJ3hscycsIFsnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJywgJ2FwcGxpY2F0aW9uL2V4Y2VsJywgJ2FwcGxpY2F0aW9uL3gtbXNleGNlbCcsICdhcHBsaWNhdGlvbi94LWV4Y2VsJ11dLFxuICAgIFsneGxzYicsICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQuYmluYXJ5Lm1hY3JvZW5hYmxlZC4xMiddLFxuICAgIFsneGxzbScsICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQubWFjcm9lbmFibGVkLjEyJ10sXG4gICAgWyd4bHN4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0J10sXG4gICAgWyd4bHQnLCBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcsICdhcHBsaWNhdGlvbi9leGNlbCcsICdhcHBsaWNhdGlvbi94LWV4Y2VsJ11dLFxuICAgIFsneGx0bScsICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyJ10sXG4gICAgWyd4bHR4JywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlJ10sXG4gICAgWyd4bHYnLCBbJ2FwcGxpY2F0aW9uL2V4Y2VsJywgJ2FwcGxpY2F0aW9uL3gtZXhjZWwnXV0sXG4gICAgWyd4bHcnLCBbJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcsICdhcHBsaWNhdGlvbi9leGNlbCcsICdhcHBsaWNhdGlvbi94LW1zZXhjZWwnLCAnYXBwbGljYXRpb24veC1leGNlbCddXSxcbiAgICBbJ3htJywgJ2F1ZGlvL3htJ10sXG4gICAgWyd4bWwnLCBbJ2FwcGxpY2F0aW9uL3htbCcsICd0ZXh0L3htbCcsICdhcHBsaWNhdGlvbi9hdG9tK3htbCcsICdhcHBsaWNhdGlvbi9yc3MreG1sJ11dLFxuICAgIFsneG16JywgJ3hnbC9tb3ZpZSddLFxuICAgIFsneG8nLCAnYXBwbGljYXRpb24vdm5kLm9scGMtc3VnYXInXSxcbiAgICBbJ3hvZicsICd4LXdvcmxkL3gtdnJtbCddLFxuICAgIFsneG9wJywgJ2FwcGxpY2F0aW9uL3hvcCt4bWwnXSxcbiAgICBbJ3hwaScsICdhcHBsaWNhdGlvbi94LXhwaW5zdGFsbCddLFxuICAgIFsneHBpeCcsICdhcHBsaWNhdGlvbi94LXZuZC5scy14cGl4J10sXG4gICAgWyd4cG0nLCBbJ2ltYWdlL3hwbScsICdpbWFnZS94LXhwaXhtYXAnXV0sXG4gICAgWyd4cHInLCAnYXBwbGljYXRpb24vdm5kLmlzLXhwciddLFxuICAgIFsneHBzJywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy14cHNkb2N1bWVudCddLFxuICAgIFsneHB3JywgJ2FwcGxpY2F0aW9uL3ZuZC5pbnRlcmNvbi5mb3JtbmV0J10sXG4gICAgWyd4c2x0JywgJ2FwcGxpY2F0aW9uL3hzbHQreG1sJ10sXG4gICAgWyd4c20nLCAnYXBwbGljYXRpb24vdm5kLnN5bmNtbCt4bWwnXSxcbiAgICBbJ3hzcGYnLCAnYXBwbGljYXRpb24veHNwZit4bWwnXSxcbiAgICBbJ3hzcicsICd2aWRlby94LWFtdC1zaG93cnVuJ10sXG4gICAgWyd4dWwnLCAnYXBwbGljYXRpb24vdm5kLm1vemlsbGEueHVsK3htbCddLFxuICAgIFsneHdkJywgWydpbWFnZS94LXh3ZCcsICdpbWFnZS94LXh3aW5kb3dkdW1wJ11dLFxuICAgIFsneHl6JywgWydjaGVtaWNhbC94LXh5eicsICdjaGVtaWNhbC94LXBkYiddXSxcbiAgICBbJ3lhbmcnLCAnYXBwbGljYXRpb24veWFuZyddLFxuICAgIFsneWluJywgJ2FwcGxpY2F0aW9uL3lpbit4bWwnXSxcbiAgICBbJ3onLCBbJ2FwcGxpY2F0aW9uL3gtY29tcHJlc3NlZCcsICdhcHBsaWNhdGlvbi94LWNvbXByZXNzJ11dLFxuICAgIFsnemF6JywgJ2FwcGxpY2F0aW9uL3ZuZC56emF6ei5kZWNrK3htbCddLFxuICAgIFsnemlwJywgWydhcHBsaWNhdGlvbi96aXAnLCAnbXVsdGlwYXJ0L3gtemlwJywgJ2FwcGxpY2F0aW9uL3gtemlwLWNvbXByZXNzZWQnLCAnYXBwbGljYXRpb24veC1jb21wcmVzc2VkJ11dLFxuICAgIFsnemlyJywgJ2FwcGxpY2F0aW9uL3ZuZC56dWwnXSxcbiAgICBbJ3ptbScsICdhcHBsaWNhdGlvbi92bmQuaGFuZGhlbGQtZW50ZXJ0YWlubWVudCt4bWwnXSxcbiAgICBbJ3pvbycsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSxcbiAgICBbJ3pzaCcsICd0ZXh0L3gtc2NyaXB0LnpzaCddXG5dKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZGV0ZWN0TWltZVR5cGUoZmlsZW5hbWUpIHtcbiAgICAgICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRNaW1lVHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXJzZWQgPSBwYXRoLnBhcnNlKGZpbGVuYW1lKTtcbiAgICAgICAgbGV0IGV4dGVuc2lvbiA9IChwYXJzZWQuZXh0LnN1YnN0cigxKSB8fCBwYXJzZWQubmFtZSB8fCAnJykuc3BsaXQoJz8nKS5zaGlmdCgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBsZXQgdmFsdWUgPSBkZWZhdWx0TWltZVR5cGU7XG5cbiAgICAgICAgaWYgKGV4dGVuc2lvbnMuaGFzKGV4dGVuc2lvbikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZXh0ZW5zaW9ucy5nZXQoZXh0ZW5zaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuXG4gICAgZGV0ZWN0RXh0ZW5zaW9uKG1pbWVUeXBlKSB7XG4gICAgICAgIGlmICghbWltZVR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0RXh0ZW5zaW9uO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJ0cyA9IChtaW1lVHlwZSB8fCAnJykudG9Mb3dlckNhc2UoKS50cmltKCkuc3BsaXQoJy8nKTtcbiAgICAgICAgbGV0IHJvb3RUeXBlID0gcGFydHMuc2hpZnQoKS50cmltKCk7XG4gICAgICAgIGxldCBzdWJUeXBlID0gcGFydHMuam9pbignLycpLnRyaW0oKTtcblxuICAgICAgICBpZiAobWltZVR5cGVzLmhhcyhyb290VHlwZSArICcvJyArIHN1YlR5cGUpKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBtaW1lVHlwZXMuZ2V0KHJvb3RUeXBlICsgJy8nICsgc3ViVHlwZSk7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHJvb3RUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3R4dCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnYmluJztcbiAgICAgICAgfVxuICAgIH1cbn07XG4iXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJkZWZhdWx0TWltZVR5cGUiLCJkZWZhdWx0RXh0ZW5zaW9uIiwibWltZVR5cGVzIiwiTWFwIiwiZXh0ZW5zaW9ucyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZXRlY3RNaW1lVHlwZSIsImZpbGVuYW1lIiwicGFyc2VkIiwicGFyc2UiLCJleHRlbnNpb24iLCJleHQiLCJzdWJzdHIiLCJuYW1lIiwic3BsaXQiLCJzaGlmdCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInZhbHVlIiwiaGFzIiwiZ2V0IiwiQXJyYXkiLCJpc0FycmF5IiwiZGV0ZWN0RXh0ZW5zaW9uIiwibWltZVR5cGUiLCJwYXJ0cyIsInJvb3RUeXBlIiwic3ViVHlwZSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/index.js":
/*!********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */ \nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst punycode = __webpack_require__(/*! ../punycode */ \"(rsc)/./node_modules/nodemailer/lib/punycode/index.js\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nconst qp = __webpack_require__(/*! ../qp */ \"(rsc)/./node_modules/nodemailer/lib/qp/index.js\");\nconst base64 = __webpack_require__(/*! ../base64 */ \"(rsc)/./node_modules/nodemailer/lib/base64/index.js\");\nconst addressparser = __webpack_require__(/*! ../addressparser */ \"(rsc)/./node_modules/nodemailer/lib/addressparser/index.js\");\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst LastNewline = __webpack_require__(/*! ./last-newline */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js\");\nconst LeWindows = __webpack_require__(/*! ./le-windows */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\");\nconst LeUnix = __webpack_require__(/*! ./le-unix */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js\");\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing\n * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'\n */ class MimeNode {\n    constructor(contentType, options){\n        this.nodeCounter = 0;\n        options = options || {};\n        /**\n         * shared part of the unique multipart boundary\n         */ this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString(\"hex\");\n        this.boundaryPrefix = options.boundaryPrefix || \"--_NmP\";\n        this.disableFileAccess = !!options.disableFileAccess;\n        this.disableUrlAccess = !!options.disableUrlAccess;\n        this.normalizeHeaderKey = options.normalizeHeaderKey;\n        /**\n         * If date headers is missing and current node is the root, this value is used instead\n         */ this.date = new Date();\n        /**\n         * Root node for current mime tree\n         */ this.rootNode = options.rootNode || this;\n        /**\n         * If true include Bcc in generated headers (if available)\n         */ this.keepBcc = !!options.keepBcc;\n        /**\n         * If filename is specified but contentType is not (probably an attachment)\n         * detect the content type from filename extension\n         */ if (options.filename) {\n            /**\n             * Filename for this node. Useful with attachments\n             */ this.filename = options.filename;\n            if (!contentType) {\n                contentType = mimeFuncs.detectMimeType(this.filename.split(\".\").pop());\n            }\n        }\n        /**\n         * Indicates which encoding should be used for header strings: \"Q\" or \"B\"\n         */ this.textEncoding = (options.textEncoding || \"\").toString().trim().charAt(0).toUpperCase();\n        /**\n         * Immediate parent for this node (or undefined if not set)\n         */ this.parentNode = options.parentNode;\n        /**\n         * Hostname for default message-id values\n         */ this.hostname = options.hostname;\n        /**\n         * If set to 'win' then uses \\r\\n, if 'linux' then \\n. If not set (or `raw` is used) then newlines are kept as is.\n         */ this.newline = options.newline;\n        /**\n         * An array for possible child nodes\n         */ this.childNodes = [];\n        /**\n         * Used for generating unique boundaries (prepended to the shared base)\n         */ this._nodeId = ++this.rootNode.nodeCounter;\n        /**\n         * A list of header values for this node in the form of [{key:'', value:''}]\n         */ this._headers = [];\n        /**\n         * True if the content only uses ASCII printable characters\n         * @type {Boolean}\n         */ this._isPlainText = false;\n        /**\n         * True if the content is plain text but has longer lines than allowed\n         * @type {Boolean}\n         */ this._hasLongLines = false;\n        /**\n         * If set, use instead this value for envelopes instead of generating one\n         * @type {Boolean}\n         */ this._envelope = false;\n        /**\n         * If set then use this value as the stream content instead of building it\n         * @type {String|Buffer|Stream}\n         */ this._raw = false;\n        /**\n         * Additional transform streams that the message will be piped before\n         * exposing by createReadStream\n         * @type {Array}\n         */ this._transforms = [];\n        /**\n         * Additional process functions that the message will be piped through before\n         * exposing by createReadStream. These functions are run after transforms\n         * @type {Array}\n         */ this._processFuncs = [];\n        /**\n         * If content type is set (or derived from the filename) add it to headers\n         */ if (contentType) {\n            this.setHeader(\"Content-Type\", contentType);\n        }\n    }\n    /////// PUBLIC METHODS\n    /**\n     * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n     *\n     * @param {String} [contentType] Optional content type\n     * @param {Object} [options] Optional options object\n     * @return {Object} Created node object\n     */ createChild(contentType, options) {\n        if (!options && typeof contentType === \"object\") {\n            options = contentType;\n            contentType = undefined;\n        }\n        let node = new MimeNode(contentType, options);\n        this.appendChild(node);\n        return node;\n    }\n    /**\n     * Appends an existing node to the mime tree. Removes the node from an existing\n     * tree if needed\n     *\n     * @param {Object} childNode node to be appended\n     * @return {Object} Appended node object\n     */ appendChild(childNode) {\n        if (childNode.rootNode !== this.rootNode) {\n            childNode.rootNode = this.rootNode;\n            childNode._nodeId = ++this.rootNode.nodeCounter;\n        }\n        childNode.parentNode = this;\n        this.childNodes.push(childNode);\n        return childNode;\n    }\n    /**\n     * Replaces current node with another node\n     *\n     * @param {Object} node Replacement node\n     * @return {Object} Replacement node\n     */ replace(node) {\n        if (node === this) {\n            return this;\n        }\n        this.parentNode.childNodes.forEach((childNode, i)=>{\n            if (childNode === this) {\n                node.rootNode = this.rootNode;\n                node.parentNode = this.parentNode;\n                node._nodeId = this._nodeId;\n                this.rootNode = this;\n                this.parentNode = undefined;\n                node.parentNode.childNodes[i] = node;\n            }\n        });\n        return node;\n    }\n    /**\n     * Removes current node from the mime tree\n     *\n     * @return {Object} removed node\n     */ remove() {\n        if (!this.parentNode) {\n            return this;\n        }\n        for(let i = this.parentNode.childNodes.length - 1; i >= 0; i--){\n            if (this.parentNode.childNodes[i] === this) {\n                this.parentNode.childNodes.splice(i, 1);\n                this.parentNode = undefined;\n                this.rootNode = this;\n                return this;\n            }\n        }\n    }\n    /**\n     * Sets a header value. If the value for selected key exists, it is overwritten.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */ setHeader(key, value) {\n        let added = false, headerValue;\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === \"object\") {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && \"value\" in key) {\n                this.setHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach((i)=>{\n                    this.setHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach((i)=>{\n                    this.setHeader(i, key[i]);\n                });\n            }\n            return this;\n        }\n        key = this._normalizeHeaderKey(key);\n        headerValue = {\n            key,\n            value\n        };\n        // Check if the value exists and overwrite\n        for(let i = 0, len = this._headers.length; i < len; i++){\n            if (this._headers[i].key === key) {\n                if (!added) {\n                    // replace the first match\n                    this._headers[i] = headerValue;\n                    added = true;\n                } else {\n                    // remove following matches\n                    this._headers.splice(i, 1);\n                    i--;\n                    len--;\n                }\n            }\n        }\n        // match not found, append the value\n        if (!added) {\n            this._headers.push(headerValue);\n        }\n        return this;\n    }\n    /**\n     * Adds a header value. If the value for selected key exists, the value is appended\n     * as a new field and old one is not touched.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */ addHeader(key, value) {\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === \"object\") {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && key.value) {\n                this.addHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach((i)=>{\n                    this.addHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach((i)=>{\n                    this.addHeader(i, key[i]);\n                });\n            }\n            return this;\n        } else if (Array.isArray(value)) {\n            value.forEach((val)=>{\n                this.addHeader(key, val);\n            });\n            return this;\n        }\n        this._headers.push({\n            key: this._normalizeHeaderKey(key),\n            value\n        });\n        return this;\n    }\n    /**\n     * Retrieves the first mathcing value of a selected key\n     *\n     * @param {String} key Key to search for\n     * @retun {String} Value for the key\n     */ getHeader(key) {\n        key = this._normalizeHeaderKey(key);\n        for(let i = 0, len = this._headers.length; i < len; i++){\n            if (this._headers[i].key === key) {\n                return this._headers[i].value;\n            }\n        }\n    }\n    /**\n     * Sets body content for current node. If the value is a string, charset is added automatically\n     * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n     * the charset yourself\n     *\n     * @param (String|Buffer) content Body content\n     * @return {Object} current node\n     */ setContent(content) {\n        this.content = content;\n        if (typeof this.content.pipe === \"function\") {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = (err)=>{\n                this.content.removeListener(\"error\", this._contentErrorHandler);\n                this.content = err;\n            };\n            this.content.once(\"error\", this._contentErrorHandler);\n        } else if (typeof this.content === \"string\") {\n            this._isPlainText = mimeFuncs.isPlainText(this.content);\n            if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {\n                // If there are lines longer than 76 symbols/bytes do not use 7bit\n                this._hasLongLines = true;\n            }\n        }\n        return this;\n    }\n    build(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        let stream = this.createReadStream();\n        let buf = [];\n        let buflen = 0;\n        let returned = false;\n        stream.on(\"readable\", ()=>{\n            let chunk;\n            while((chunk = stream.read()) !== null){\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n        });\n        stream.once(\"error\", (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n        stream.once(\"end\", (chunk)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            if (chunk && chunk.length) {\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n            return callback(null, Buffer.concat(buf, buflen));\n        });\n        return promise;\n    }\n    getTransferEncoding() {\n        let transferEncoding = false;\n        let contentType = (this.getHeader(\"Content-Type\") || \"\").toString().toLowerCase().trim();\n        if (this.content) {\n            transferEncoding = (this.getHeader(\"Content-Transfer-Encoding\") || \"\").toString().toLowerCase().trim();\n            if (!transferEncoding || ![\n                \"base64\",\n                \"quoted-printable\"\n            ].includes(transferEncoding)) {\n                if (/^text\\//i.test(contentType)) {\n                    // If there are no special symbols, no need to modify the text\n                    if (this._isPlainText && !this._hasLongLines) {\n                        transferEncoding = \"7bit\";\n                    } else if (typeof this.content === \"string\" || this.content instanceof Buffer) {\n                        // detect preferred encoding for string value\n                        transferEncoding = this._getTextEncoding(this.content) === \"Q\" ? \"quoted-printable\" : \"base64\";\n                    } else {\n                        // we can not check content for a stream, so either use preferred encoding or fallback to QP\n                        transferEncoding = this.textEncoding === \"B\" ? \"base64\" : \"quoted-printable\";\n                    }\n                } else if (!/^(multipart|message)\\//i.test(contentType)) {\n                    transferEncoding = transferEncoding || \"base64\";\n                }\n            }\n        }\n        return transferEncoding;\n    }\n    /**\n     * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n     *\n     * @returns {String} Headers\n     */ buildHeaders() {\n        let transferEncoding = this.getTransferEncoding();\n        let headers = [];\n        if (transferEncoding) {\n            this.setHeader(\"Content-Transfer-Encoding\", transferEncoding);\n        }\n        if (this.filename && !this.getHeader(\"Content-Disposition\")) {\n            this.setHeader(\"Content-Disposition\", \"attachment\");\n        }\n        // Ensure mandatory header fields\n        if (this.rootNode === this) {\n            if (!this.getHeader(\"Date\")) {\n                this.setHeader(\"Date\", this.date.toUTCString().replace(/GMT/, \"+0000\"));\n            }\n            // ensure that Message-Id is present\n            this.messageId();\n            if (!this.getHeader(\"MIME-Version\")) {\n                this.setHeader(\"MIME-Version\", \"1.0\");\n            }\n            // Ensure that Content-Type is the last header for the root node\n            for(let i = this._headers.length - 2; i >= 0; i--){\n                let header = this._headers[i];\n                if (header.key === \"Content-Type\") {\n                    this._headers.splice(i, 1);\n                    this._headers.push(header);\n                }\n            }\n        }\n        this._headers.forEach((header)=>{\n            let key = header.key;\n            let value = header.value;\n            let structured;\n            let param;\n            let options = {};\n            let formattedHeaders = [\n                \"From\",\n                \"Sender\",\n                \"To\",\n                \"Cc\",\n                \"Bcc\",\n                \"Reply-To\",\n                \"Date\",\n                \"References\"\n            ];\n            if (value && typeof value === \"object\" && !formattedHeaders.includes(key)) {\n                Object.keys(value).forEach((key)=>{\n                    if (key !== \"value\") {\n                        options[key] = value[key];\n                    }\n                });\n                value = (value.value || \"\").toString();\n                if (!value.trim()) {\n                    return;\n                }\n            }\n            if (options.prepared) {\n                // header value is\n                if (options.foldLines) {\n                    headers.push(mimeFuncs.foldLines(key + \": \" + value));\n                } else {\n                    headers.push(key + \": \" + value);\n                }\n                return;\n            }\n            switch(header.key){\n                case \"Content-Disposition\":\n                    structured = mimeFuncs.parseHeaderValue(value);\n                    if (this.filename) {\n                        structured.params.filename = this.filename;\n                    }\n                    value = mimeFuncs.buildHeaderValue(structured);\n                    break;\n                case \"Content-Type\":\n                    structured = mimeFuncs.parseHeaderValue(value);\n                    this._handleContentType(structured);\n                    if (structured.value.match(/^text\\/plain\\b/) && typeof this.content === \"string\" && /[\\u0080-\\uFFFF]/.test(this.content)) {\n                        structured.params.charset = \"utf-8\";\n                    }\n                    value = mimeFuncs.buildHeaderValue(structured);\n                    if (this.filename) {\n                        // add support for non-compliant clients like QQ webmail\n                        // we can't build the value with buildHeaderValue as the value is non standard and\n                        // would be converted to parameter continuation encoding that we do not want\n                        param = this._encodeWords(this.filename);\n                        if (param !== this.filename || /[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(param)) {\n                            // include value in quotes if needed\n                            param = '\"' + param + '\"';\n                        }\n                        value += \"; name=\" + param;\n                    }\n                    break;\n                case \"Bcc\":\n                    if (!this.keepBcc) {\n                        // skip BCC values\n                        return;\n                    }\n                    break;\n            }\n            value = this._encodeHeaderValue(key, value);\n            // skip empty lines\n            if (!(value || \"\").toString().trim()) {\n                return;\n            }\n            if (typeof this.normalizeHeaderKey === \"function\") {\n                let normalized = this.normalizeHeaderKey(key, value);\n                if (normalized && typeof normalized === \"string\" && normalized.length) {\n                    key = normalized;\n                }\n            }\n            headers.push(mimeFuncs.foldLines(key + \": \" + value, 76));\n        });\n        return headers.join(\"\\r\\n\");\n    }\n    /**\n     * Streams the rfc2822 message from the current node. If this is a root node,\n     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n     *\n     * @return {String} Compiled message\n     */ createReadStream(options) {\n        options = options || {};\n        let stream = new PassThrough(options);\n        let outputStream = stream;\n        let transform;\n        this.stream(stream, options, (err)=>{\n            if (err) {\n                outputStream.emit(\"error\", err);\n                return;\n            }\n            stream.end();\n        });\n        for(let i = 0, len = this._transforms.length; i < len; i++){\n            transform = typeof this._transforms[i] === \"function\" ? this._transforms[i]() : this._transforms[i];\n            outputStream.once(\"error\", (err)=>{\n                transform.emit(\"error\", err);\n            });\n            outputStream = outputStream.pipe(transform);\n        }\n        // ensure terminating newline after possible user transforms\n        transform = new LastNewline();\n        outputStream.once(\"error\", (err)=>{\n            transform.emit(\"error\", err);\n        });\n        outputStream = outputStream.pipe(transform);\n        // dkim and stuff\n        for(let i = 0, len = this._processFuncs.length; i < len; i++){\n            transform = this._processFuncs[i];\n            outputStream = transform(outputStream);\n        }\n        if (this.newline) {\n            const winbreak = [\n                \"win\",\n                \"windows\",\n                \"dos\",\n                \"\\r\\n\"\n            ].includes(this.newline.toString().toLowerCase());\n            const newlineTransform = winbreak ? new LeWindows() : new LeUnix();\n            const stream = outputStream.pipe(newlineTransform);\n            outputStream.on(\"error\", (err)=>stream.emit(\"error\", err));\n            return stream;\n        }\n        return outputStream;\n    }\n    /**\n     * Appends a transform stream object to the transforms list. Final output\n     * is passed through this stream before exposing\n     *\n     * @param {Object} transform Read-Write stream\n     */ transform(transform) {\n        this._transforms.push(transform);\n    }\n    /**\n     * Appends a post process function. The functon is run after transforms and\n     * uses the following syntax\n     *\n     *   processFunc(input) -> outputStream\n     *\n     * @param {Object} processFunc Read-Write stream\n     */ processFunc(processFunc) {\n        this._processFuncs.push(processFunc);\n    }\n    stream(outputStream, options, done) {\n        let transferEncoding = this.getTransferEncoding();\n        let contentStream;\n        let localStream;\n        // protect actual callback against multiple triggering\n        let returned = false;\n        let callback = (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            done(err);\n        };\n        // for multipart nodes, push child nodes\n        // for content nodes end the stream\n        let finalize = ()=>{\n            let childId = 0;\n            let processChildNode = ()=>{\n                if (childId >= this.childNodes.length) {\n                    outputStream.write(\"\\r\\n--\" + this.boundary + \"--\\r\\n\");\n                    return callback();\n                }\n                let child = this.childNodes[childId++];\n                outputStream.write((childId > 1 ? \"\\r\\n\" : \"\") + \"--\" + this.boundary + \"\\r\\n\");\n                child.stream(outputStream, options, (err)=>{\n                    if (err) {\n                        return callback(err);\n                    }\n                    setImmediate(processChildNode);\n                });\n            };\n            if (this.multipart) {\n                setImmediate(processChildNode);\n            } else {\n                return callback();\n            }\n        };\n        // pushes node content\n        let sendContent = ()=>{\n            if (this.content) {\n                if (Object.prototype.toString.call(this.content) === \"[object Error]\") {\n                    // content is already errored\n                    return callback(this.content);\n                }\n                if (typeof this.content.pipe === \"function\") {\n                    this.content.removeListener(\"error\", this._contentErrorHandler);\n                    this._contentErrorHandler = (err)=>callback(err);\n                    this.content.once(\"error\", this._contentErrorHandler);\n                }\n                let createStream = ()=>{\n                    if ([\n                        \"quoted-printable\",\n                        \"base64\"\n                    ].includes(transferEncoding)) {\n                        contentStream = new (transferEncoding === \"base64\" ? base64 : qp).Encoder(options);\n                        contentStream.pipe(outputStream, {\n                            end: false\n                        });\n                        contentStream.once(\"end\", finalize);\n                        contentStream.once(\"error\", (err)=>callback(err));\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(contentStream);\n                    } else {\n                        // anything that is not QP or Base54 passes as-is\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(outputStream, {\n                            end: false\n                        });\n                        localStream.once(\"end\", finalize);\n                    }\n                    localStream.once(\"error\", (err)=>callback(err));\n                };\n                if (this.content._resolve) {\n                    let chunks = [];\n                    let chunklen = 0;\n                    let returned = false;\n                    let sourceStream = this._getStream(this.content);\n                    sourceStream.on(\"error\", (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        callback(err);\n                    });\n                    sourceStream.on(\"readable\", ()=>{\n                        let chunk;\n                        while((chunk = sourceStream.read()) !== null){\n                            chunks.push(chunk);\n                            chunklen += chunk.length;\n                        }\n                    });\n                    sourceStream.on(\"end\", ()=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        this.content._resolve = false;\n                        this.content._resolvedValue = Buffer.concat(chunks, chunklen);\n                        setImmediate(createStream);\n                    });\n                } else {\n                    setImmediate(createStream);\n                }\n                return;\n            } else {\n                return setImmediate(finalize);\n            }\n        };\n        if (this._raw) {\n            setImmediate(()=>{\n                if (Object.prototype.toString.call(this._raw) === \"[object Error]\") {\n                    // content is already errored\n                    return callback(this._raw);\n                }\n                // remove default error handler (if set)\n                if (typeof this._raw.pipe === \"function\") {\n                    this._raw.removeListener(\"error\", this._contentErrorHandler);\n                }\n                let raw = this._getStream(this._raw);\n                raw.pipe(outputStream, {\n                    end: false\n                });\n                raw.on(\"error\", (err)=>outputStream.emit(\"error\", err));\n                raw.on(\"end\", finalize);\n            });\n        } else {\n            outputStream.write(this.buildHeaders() + \"\\r\\n\\r\\n\");\n            setImmediate(sendContent);\n        }\n    }\n    /**\n     * Sets envelope to be used instead of the generated one\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */ setEnvelope(envelope) {\n        let list;\n        this._envelope = {\n            from: false,\n            to: []\n        };\n        if (envelope.from) {\n            list = [];\n            this._convertAddresses(this._parseAddresses(envelope.from), list);\n            list = list.filter((address)=>address && address.address);\n            if (list.length && list[0]) {\n                this._envelope.from = list[0].address;\n            }\n        }\n        [\n            \"to\",\n            \"cc\",\n            \"bcc\"\n        ].forEach((key)=>{\n            if (envelope[key]) {\n                this._convertAddresses(this._parseAddresses(envelope[key]), this._envelope.to);\n            }\n        });\n        this._envelope.to = this._envelope.to.map((to)=>to.address).filter((address)=>address);\n        let standardFields = [\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"from\"\n        ];\n        Object.keys(envelope).forEach((key)=>{\n            if (!standardFields.includes(key)) {\n                this._envelope[key] = envelope[key];\n            }\n        });\n        return this;\n    }\n    /**\n     * Generates and returns an object with parsed address fields\n     *\n     * @return {Object} Address object\n     */ getAddresses() {\n        let addresses = {};\n        this._headers.forEach((header)=>{\n            let key = header.key.toLowerCase();\n            if ([\n                \"from\",\n                \"sender\",\n                \"reply-to\",\n                \"to\",\n                \"cc\",\n                \"bcc\"\n            ].includes(key)) {\n                if (!Array.isArray(addresses[key])) {\n                    addresses[key] = [];\n                }\n                this._convertAddresses(this._parseAddresses(header.value), addresses[key]);\n            }\n        });\n        return addresses;\n    }\n    /**\n     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */ getEnvelope() {\n        if (this._envelope) {\n            return this._envelope;\n        }\n        let envelope = {\n            from: false,\n            to: []\n        };\n        this._headers.forEach((header)=>{\n            let list = [];\n            if (header.key === \"From\" || !envelope.from && [\n                \"Reply-To\",\n                \"Sender\"\n            ].includes(header.key)) {\n                this._convertAddresses(this._parseAddresses(header.value), list);\n                if (list.length && list[0]) {\n                    envelope.from = list[0].address;\n                }\n            } else if ([\n                \"To\",\n                \"Cc\",\n                \"Bcc\"\n            ].includes(header.key)) {\n                this._convertAddresses(this._parseAddresses(header.value), envelope.to);\n            }\n        });\n        envelope.to = envelope.to.map((to)=>to.address);\n        return envelope;\n    }\n    /**\n     * Returns Message-Id value. If it does not exist, then creates one\n     *\n     * @return {String} Message-Id value\n     */ messageId() {\n        let messageId = this.getHeader(\"Message-ID\");\n        // You really should define your own Message-Id field!\n        if (!messageId) {\n            messageId = this._generateMessageId();\n            this.setHeader(\"Message-ID\", messageId);\n        }\n        return messageId;\n    }\n    /**\n     * Sets pregenerated content that will be used as the output of this node\n     *\n     * @param {String|Buffer|Stream} Raw MIME contents\n     */ setRaw(raw) {\n        this._raw = raw;\n        if (this._raw && typeof this._raw.pipe === \"function\") {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = (err)=>{\n                this._raw.removeListener(\"error\", this._contentErrorHandler);\n                this._raw = err;\n            };\n            this._raw.once(\"error\", this._contentErrorHandler);\n        }\n        return this;\n    }\n    /////// PRIVATE METHODS\n    /**\n     * Detects and returns handle to a stream related with the content.\n     *\n     * @param {Mixed} content Node content\n     * @returns {Object} Stream object\n     */ _getStream(content) {\n        let contentStream;\n        if (content._resolvedValue) {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n            setImmediate(()=>{\n                try {\n                    contentStream.end(content._resolvedValue);\n                } catch (err) {\n                    contentStream.emit(\"error\", err);\n                }\n            });\n            return contentStream;\n        } else if (typeof content.pipe === \"function\") {\n            // assume as stream\n            return content;\n        } else if (content && typeof content.path === \"string\" && !content.href) {\n            if (this.disableFileAccess) {\n                contentStream = new PassThrough();\n                setImmediate(()=>contentStream.emit(\"error\", new Error(\"File access rejected for \" + content.path)));\n                return contentStream;\n            }\n            // read file\n            return fs.createReadStream(content.path);\n        } else if (content && typeof content.href === \"string\") {\n            if (this.disableUrlAccess) {\n                contentStream = new PassThrough();\n                setImmediate(()=>contentStream.emit(\"error\", new Error(\"Url access rejected for \" + content.href)));\n                return contentStream;\n            }\n            // fetch URL\n            return nmfetch(content.href, {\n                headers: content.httpHeaders\n            });\n        } else {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n            setImmediate(()=>{\n                try {\n                    contentStream.end(content || \"\");\n                } catch (err) {\n                    contentStream.emit(\"error\", err);\n                }\n            });\n            return contentStream;\n        }\n    }\n    /**\n     * Parses addresses. Takes in a single address or an array or an\n     * array of address arrays (eg. To: [[first group], [second group],...])\n     *\n     * @param {Mixed} addresses Addresses to be parsed\n     * @return {Array} An array of address objects\n     */ _parseAddresses(addresses) {\n        return [].concat.apply([], [].concat(addresses).map((address)=>{\n            // eslint-disable-line prefer-spread\n            if (address && address.address) {\n                address.address = this._normalizeAddress(address.address);\n                address.name = address.name || \"\";\n                return [\n                    address\n                ];\n            }\n            return addressparser(address);\n        }));\n    }\n    /**\n     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n     *\n     * @param {String} key Key to be normalized\n     * @return {String} key in Camel-Case form\n     */ _normalizeHeaderKey(key) {\n        key = (key || \"\").toString()// no newlines in keys\n        .replace(/\\r?\\n|\\r/g, \" \").trim().toLowerCase()// use uppercase words, except MIME\n        .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, (c)=>c.toUpperCase())// special case\n        .replace(/^Content-Features$/i, \"Content-features\");\n        return key;\n    }\n    /**\n     * Checks if the content type is multipart and defines boundary if needed.\n     * Doesn't return anything, modifies object argument instead.\n     *\n     * @param {Object} structured Parsed header value for 'Content-Type' key\n     */ _handleContentType(structured) {\n        this.contentType = structured.value.trim().toLowerCase();\n        this.multipart = /^multipart\\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf(\"/\") + 1) : false;\n        if (this.multipart) {\n            this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n        } else {\n            this.boundary = false;\n        }\n    }\n    /**\n     * Generates a multipart boundary value\n     *\n     * @return {String} boundary value\n     */ _generateBoundary() {\n        return this.rootNode.boundaryPrefix + \"-\" + this.rootNode.baseBoundary + \"-Part_\" + this._nodeId;\n    }\n    /**\n     * Encodes a header value for use in the generated rfc2822 email.\n     *\n     * @param {String} key Header key\n     * @param {String} value Header value\n     */ _encodeHeaderValue(key, value) {\n        key = this._normalizeHeaderKey(key);\n        switch(key){\n            // Structured headers\n            case \"From\":\n            case \"Sender\":\n            case \"To\":\n            case \"Cc\":\n            case \"Bcc\":\n            case \"Reply-To\":\n                return this._convertAddresses(this._parseAddresses(value));\n            // values enclosed in <>\n            case \"Message-ID\":\n            case \"In-Reply-To\":\n            case \"Content-Id\":\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                if (value.charAt(0) !== \"<\") {\n                    value = \"<\" + value;\n                }\n                if (value.charAt(value.length - 1) !== \">\") {\n                    value = value + \">\";\n                }\n                return value;\n            // space separated list of values enclosed in <>\n            case \"References\":\n                value = [].concat.apply([], [].concat(value || \"\").map((elm)=>{\n                    // eslint-disable-line prefer-spread\n                    elm = (elm || \"\").toString().replace(/\\r?\\n|\\r/g, \" \").trim();\n                    return elm.replace(/<[^>]*>/g, (str)=>str.replace(/\\s/g, \"\")).split(/\\s+/);\n                })).map((elm)=>{\n                    if (elm.charAt(0) !== \"<\") {\n                        elm = \"<\" + elm;\n                    }\n                    if (elm.charAt(elm.length - 1) !== \">\") {\n                        elm = elm + \">\";\n                    }\n                    return elm;\n                });\n                return value.join(\" \").trim();\n            case \"Date\":\n                if (Object.prototype.toString.call(value) === \"[object Date]\") {\n                    return value.toUTCString().replace(/GMT/, \"+0000\");\n                }\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                return this._encodeWords(value);\n            case \"Content-Type\":\n            case \"Content-Disposition\":\n                // if it includes a filename then it is already encoded\n                return (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n            default:\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                // encodeWords only encodes if needed, otherwise the original string is returned\n                return this._encodeWords(value);\n        }\n    }\n    /**\n     * Rebuilds address object using punycode and other adjustments\n     *\n     * @param {Array} addresses An array of address objects\n     * @param {Array} [uniqueList] An array to be populated with addresses\n     * @return {String} address string\n     */ _convertAddresses(addresses, uniqueList) {\n        let values = [];\n        uniqueList = uniqueList || [];\n        [].concat(addresses || []).forEach((address)=>{\n            if (address.address) {\n                address.address = this._normalizeAddress(address.address);\n                if (!address.name) {\n                    values.push(address.address.indexOf(\" \") >= 0 ? `<${address.address}>` : `${address.address}`);\n                } else if (address.name) {\n                    values.push(`${this._encodeAddressName(address.name)} <${address.address}>`);\n                }\n                if (address.address) {\n                    if (!uniqueList.filter((a)=>a.address === address.address).length) {\n                        uniqueList.push(address);\n                    }\n                }\n            } else if (address.group) {\n                let groupListAddresses = (address.group.length ? this._convertAddresses(address.group, uniqueList) : \"\").trim();\n                values.push(`${this._encodeAddressName(address.name)}:${groupListAddresses};`);\n            }\n        });\n        return values.join(\", \");\n    }\n    /**\n     * Normalizes an email address\n     *\n     * @param {Array} address An array of address objects\n     * @return {String} address string\n     */ _normalizeAddress(address) {\n        address = (address || \"\").toString().replace(/[\\x00-\\x1F<>]+/g, \" \") // remove unallowed characters\n        .trim();\n        let lastAt = address.lastIndexOf(\"@\");\n        if (lastAt < 0) {\n            // Bare username\n            return address;\n        }\n        let user = address.substr(0, lastAt);\n        let domain = address.substr(lastAt + 1);\n        // Usernames are not touched and are kept as is even if these include unicode\n        // Domains are punycoded by default\n        // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'\n        // non-unicode domains are left as is\n        let encodedDomain;\n        try {\n            encodedDomain = punycode.toASCII(domain.toLowerCase());\n        } catch (err) {\n        // keep as is?\n        }\n        if (user.indexOf(\" \") >= 0) {\n            if (user.charAt(0) !== '\"') {\n                user = '\"' + user;\n            }\n            if (user.substr(-1) !== '\"') {\n                user = user + '\"';\n            }\n        }\n        return `${user}@${encodedDomain}`;\n    }\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */ _encodeAddressName(name) {\n        if (!/^[\\w ]*$/.test(name)) {\n            if (/^[\\x20-\\x7e]*$/.test(name)) {\n                return '\"' + name.replace(/([\\\\\"])/g, \"\\\\$1\") + '\"';\n            } else {\n                return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);\n            }\n        }\n        return name;\n    }\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */ _encodeWords(value) {\n        // set encodeAll parameter to true even though it is against the recommendation of RFC2047,\n        // by default only words that include non-ascii should be converted into encoded words\n        // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace\n        return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);\n    }\n    /**\n     * Detects best mime encoding for a text value\n     *\n     * @param {String} value Value to check for\n     * @return {String} either 'Q' or 'B'\n     */ _getTextEncoding(value) {\n        value = (value || \"\").toString();\n        let encoding = this.textEncoding;\n        let latinLen;\n        let nonLatinLen;\n        if (!encoding) {\n            // count latin alphabet symbols and 8-bit range symbols + control symbols\n            // if there are more latin characters, then use quoted-printable\n            // encoding, otherwise use base64\n            nonLatinLen = (value.match(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\u0080-\\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex\n            latinLen = (value.match(/[a-z]/gi) || []).length;\n            // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B\n            encoding = nonLatinLen < latinLen ? \"Q\" : \"B\";\n        }\n        return encoding;\n    }\n    /**\n     * Generates a message id\n     *\n     * @return {String} Random Message-ID value\n     */ _generateMessageId() {\n        return \"<\" + [\n            2,\n            2,\n            2,\n            6\n        ].reduce(// crux to generate UUID-like random strings\n        (prev, len)=>prev + \"-\" + crypto.randomBytes(len).toString(\"hex\"), crypto.randomBytes(4).toString(\"hex\")) + \"@\" + // try to use the domain of the FROM address or fallback to server hostname\n        (this.getEnvelope().from || this.hostname || \"localhost\").split(\"@\").pop() + \">\";\n    }\n}\nmodule.exports = MimeNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js":
/*!***************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/last-newline.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\nclass LastNewline extends Transform {\n    constructor(){\n        super();\n        this.lastByte = false;\n    }\n    _transform(chunk, encoding, done) {\n        if (chunk.length) {\n            this.lastByte = chunk[chunk.length - 1];\n        }\n        this.push(chunk);\n        done();\n    }\n    _flush(done) {\n        if (this.lastByte === 0x0a) {\n            return done();\n        }\n        if (this.lastByte === 0x0d) {\n            this.push(Buffer.from(\"\\n\"));\n            return done();\n        }\n        this.push(Buffer.from(\"\\r\\n\"));\n        return done();\n    }\n}\nmodule.exports = LastNewline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xhc3QtbmV3bGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLHVEQUEyQjtBQUU3QyxNQUFNQyxvQkFBb0JGO0lBQ3RCRyxhQUFjO1FBQ1YsS0FBSztRQUNMLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBRUFDLFdBQVdDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUU7UUFDOUIsSUFBSUYsTUFBTUcsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDTCxRQUFRLEdBQUdFLEtBQUssQ0FBQ0EsTUFBTUcsTUFBTSxHQUFHLEVBQUU7UUFDM0M7UUFFQSxJQUFJLENBQUNDLElBQUksQ0FBQ0o7UUFDVkU7SUFDSjtJQUVBRyxPQUFPSCxJQUFJLEVBQUU7UUFDVCxJQUFJLElBQUksQ0FBQ0osUUFBUSxLQUFLLE1BQU07WUFDeEIsT0FBT0k7UUFDWDtRQUNBLElBQUksSUFBSSxDQUFDSixRQUFRLEtBQUssTUFBTTtZQUN4QixJQUFJLENBQUNNLElBQUksQ0FBQ0UsT0FBT0MsSUFBSSxDQUFDO1lBQ3RCLE9BQU9MO1FBQ1g7UUFDQSxJQUFJLENBQUNFLElBQUksQ0FBQ0UsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCLE9BQU9MO0lBQ1g7QUFDSjtBQUVBTSxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udGludWFsZy8uL25vZGVfbW9kdWxlcy9ub2RlbWFpbGVyL2xpYi9taW1lLW5vZGUvbGFzdC1uZXdsaW5lLmpzP2EzOTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm07XG5cbmNsYXNzIExhc3ROZXdsaW5lIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5sYXN0Qnl0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIF90cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBkb25lKSB7XG4gICAgICAgIGlmIChjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdEJ5dGUgPSBjaHVua1tjaHVuay5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9XG5cbiAgICBfZmx1c2goZG9uZSkge1xuICAgICAgICBpZiAodGhpcy5sYXN0Qnl0ZSA9PT0gMHgwYSkge1xuICAgICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXN0Qnl0ZSA9PT0gMHgwZCkge1xuICAgICAgICAgICAgdGhpcy5wdXNoKEJ1ZmZlci5mcm9tKCdcXG4nKSk7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaChCdWZmZXIuZnJvbSgnXFxyXFxuJykpO1xuICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMYXN0TmV3bGluZTtcbiJdLCJuYW1lcyI6WyJUcmFuc2Zvcm0iLCJyZXF1aXJlIiwiTGFzdE5ld2xpbmUiLCJjb25zdHJ1Y3RvciIsImxhc3RCeXRlIiwiX3RyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJkb25lIiwibGVuZ3RoIiwicHVzaCIsIl9mbHVzaCIsIkJ1ZmZlciIsImZyb20iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js":
/*!**********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/le-unix.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Ensures that only <LF> is used for linebreaks\n *\n * @param {Object} options Stream options\n */ class LeWindows extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let buf;\n        let lastPos = 0;\n        for(let i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x0d) {\n                // \\n\n                buf = chunk.slice(lastPos, i);\n                lastPos = i + 1;\n                this.push(buf);\n            }\n        }\n        if (lastPos && lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            this.push(buf);\n        } else if (!lastPos) {\n            this.push(chunk);\n        }\n        done();\n    }\n}\nmodule.exports = LeWindows;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXVuaXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxZQUFZRixPQUFPRSxTQUFTO0FBRWxDOzs7O0NBSUMsR0FDRCxNQUFNQyxrQkFBa0JEO0lBQ3BCRSxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLGlCQUFpQjtRQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBR0EsV0FBVyxDQUFDO0lBQy9CO0lBRUE7O0tBRUMsR0FDREMsV0FBV0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRTtRQUM5QixJQUFJQztRQUNKLElBQUlDLFVBQVU7UUFFZCxJQUFLLElBQUlDLElBQUksR0FBR0MsTUFBTU4sTUFBTU8sTUFBTSxFQUFFRixJQUFJQyxLQUFLRCxJQUFLO1lBQzlDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLEtBQUs7Z0JBQ0xGLE1BQU1ILE1BQU1RLEtBQUssQ0FBQ0osU0FBU0M7Z0JBQzNCRCxVQUFVQyxJQUFJO2dCQUNkLElBQUksQ0FBQ0ksSUFBSSxDQUFDTjtZQUNkO1FBQ0o7UUFDQSxJQUFJQyxXQUFXQSxVQUFVSixNQUFNTyxNQUFNLEVBQUU7WUFDbkNKLE1BQU1ILE1BQU1RLEtBQUssQ0FBQ0o7WUFDbEIsSUFBSSxDQUFDSyxJQUFJLENBQUNOO1FBQ2QsT0FBTyxJQUFJLENBQUNDLFNBQVM7WUFDakIsSUFBSSxDQUFDSyxJQUFJLENBQUNUO1FBQ2Q7UUFDQUU7SUFDSjtBQUNKO0FBRUFRLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb250aW51YWxnLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL21pbWUtbm9kZS9sZS11bml4LmpzPzlhMGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmNvbnN0IFRyYW5zZm9ybSA9IHN0cmVhbS5UcmFuc2Zvcm07XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IG9ubHkgPExGPiBpcyB1c2VkIGZvciBsaW5lYnJlYWtzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU3RyZWFtIG9wdGlvbnNcbiAqL1xuY2xhc3MgTGVXaW5kb3dzIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICAvLyBpbml0IFRyYW5zZm9ybVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgZG90c1xuICAgICAqL1xuICAgIF90cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBkb25lKSB7XG4gICAgICAgIGxldCBidWY7XG4gICAgICAgIGxldCBsYXN0UG9zID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaHVua1tpXSA9PT0gMHgwZCkge1xuICAgICAgICAgICAgICAgIC8vIFxcblxuICAgICAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MsIGkpO1xuICAgICAgICAgICAgICAgIGxhc3RQb3MgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goYnVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdFBvcyAmJiBsYXN0UG9zIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zKTtcbiAgICAgICAgICAgIHRoaXMucHVzaChidWYpO1xuICAgICAgICB9IGVsc2UgaWYgKCFsYXN0UG9zKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goY2h1bmspO1xuICAgICAgICB9XG4gICAgICAgIGRvbmUoKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGVXaW5kb3dzO1xuIl0sIm5hbWVzIjpbInN0cmVhbSIsInJlcXVpcmUiLCJUcmFuc2Zvcm0iLCJMZVdpbmRvd3MiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImRvbmUiLCJidWYiLCJsYXN0UG9zIiwiaSIsImxlbiIsImxlbmd0aCIsInNsaWNlIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/le-windows.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Ensures that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */ class LeWindows extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this.lastByte = false;\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let buf;\n        let lastPos = 0;\n        for(let i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x0a) {\n                // \\n\n                if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        this.push(buf);\n                    }\n                    this.push(Buffer.from(\"\\r\\n\"));\n                    lastPos = i + 1;\n                }\n            }\n        }\n        if (lastPos && lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            this.push(buf);\n        } else if (!lastPos) {\n            this.push(chunk);\n        }\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n}\nmodule.exports = LeWindows;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXdpbmRvd3MuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxZQUFZRixPQUFPRSxTQUFTO0FBRWxDOzs7O0NBSUMsR0FDRCxNQUFNQyxrQkFBa0JEO0lBQ3BCRSxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLGlCQUFpQjtRQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBR0EsV0FBVyxDQUFDO1FBQzNCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBRUE7O0tBRUMsR0FDREMsV0FBV0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRTtRQUM5QixJQUFJQztRQUNKLElBQUlDLFVBQVU7UUFFZCxJQUFLLElBQUlDLElBQUksR0FBR0MsTUFBTU4sTUFBTU8sTUFBTSxFQUFFRixJQUFJQyxLQUFLRCxJQUFLO1lBQzlDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLEtBQUs7Z0JBQ0wsSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBSyxJQUFJLENBQUNQLFFBQVEsS0FBSyxNQUFPO29CQUNoRSxJQUFJTyxJQUFJRCxTQUFTO3dCQUNiRCxNQUFNSCxNQUFNUSxLQUFLLENBQUNKLFNBQVNDO3dCQUMzQixJQUFJLENBQUNJLElBQUksQ0FBQ047b0JBQ2Q7b0JBQ0EsSUFBSSxDQUFDTSxJQUFJLENBQUNDLE9BQU9DLElBQUksQ0FBQztvQkFDdEJQLFVBQVVDLElBQUk7Z0JBQ2xCO1lBQ0o7UUFDSjtRQUVBLElBQUlELFdBQVdBLFVBQVVKLE1BQU1PLE1BQU0sRUFBRTtZQUNuQ0osTUFBTUgsTUFBTVEsS0FBSyxDQUFDSjtZQUNsQixJQUFJLENBQUNLLElBQUksQ0FBQ047UUFDZCxPQUFPLElBQUksQ0FBQ0MsU0FBUztZQUNqQixJQUFJLENBQUNLLElBQUksQ0FBQ1Q7UUFDZDtRQUVBLElBQUksQ0FBQ0YsUUFBUSxHQUFHRSxLQUFLLENBQUNBLE1BQU1PLE1BQU0sR0FBRyxFQUFFO1FBQ3ZDTDtJQUNKO0FBQ0o7QUFFQVUsT0FBT0MsT0FBTyxHQUFHbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb250aW51YWxnLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL21pbWUtbm9kZS9sZS13aW5kb3dzLmpzP2RhMDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmNvbnN0IFRyYW5zZm9ybSA9IHN0cmVhbS5UcmFuc2Zvcm07XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IG9ubHkgPENSPjxMRj4gc2VxdWVuY2VzIGFyZSB1c2VkIGZvciBsaW5lYnJlYWtzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU3RyZWFtIG9wdGlvbnNcbiAqL1xuY2xhc3MgTGVXaW5kb3dzIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICAvLyBpbml0IFRyYW5zZm9ybVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLmxhc3RCeXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyBkb3RzXG4gICAgICovXG4gICAgX3RyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHtcbiAgICAgICAgbGV0IGJ1ZjtcbiAgICAgICAgbGV0IGxhc3RQb3MgPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGNodW5rW2ldID09PSAweDBhKSB7XG4gICAgICAgICAgICAgICAgLy8gXFxuXG4gICAgICAgICAgICAgICAgaWYgKChpICYmIGNodW5rW2kgLSAxXSAhPT0gMHgwZCkgfHwgKCFpICYmIHRoaXMubGFzdEJ5dGUgIT09IDB4MGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gbGFzdFBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmID0gY2h1bmsuc2xpY2UobGFzdFBvcywgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2goYnVmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2goQnVmZmVyLmZyb20oJ1xcclxcbicpKTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFBvcyA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXN0UG9zICYmIGxhc3RQb3MgPCBjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MpO1xuICAgICAgICAgICAgdGhpcy5wdXNoKGJ1Zik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWxhc3RQb3MpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RCeXRlID0gY2h1bmtbY2h1bmsubGVuZ3RoIC0gMV07XG4gICAgICAgIGRvbmUoKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGVXaW5kb3dzO1xuIl0sIm5hbWVzIjpbInN0cmVhbSIsInJlcXVpcmUiLCJUcmFuc2Zvcm0iLCJMZVdpbmRvd3MiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJsYXN0Qnl0ZSIsIl90cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiZG9uZSIsImJ1ZiIsImxhc3RQb3MiLCJpIiwibGVuIiwibGVuZ3RoIiwic2xpY2UiLCJwdXNoIiwiQnVmZmVyIiwiZnJvbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/nodemailer.js":
/*!***************************************************!*\
  !*** ./node_modules/nodemailer/lib/nodemailer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Mailer = __webpack_require__(/*! ./mailer */ \"(rsc)/./node_modules/nodemailer/lib/mailer/index.js\");\nconst shared = __webpack_require__(/*! ./shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst SMTPPool = __webpack_require__(/*! ./smtp-pool */ \"(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js\");\nconst SMTPTransport = __webpack_require__(/*! ./smtp-transport */ \"(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js\");\nconst SendmailTransport = __webpack_require__(/*! ./sendmail-transport */ \"(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js\");\nconst StreamTransport = __webpack_require__(/*! ./stream-transport */ \"(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js\");\nconst JSONTransport = __webpack_require__(/*! ./json-transport */ \"(rsc)/./node_modules/nodemailer/lib/json-transport/index.js\");\nconst SESTransport = __webpack_require__(/*! ./ses-transport */ \"(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js\");\nconst nmfetch = __webpack_require__(/*! ./fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst packageData = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst ETHEREAL_API = (process.env.ETHEREAL_API || \"https://api.nodemailer.com\").replace(/\\/+$/, \"\");\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || \"https://ethereal.email\").replace(/\\/+$/, \"\");\nconst ETHEREAL_CACHE = [\n    \"true\",\n    \"yes\",\n    \"y\",\n    \"1\"\n].includes((process.env.ETHEREAL_CACHE || \"yes\").toString().trim().toLowerCase());\nlet testAccount = false;\nmodule.exports.createTransport = function(transporter, defaults) {\n    let urlConfig;\n    let options;\n    let mailer;\n    if (// provided transporter is a configuration object, not transporter plugin\n    typeof transporter === \"object\" && typeof transporter.send !== \"function\" || // provided transporter looks like a connection url\n    typeof transporter === \"string\" && /^(smtps?|direct):/i.test(transporter)) {\n        if (urlConfig = typeof transporter === \"string\" ? transporter : transporter.url) {\n            // parse a configuration URL into configuration options\n            options = shared.parseConnectionUrl(urlConfig);\n        } else {\n            options = transporter;\n        }\n        if (options.pool) {\n            transporter = new SMTPPool(options);\n        } else if (options.sendmail) {\n            transporter = new SendmailTransport(options);\n        } else if (options.streamTransport) {\n            transporter = new StreamTransport(options);\n        } else if (options.jsonTransport) {\n            transporter = new JSONTransport(options);\n        } else if (options.SES) {\n            transporter = new SESTransport(options);\n        } else {\n            transporter = new SMTPTransport(options);\n        }\n    }\n    mailer = new Mailer(transporter, options, defaults);\n    return mailer;\n};\nmodule.exports.createTestAccount = function(apiUrl, callback) {\n    let promise;\n    if (!callback && typeof apiUrl === \"function\") {\n        callback = apiUrl;\n        apiUrl = false;\n    }\n    if (!callback) {\n        promise = new Promise((resolve, reject)=>{\n            callback = shared.callbackPromise(resolve, reject);\n        });\n    }\n    if (ETHEREAL_CACHE && testAccount) {\n        setImmediate(()=>callback(null, testAccount));\n        return promise;\n    }\n    apiUrl = apiUrl || ETHEREAL_API;\n    let chunks = [];\n    let chunklen = 0;\n    let req = nmfetch(apiUrl + \"/user\", {\n        contentType: \"application/json\",\n        method: \"POST\",\n        body: Buffer.from(JSON.stringify({\n            requestor: packageData.name,\n            version: packageData.version\n        }))\n    });\n    req.on(\"readable\", ()=>{\n        let chunk;\n        while((chunk = req.read()) !== null){\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n    req.once(\"error\", (err)=>callback(err));\n    req.once(\"end\", ()=>{\n        let res = Buffer.concat(chunks, chunklen);\n        let data;\n        let err;\n        try {\n            data = JSON.parse(res.toString());\n        } catch (E) {\n            err = E;\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (data.status !== \"success\" || data.error) {\n            return callback(new Error(data.error || \"Request failed\"));\n        }\n        delete data.status;\n        testAccount = data;\n        callback(null, testAccount);\n    });\n    return promise;\n};\nmodule.exports.getTestMessageUrl = function(info) {\n    if (!info || !info.response) {\n        return false;\n    }\n    let infoProps = new Map();\n    info.response.replace(/\\[([^\\]]+)\\]$/, (m, props)=>{\n        props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value)=>{\n            infoProps.set(key, value);\n        });\n    });\n    if (infoProps.has(\"STATUS\") && infoProps.has(\"MSGID\")) {\n        return (testAccount.web || ETHEREAL_WEB) + \"/message/\" + infoProps.get(\"MSGID\");\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/nodemailer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/punycode/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/nodemailer/lib/punycode/index.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("/*\n\nCopied from https://github.com/mathiasbynens/punycode.js/blob/ef3505c8abb5143a00d53ce59077c9f7f4b2ac47/punycode.js\n\nCopyright Mathias Bynens <https://mathiasbynens.be/>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/ /* eslint callback-return: 0, no-bitwise: 0, eqeqeq: 0, prefer-arrow-callback: 0, object-shorthand: 0 */ \n/** Highest positive signed 32-bit float value */ const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n/** Bootstring parameters */ const base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = \"-\"; // '\\x2D'\n/** Regular expressions */ const regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n/** Error messages */ const errors = {\n    overflow: \"Overflow: input needs wider integers to process\",\n    \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n    \"invalid-input\": \"Invalid input\"\n};\n/** Convenience shortcuts */ const baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n/*--------------------------------------------------------------------------*/ /**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */ function error(type) {\n    throw new RangeError(errors[type]);\n}\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */ function map(array, callback) {\n    const result = [];\n    let length = array.length;\n    while(length--){\n        result[length] = callback(array[length]);\n    }\n    return result;\n}\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */ function mapDomain(domain, callback) {\n    const parts = domain.split(\"@\");\n    let result = \"\";\n    if (parts.length > 1) {\n        // In email addresses, only the domain name should be punycoded. Leave\n        // the local part (i.e. everything up to `@`) intact.\n        result = parts[0] + \"@\";\n        domain = parts[1];\n    }\n    // Avoid `split(regex)` for IE8 compatibility. See #17.\n    domain = domain.replace(regexSeparators, \".\");\n    const labels = domain.split(\".\");\n    const encoded = map(labels, callback).join(\".\");\n    return result + encoded;\n}\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */ function ucs2decode(string) {\n    const output = [];\n    let counter = 0;\n    const length = string.length;\n    while(counter < length){\n        const value = string.charCodeAt(counter++);\n        if (value >= 0xd800 && value <= 0xdbff && counter < length) {\n            // It's a high surrogate, and there is a next character.\n            const extra = string.charCodeAt(counter++);\n            if ((extra & 0xfc00) == 0xdc00) {\n                // Low surrogate.\n                output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n            } else {\n                // It's an unmatched surrogate; only append this code unit, in case the\n                // next code unit is the high surrogate of a surrogate pair.\n                output.push(value);\n                counter--;\n            }\n        } else {\n            output.push(value);\n        }\n    }\n    return output;\n}\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */ const ucs2encode = (codePoints)=>String.fromCodePoint(...codePoints);\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */ const basicToDigit = function(codePoint) {\n    if (codePoint >= 0x30 && codePoint < 0x3a) {\n        return 26 + (codePoint - 0x30);\n    }\n    if (codePoint >= 0x41 && codePoint < 0x5b) {\n        return codePoint - 0x41;\n    }\n    if (codePoint >= 0x61 && codePoint < 0x7b) {\n        return codePoint - 0x61;\n    }\n    return base;\n};\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */ const digitToBasic = function(digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */ const adapt = function(delta, numPoints, firstTime) {\n    let k = 0;\n    delta = firstTime ? floor(delta / damp) : delta >> 1;\n    delta += floor(delta / numPoints);\n    for(; delta > baseMinusTMin * tMax >> 1; k += base){\n        delta = floor(delta / baseMinusTMin);\n    }\n    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */ const decode = function(input) {\n    // Don't use UCS-2.\n    const output = [];\n    const inputLength = input.length;\n    let i = 0;\n    let n = initialN;\n    let bias = initialBias;\n    // Handle the basic code points: let `basic` be the number of input code\n    // points before the last delimiter, or `0` if there is none, then copy\n    // the first basic code points to the output.\n    let basic = input.lastIndexOf(delimiter);\n    if (basic < 0) {\n        basic = 0;\n    }\n    for(let j = 0; j < basic; ++j){\n        // if it's not a basic code point\n        if (input.charCodeAt(j) >= 0x80) {\n            error(\"not-basic\");\n        }\n        output.push(input.charCodeAt(j));\n    }\n    // Main decoding loop: start just after the last delimiter if any basic code\n    // points were copied; start at the beginning otherwise.\n    for(let index = basic > 0 ? basic + 1 : 0; index < inputLength /* no final expression */ ;){\n        // `index` is the index of the next character to be consumed.\n        // Decode a generalized variable-length integer into `delta`,\n        // which gets added to `i`. The overflow checking is easier\n        // if we increase `i` as we go, then subtract off its starting\n        // value at the end to obtain `delta`.\n        const oldi = i;\n        for(let w = 1, k = base /* no condition */ ;; k += base){\n            if (index >= inputLength) {\n                error(\"invalid-input\");\n            }\n            const digit = basicToDigit(input.charCodeAt(index++));\n            if (digit >= base) {\n                error(\"invalid-input\");\n            }\n            if (digit > floor((maxInt - i) / w)) {\n                error(\"overflow\");\n            }\n            i += digit * w;\n            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n            if (digit < t) {\n                break;\n            }\n            const baseMinusT = base - t;\n            if (w > floor(maxInt / baseMinusT)) {\n                error(\"overflow\");\n            }\n            w *= baseMinusT;\n        }\n        const out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0);\n        // `i` was supposed to wrap around from `out` to `0`,\n        // incrementing `n` each time, so we'll fix that now:\n        if (floor(i / out) > maxInt - n) {\n            error(\"overflow\");\n        }\n        n += floor(i / out);\n        i %= out;\n        // Insert `n` at position `i` of the output.\n        output.splice(i++, 0, n);\n    }\n    return String.fromCodePoint(...output);\n};\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */ const encode = function(input) {\n    const output = [];\n    // Convert the input in UCS-2 to an array of Unicode code points.\n    input = ucs2decode(input);\n    // Cache the length.\n    const inputLength = input.length;\n    // Initialize the state.\n    let n = initialN;\n    let delta = 0;\n    let bias = initialBias;\n    // Handle the basic code points.\n    for (const currentValue of input){\n        if (currentValue < 0x80) {\n            output.push(stringFromCharCode(currentValue));\n        }\n    }\n    const basicLength = output.length;\n    let handledCPCount = basicLength;\n    // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n    // Finish the basic string with a delimiter unless it's empty.\n    if (basicLength) {\n        output.push(delimiter);\n    }\n    // Main encoding loop:\n    while(handledCPCount < inputLength){\n        // All non-basic code points < n have been handled already. Find the next\n        // larger one:\n        let m = maxInt;\n        for (const currentValue of input){\n            if (currentValue >= n && currentValue < m) {\n                m = currentValue;\n            }\n        }\n        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n        // but guard against overflow.\n        const handledCPCountPlusOne = handledCPCount + 1;\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n            error(\"overflow\");\n        }\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n        for (const currentValue of input){\n            if (currentValue < n && ++delta > maxInt) {\n                error(\"overflow\");\n            }\n            if (currentValue === n) {\n                // Represent delta as a generalized variable-length integer.\n                let q = delta;\n                for(let k = base /* no condition */ ;; k += base){\n                    const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                    if (q < t) {\n                        break;\n                    }\n                    const qMinusT = q - t;\n                    const baseMinusT = base - t;\n                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n                    q = floor(qMinusT / baseMinusT);\n                }\n                output.push(stringFromCharCode(digitToBasic(q, 0)));\n                bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n                delta = 0;\n                ++handledCPCount;\n            }\n        }\n        ++delta;\n        ++n;\n    }\n    return output.join(\"\");\n};\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */ const toUnicode = function(input) {\n    return mapDomain(input, function(string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n    });\n};\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */ const toASCII = function(input) {\n    return mapDomain(input, function(string) {\n        return regexNonASCII.test(string) ? \"xn--\" + encode(string) : string;\n    });\n};\n/*--------------------------------------------------------------------------*/ /** Define the public API */ const punycode = {\n    /**\n     * A string representing the current Punycode.js version number.\n     * @memberOf punycode\n     * @type String\n     */ version: \"2.3.1\",\n    /**\n     * An object of methods to convert from JavaScript's internal character\n     * representation (UCS-2) to Unicode code points, and back.\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode\n     * @type Object\n     */ ucs2: {\n        decode: ucs2decode,\n        encode: ucs2encode\n    },\n    decode: decode,\n    encode: encode,\n    toASCII: toASCII,\n    toUnicode: toUnicode\n};\nmodule.exports = punycode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/punycode/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/qp/index.js":
/*!*************************************************!*\
  !*** ./node_modules/nodemailer/lib/qp/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */ function encode(buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer, \"utf-8\");\n    }\n    // usable characters that do not need encoding\n    let ranges = [\n        // https://tools.ietf.org/html/rfc2045#section-6.7\n        [\n            0x09\n        ],\n        [\n            0x0a\n        ],\n        [\n            0x0d\n        ],\n        [\n            0x20,\n            0x3c\n        ],\n        [\n            0x3e,\n            0x7e\n        ] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n    ];\n    let result = \"\";\n    let ord;\n    for(let i = 0, len = buffer.length; i < len; i++){\n        ord = buffer[i];\n        // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line\n        if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n            result += String.fromCharCode(ord);\n            continue;\n        }\n        result += \"=\" + (ord < 0x10 ? \"0\" : \"\") + ord.toString(16).toUpperCase();\n    }\n    return result;\n}\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */ function wrap(str, lineLength) {\n    str = (str || \"\").toString();\n    lineLength = lineLength || 76;\n    if (str.length <= lineLength) {\n        return str;\n    }\n    let pos = 0;\n    let len = str.length;\n    let match, code, line;\n    let lineMargin = Math.floor(lineLength / 3);\n    let result = \"\";\n    // insert soft linebreaks where needed\n    while(pos < len){\n        line = str.substr(pos, lineLength);\n        if (match = line.match(/\\r\\n/)) {\n            line = line.substr(0, match.index + match[0].length);\n            result += line;\n            pos += line.length;\n            continue;\n        }\n        if (line.substr(-1) === \"\\n\") {\n            // nothing to change here\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (match = line.substr(-lineMargin).match(/\\n.*?$/)) {\n            // truncate to nearest line break\n            line = line.substr(0, line.length - (match[0].length - 1));\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t.,!?][^ \\t.,!?]*$/))) {\n            // truncate to nearest space\n            line = line.substr(0, line.length - (match[0].length - 1));\n        } else if (line.match(/[=][\\da-f]{0,2}$/i)) {\n            // push incomplete encoding sequences to the next line\n            if (match = line.match(/[=][\\da-f]{0,1}$/i)) {\n                line = line.substr(0, line.length - match[0].length);\n            }\n            // ensure that utf-8 sequences are not split\n            while(line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\\da-f]{2}$/gi))){\n                code = parseInt(match[0].substr(1, 2), 16);\n                if (code < 128) {\n                    break;\n                }\n                line = line.substr(0, line.length - 3);\n                if (code >= 0xc0) {\n                    break;\n                }\n            }\n        }\n        if (pos + line.length < len && line.substr(-1) !== \"\\n\") {\n            if (line.length === lineLength && line.match(/[=][\\da-f]{2}$/i)) {\n                line = line.substr(0, line.length - 3);\n            } else if (line.length === lineLength) {\n                line = line.substr(0, line.length - 1);\n            }\n            pos += line.length;\n            line += \"=\\r\\n\";\n        } else {\n            pos += line.length;\n        }\n        result += line;\n    }\n    return result;\n}\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */ function checkRanges(nr, ranges) {\n    for(let i = ranges.length - 1; i >= 0; i--){\n        if (!ranges[i].length) {\n            continue;\n        }\n        if (ranges[i].length === 1 && nr === ranges[i][0]) {\n            return true;\n        }\n        if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */ class Encoder extends Transform {\n    constructor(options){\n        super();\n        // init Transform\n        this.options = options || {};\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n        this._curLine = \"\";\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n    _transform(chunk, encoding, done) {\n        let qp;\n        if (encoding !== \"buffer\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n        this.inputBytes += chunk.length;\n        if (this.options.lineLength) {\n            qp = this._curLine + encode(chunk);\n            qp = wrap(qp, this.options.lineLength);\n            qp = qp.replace(/(^|\\n)([^\\n]*)$/, (match, lineBreak, lastLine)=>{\n                this._curLine = lastLine;\n                return lineBreak;\n            });\n            if (qp) {\n                this.outputBytes += qp.length;\n                this.push(qp);\n            }\n        } else {\n            qp = encode(chunk);\n            this.outputBytes += qp.length;\n            this.push(qp, \"ascii\");\n        }\n        done();\n    }\n    _flush(done) {\n        if (this._curLine) {\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, \"ascii\");\n        }\n        done();\n    }\n}\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/qp/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/nodemailer/lib/sendmail-transport/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst spawn = (__webpack_require__(/*! child_process */ \"child_process\").spawn);\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */ class SendmailTransport {\n    constructor(options){\n        options = options || {};\n        // use a reference to spawn for mocking purposes\n        this._spawn = spawn;\n        this.options = options || {};\n        this.name = \"Sendmail\";\n        this.version = packageData.version;\n        this.path = \"sendmail\";\n        this.args = false;\n        this.winbreak = false;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"sendmail\"\n        });\n        if (options) {\n            if (typeof options === \"string\") {\n                this.path = options;\n            } else if (typeof options === \"object\") {\n                if (options.path) {\n                    this.path = options.path;\n                }\n                if (Array.isArray(options.args)) {\n                    this.args = options.args;\n                }\n                this.winbreak = [\n                    \"win\",\n                    \"windows\",\n                    \"dos\",\n                    \"\\r\\n\"\n                ].includes((options.newline || \"\").toString().toLowerCase());\n            }\n        }\n    }\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let args;\n        let sendmail;\n        let returned;\n        const hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some((addr)=>/^-/.test(addr));\n        if (hasInvalidAddresses) {\n            return done(new Error(\"Can not send mail. Invalid envelope addresses.\"));\n        }\n        if (this.args) {\n            // force -i to keep single dots\n            args = [\n                \"-i\"\n            ].concat(this.args).concat(envelope.to);\n        } else {\n            args = [\n                \"-i\"\n            ].concat(envelope.from ? [\n                \"-f\",\n                envelope.from\n            ] : []).concat(envelope.to);\n        }\n        let callback = (err)=>{\n            if (returned) {\n                // ignore any additional responses, already done\n                return;\n            }\n            returned = true;\n            if (typeof done === \"function\") {\n                if (err) {\n                    return done(err);\n                } else {\n                    return done(null, {\n                        envelope: mail.data.envelope || mail.message.getEnvelope(),\n                        messageId,\n                        response: \"Messages queued for delivery\"\n                    });\n                }\n            }\n        };\n        try {\n            sendmail = this._spawn(this.path, args);\n        } catch (E) {\n            this.logger.error({\n                err: E,\n                tnx: \"spawn\",\n                messageId\n            }, \"Error occurred while spawning sendmail. %s\", E.message);\n            return callback(E);\n        }\n        if (sendmail) {\n            sendmail.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"spawn\",\n                    messageId\n                }, \"Error occurred when sending message %s. %s\", messageId, err.message);\n                callback(err);\n            });\n            sendmail.once(\"exit\", (code)=>{\n                if (!code) {\n                    return callback();\n                }\n                let err;\n                if (code === 127) {\n                    err = new Error(\"Sendmail command not found, process exited with code \" + code);\n                } else {\n                    err = new Error(\"Sendmail exited with code \" + code);\n                }\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error sending message %s to sendmail. %s\", messageId, err.message);\n                callback(err);\n            });\n            sendmail.once(\"close\", callback);\n            sendmail.stdin.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error occurred when piping message %s to sendmail. %s\", messageId, err.message);\n                callback(err);\n            });\n            let recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n            }\n            this.logger.info({\n                tnx: \"send\",\n                messageId\n            }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n            let sourceStream = mail.message.createReadStream();\n            sourceStream.once(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error occurred when generating message %s. %s\", messageId, err.message);\n                sendmail.kill(\"SIGINT\"); // do not deliver the message\n                callback(err);\n            });\n            sourceStream.pipe(sendmail.stdin);\n        } else {\n            return callback(new Error(\"sendmail was not found\"));\n        }\n    }\n}\nmodule.exports = SendmailTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/ses-transport/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst LeWindows = __webpack_require__(/*! ../mime-node/le-windows */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\");\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class SESTransport extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        this.options = options || {};\n        this.ses = this.options.SES;\n        this.name = \"SESTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"ses-transport\"\n        });\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n        this.pending = [];\n        this.idling = true;\n        setImmediate(()=>{\n            if (this.idling) {\n                this.emit(\"idle\");\n            }\n        });\n    }\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n        this._send(mail, (...args)=>{\n            setImmediate(()=>callback(...args));\n            this._sent();\n        });\n    }\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit(\"idle\");\n            }\n            return;\n        }\n        let next = this.pending.shift();\n        this._send(next.mail, (...args)=>{\n            setImmediate(()=>next.callback(...args));\n            this._sent();\n        });\n    }\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for(let i = this.rateMessages.length - 1; i >= 0; i--){\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(()=>this._checkRatedQueue(), now - delay);\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n        // Ignore. Happens on envs with non-node timer implementation\n        }\n        return false;\n    }\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */ isIdle() {\n        return this.idling;\n    }\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n        let getRawMessage = (next)=>{\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === \"string\") {\n                mail.data._dkim.skipFields += \":date:message-id\";\n            } else {\n                mail.data._dkim.skipFields = \"date:message-id\";\n            }\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n            stream.on(\"readable\", ()=>{\n                let chunk;\n                while((chunk = stream.read()) !== null){\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n            sourceStream.once(\"error\", (err)=>stream.emit(\"error\", err));\n            stream.once(\"error\", (err)=>{\n                next(err);\n            });\n            stream.once(\"end\", ()=>next(null, Buffer.concat(chunks, chunklen)));\n        };\n        setImmediate(()=>getRawMessage((err, raw)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed creating message for %s. %s\", messageId, err.message);\n                    statObject.pending = false;\n                    return callback(err);\n                }\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n                Object.keys(mail.data.ses || {}).forEach((key)=>{\n                    sesMessage[key] = mail.data.ses[key];\n                });\n                let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n                let aws = this.ses.aws || {};\n                let getRegion = (cb)=>{\n                    if (ses.config && typeof ses.config.region === \"function\") {\n                        // promise\n                        return ses.config.region().then((region)=>cb(null, region)).catch((err)=>cb(err));\n                    }\n                    return cb(null, ses.config && ses.config.region || \"us-east-1\");\n                };\n                getRegion((err, region)=>{\n                    if (err || !region) {\n                        region = \"us-east-1\";\n                    }\n                    let sendPromise;\n                    if (typeof ses.send === \"function\" && aws.SendRawEmailCommand) {\n                        // v3 API\n                        sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n                    } else {\n                        // v2 API\n                        sendPromise = ses.sendRawEmail(sesMessage).promise();\n                    }\n                    sendPromise.then((data)=>{\n                        if (region === \"us-east-1\") {\n                            region = \"email\";\n                        }\n                        statObject.pending = false;\n                        callback(null, {\n                            envelope: {\n                                from: envelope.from,\n                                to: envelope.to\n                            },\n                            messageId: \"<\" + data.MessageId + (!/@/.test(data.MessageId) ? \"@\" + region + \".amazonses.com\" : \"\") + \">\",\n                            response: data.MessageId,\n                            raw\n                        });\n                    }).catch((err)=>{\n                        this.logger.error({\n                            err,\n                            tnx: \"send\"\n                        }, \"Send error for %s: %s\", messageId, err.message);\n                        statObject.pending = false;\n                        callback(err);\n                    });\n                });\n            }));\n    }\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n        let aws = this.ses.aws || {};\n        const sesMessage = {\n            RawMessage: {\n                // required\n                Data: \"From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid\"\n            },\n            Source: \"invalid@invalid\",\n            Destinations: [\n                \"invalid@invalid\"\n            ]\n        };\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        const cb = (err)=>{\n            if (err && (err.code || err.Code) !== \"InvalidParameterValue\") {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n        if (typeof ses.send === \"function\" && aws.SendRawEmailCommand) {\n            // v3 API\n            sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n            ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n        } else {\n            // v2 API\n            ses.sendRawEmail(sesMessage, cb);\n        }\n        return promise;\n    }\n}\nmodule.exports = SESTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvc2VzLXRyYW5zcG9ydC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGVBQWVDLG1CQUFPQSxDQUFDO0FBQzdCLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDO0FBQzVCLE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1HLFlBQVlILG1CQUFPQSxDQUFDO0FBRTFCOzs7Ozs7Ozs7O0NBVUMsR0FDRCxNQUFNSSxxQkFBcUJMO0lBQ3ZCTSxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSztRQUNMQSxVQUFVQSxXQUFXLENBQUM7UUFFdEIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLFdBQVcsQ0FBQztRQUMzQixJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJLENBQUNELE9BQU8sQ0FBQ0UsR0FBRztRQUUzQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsT0FBTyxHQUFHVCxZQUFZUyxPQUFPO1FBRWxDLElBQUksQ0FBQ0MsTUFBTSxHQUFHVCxPQUFPVSxTQUFTLENBQUMsSUFBSSxDQUFDTixPQUFPLEVBQUU7WUFDekNPLFdBQVcsSUFBSSxDQUFDUCxPQUFPLENBQUNPLFNBQVMsSUFBSTtRQUN6QztRQUVBLCtCQUErQjtRQUMvQixJQUFJLENBQUNDLGNBQWMsR0FBR0MsT0FBTyxJQUFJLENBQUNULE9BQU8sQ0FBQ1EsY0FBYyxLQUFLRTtRQUM3RCxJQUFJLENBQUNDLFdBQVcsR0FBRztRQUVuQiwwQkFBMEI7UUFDMUIsSUFBSSxDQUFDQyxXQUFXLEdBQUdILE9BQU8sSUFBSSxDQUFDVCxPQUFPLENBQUNZLFdBQVcsS0FBS0Y7UUFDdkQsSUFBSSxDQUFDRyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsTUFBTSxlQUFlO1FBQ3pDLElBQUksQ0FBQ0MsWUFBWSxHQUFHLEVBQUU7UUFFdEIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtRQUVq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YztnQkFBQzthQUFrQjtRQUNyQztRQUVBLElBQUksQ0FBQzFELFVBQVU7WUFDWHlFLFVBQVUsSUFBSUssUUFBUSxDQUFDQyxTQUFTQztnQkFDNUJoRixXQUFXMUIsT0FBTzJHLGVBQWUsQ0FBQ0YsU0FBU0M7WUFDL0M7UUFDSjtRQUNBLE1BQU1mLEtBQUtoQixDQUFBQTtZQUNQLElBQUlBLE9BQU8sQ0FBQ0EsSUFBSWlDLElBQUksSUFBSWpDLElBQUlrQyxJQUFJLE1BQU0seUJBQXlCO2dCQUMzRCxPQUFPbkYsU0FBU2lEO1lBQ3BCO1lBQ0EsT0FBT2pELFNBQVMsTUFBTTtRQUMxQjtRQUVBLElBQUksT0FBT3JCLElBQUltQixJQUFJLEtBQUssY0FBY2lFLElBQUlRLG1CQUFtQixFQUFFO1lBQzNELFNBQVM7WUFDVGxCLFdBQVdDLFVBQVUsQ0FBQ0MsSUFBSSxHQUFHTCxPQUFPTyxJQUFJLENBQUNKLFdBQVdDLFVBQVUsQ0FBQ0MsSUFBSTtZQUNuRTVFLElBQUltQixJQUFJLENBQUMsSUFBSWlFLElBQUlRLG1CQUFtQixDQUFDbEIsYUFBYVk7UUFDdEQsT0FBTztZQUNILFNBQVM7WUFDVHRGLElBQUk2RixZQUFZLENBQUNuQixZQUFZWTtRQUNqQztRQUVBLE9BQU9RO0lBQ1g7QUFDSjtBQUVBVyxPQUFPQyxPQUFPLEdBQUc3RyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRpbnVhbGcvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvc2VzLXRyYW5zcG9ydC9pbmRleC5qcz8xNjkwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBwYWNrYWdlRGF0YSA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpO1xuY29uc3Qgc2hhcmVkID0gcmVxdWlyZSgnLi4vc2hhcmVkJyk7XG5jb25zdCBMZVdpbmRvd3MgPSByZXF1aXJlKCcuLi9taW1lLW5vZGUvbGUtd2luZG93cycpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIFRyYW5zcG9ydCBvYmplY3QgZm9yIEFXUyBTRVNcbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zIGNhbiBiZSB0aGUgZm9sbG93aW5nOlxuICpcbiAqICAqICoqc2VuZGluZ1JhdGUqKiBvcHRpb25hbCBOdW1iZXIgc3BlY2lmeWluZyBob3cgbWFueSBtZXNzYWdlcyBwZXIgc2Vjb25kIHNob3VsZCBiZSBkZWxpdmVyZWQgdG8gU0VTXG4gKiAgKiAqKm1heENvbm5lY3Rpb25zKiogb3B0aW9uYWwgTnVtYmVyIHNwZWNpZnlpbmcgbWF4IG51bWJlciBvZiBwYXJhbGxlbCBjb25uZWN0aW9ucyB0byBTRVNcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25hbCBjb25maWcgcGFyYW1ldGVyXG4gKi9cbmNsYXNzIFNFU1RyYW5zcG9ydCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLnNlcyA9IHRoaXMub3B0aW9ucy5TRVM7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1NFU1RyYW5zcG9ydCc7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHBhY2thZ2VEYXRhLnZlcnNpb247XG5cbiAgICAgICAgdGhpcy5sb2dnZXIgPSBzaGFyZWQuZ2V0TG9nZ2VyKHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLm9wdGlvbnMuY29tcG9uZW50IHx8ICdzZXMtdHJhbnNwb3J0J1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBwYXJhbGxlbCBzZW5kaW5nIGNvbm5lY3Rpb25zXG4gICAgICAgIHRoaXMubWF4Q29ubmVjdGlvbnMgPSBOdW1iZXIodGhpcy5vcHRpb25zLm1heENvbm5lY3Rpb25zKSB8fCBJbmZpbml0eTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9ucyA9IDA7XG5cbiAgICAgICAgLy8gbWF4IG1lc3NhZ2VzIHBlciBzZWNvbmRcbiAgICAgICAgdGhpcy5zZW5kaW5nUmF0ZSA9IE51bWJlcih0aGlzLm9wdGlvbnMuc2VuZGluZ1JhdGUpIHx8IEluZmluaXR5O1xuICAgICAgICB0aGlzLnNlbmRpbmdSYXRlVFRMID0gbnVsbDtcbiAgICAgICAgdGhpcy5yYXRlSW50ZXJ2YWwgPSAxMDAwOyAvLyBtaWxsaXNlY29uZHNcbiAgICAgICAgdGhpcy5yYXRlTWVzc2FnZXMgPSBbXTtcblxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBbXTtcblxuICAgICAgICB0aGlzLmlkbGluZyA9IHRydWU7XG5cbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlkbGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaWRsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYSBzZW5kaW5nIG9mIGEgbWVzc2FnZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVtYWlsTWVzc2FnZSBNYWlsQ29tcG9zZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcnVuIHdoZW4gdGhlIHNlbmRpbmcgaXMgY29tcGxldGVkXG4gICAgICovXG4gICAgc2VuZChtYWlsLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9ucyA+PSB0aGlzLm1heENvbm5lY3Rpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmlkbGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGVuZGluZy5wdXNoKHtcbiAgICAgICAgICAgICAgICBtYWlsLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fY2hlY2tTZW5kaW5nUmF0ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmlkbGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGVuZGluZy5wdXNoKHtcbiAgICAgICAgICAgICAgICBtYWlsLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NlbmQobWFpbCwgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiBjYWxsYmFjayguLi5hcmdzKSk7XG4gICAgICAgICAgICB0aGlzLl9zZW50KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jaGVja1JhdGVkUXVldWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25zID49IHRoaXMubWF4Q29ubmVjdGlvbnMgfHwgIXRoaXMuX2NoZWNrU2VuZGluZ1JhdGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnBlbmRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWRsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaWRsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5leHQgPSB0aGlzLnBlbmRpbmcuc2hpZnQoKTtcbiAgICAgICAgdGhpcy5fc2VuZChuZXh0Lm1haWwsICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICBzZXRJbW1lZGlhdGUoKCkgPT4gbmV4dC5jYWxsYmFjayguLi5hcmdzKSk7XG4gICAgICAgICAgICB0aGlzLl9zZW50KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jaGVja1NlbmRpbmdSYXRlKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zZW5kaW5nUmF0ZVRUTCk7XG5cbiAgICAgICAgbGV0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGxldCBvbGRlc3QgPSBmYWxzZTtcbiAgICAgICAgLy8gZGVsZXRlIG9sZGVyIG1lc3NhZ2VzXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnJhdGVNZXNzYWdlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmF0ZU1lc3NhZ2VzW2ldLnRzID49IG5vdyAtIHRoaXMucmF0ZUludGVydmFsICYmICghb2xkZXN0IHx8IHRoaXMucmF0ZU1lc3NhZ2VzW2ldLnRzIDwgb2xkZXN0KSkge1xuICAgICAgICAgICAgICAgIG9sZGVzdCA9IHRoaXMucmF0ZU1lc3NhZ2VzW2ldLnRzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5yYXRlTWVzc2FnZXNbaV0udHMgPCBub3cgLSB0aGlzLnJhdGVJbnRlcnZhbCAmJiAhdGhpcy5yYXRlTWVzc2FnZXNbaV0ucGVuZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMucmF0ZU1lc3NhZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJhdGVNZXNzYWdlcy5sZW5ndGggPCB0aGlzLnNlbmRpbmdSYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZWxheSA9IE1hdGgubWF4KG9sZGVzdCArIDEwMDEsIG5vdyArIDIwKTtcbiAgICAgICAgdGhpcy5zZW5kaW5nUmF0ZVRUTCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fY2hlY2tSYXRlZFF1ZXVlKCksIG5vdyAtIGRlbGF5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zZW5kaW5nUmF0ZVRUTC51bnJlZigpO1xuICAgICAgICB9IGNhdGNoIChFKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUuIEhhcHBlbnMgb24gZW52cyB3aXRoIG5vbi1ub2RlIHRpbWVyIGltcGxlbWVudGF0aW9uXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgX3NlbnQoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbnMtLTtcbiAgICAgICAgdGhpcy5fY2hlY2tSYXRlZFF1ZXVlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGFyZSBmcmVlIHNsb3RzIGluIHRoZSBxdWV1ZVxuICAgICAqL1xuICAgIGlzSWRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRsaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBpbGVzIGEgbWFpbGNvbXBvc2VyIG1lc3NhZ2UgYW5kIGZvcndhcmRzIGl0IHRvIFNFU1xuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVtYWlsTWVzc2FnZSBNYWlsQ29tcG9zZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcnVuIHdoZW4gdGhlIHNlbmRpbmcgaXMgY29tcGxldGVkXG4gICAgICovXG4gICAgX3NlbmQobWFpbCwgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHN0YXRPYmplY3QgPSB7XG4gICAgICAgICAgICB0czogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIHBlbmRpbmc6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9ucysrO1xuICAgICAgICB0aGlzLnJhdGVNZXNzYWdlcy5wdXNoKHN0YXRPYmplY3QpO1xuXG4gICAgICAgIGxldCBlbnZlbG9wZSA9IG1haWwuZGF0YS5lbnZlbG9wZSB8fCBtYWlsLm1lc3NhZ2UuZ2V0RW52ZWxvcGUoKTtcbiAgICAgICAgbGV0IG1lc3NhZ2VJZCA9IG1haWwubWVzc2FnZS5tZXNzYWdlSWQoKTtcblxuICAgICAgICBsZXQgcmVjaXBpZW50cyA9IFtdLmNvbmNhdChlbnZlbG9wZS50byB8fCBbXSk7XG4gICAgICAgIGlmIChyZWNpcGllbnRzLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICAgIHJlY2lwaWVudHMucHVzaCgnLi4uYW5kICcgKyByZWNpcGllbnRzLnNwbGljZSgyKS5sZW5ndGggKyAnIG1vcmUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRueDogJ3NlbmQnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VJZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdTZW5kaW5nIG1lc3NhZ2UgJXMgdG8gPCVzPicsXG4gICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICByZWNpcGllbnRzLmpvaW4oJywgJylcbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgZ2V0UmF3TWVzc2FnZSA9IG5leHQgPT4ge1xuICAgICAgICAgICAgLy8gZG8gbm90IHVzZSBNZXNzYWdlLUlEIGFuZCBEYXRlIGluIERLSU0gc2lnbmF0dXJlXG4gICAgICAgICAgICBpZiAoIW1haWwuZGF0YS5fZGtpbSkge1xuICAgICAgICAgICAgICAgIG1haWwuZGF0YS5fZGtpbSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1haWwuZGF0YS5fZGtpbS5za2lwRmllbGRzICYmIHR5cGVvZiBtYWlsLmRhdGEuX2RraW0uc2tpcEZpZWxkcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBtYWlsLmRhdGEuX2RraW0uc2tpcEZpZWxkcyArPSAnOmRhdGU6bWVzc2FnZS1pZCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1haWwuZGF0YS5fZGtpbS5za2lwRmllbGRzID0gJ2RhdGU6bWVzc2FnZS1pZCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBzb3VyY2VTdHJlYW0gPSBtYWlsLm1lc3NhZ2UuY3JlYXRlUmVhZFN0cmVhbSgpO1xuICAgICAgICAgICAgbGV0IHN0cmVhbSA9IHNvdXJjZVN0cmVhbS5waXBlKG5ldyBMZVdpbmRvd3MoKSk7XG4gICAgICAgICAgICBsZXQgY2h1bmtzID0gW107XG4gICAgICAgICAgICBsZXQgY2h1bmtsZW4gPSAwO1xuXG4gICAgICAgICAgICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjaHVuaztcbiAgICAgICAgICAgICAgICB3aGlsZSAoKGNodW5rID0gc3RyZWFtLnJlYWQoKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgICAgICAgICBjaHVua2xlbiArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNvdXJjZVN0cmVhbS5vbmNlKCdlcnJvcicsIGVyciA9PiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpKTtcblxuICAgICAgICAgICAgc3RyZWFtLm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgICAgICAgICBuZXh0KGVycik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc3RyZWFtLm9uY2UoJ2VuZCcsICgpID0+IG5leHQobnVsbCwgQnVmZmVyLmNvbmNhdChjaHVua3MsIGNodW5rbGVuKSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PlxuICAgICAgICAgICAgZ2V0UmF3TWVzc2FnZSgoZXJyLCByYXcpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bng6ICdzZW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIGNyZWF0aW5nIG1lc3NhZ2UgZm9yICVzLiAlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBzdGF0T2JqZWN0LnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHNlc01lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIFJhd01lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICBEYXRhOiByYXcgLy8gcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgU291cmNlOiBlbnZlbG9wZS5mcm9tLFxuICAgICAgICAgICAgICAgICAgICBEZXN0aW5hdGlvbnM6IGVudmVsb3BlLnRvXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1haWwuZGF0YS5zZXMgfHwge30pLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VzTWVzc2FnZVtrZXldID0gbWFpbC5kYXRhLnNlc1trZXldO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbGV0IHNlcyA9ICh0aGlzLnNlcy5hd3MgPyB0aGlzLnNlcy5zZXMgOiB0aGlzLnNlcykgfHwge307XG4gICAgICAgICAgICAgICAgbGV0IGF3cyA9IHRoaXMuc2VzLmF3cyB8fCB7fTtcblxuICAgICAgICAgICAgICAgIGxldCBnZXRSZWdpb24gPSBjYiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXMuY29uZmlnICYmIHR5cGVvZiBzZXMuY29uZmlnLnJlZ2lvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcy5jb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVnaW9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZWdpb24gPT4gY2IobnVsbCwgcmVnaW9uKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNiKGVycikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYihudWxsLCAoc2VzLmNvbmZpZyAmJiBzZXMuY29uZmlnLnJlZ2lvbikgfHwgJ3VzLWVhc3QtMScpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBnZXRSZWdpb24oKGVyciwgcmVnaW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIgfHwgIXJlZ2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uID0gJ3VzLWVhc3QtMSc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgc2VuZFByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VzLnNlbmQgPT09ICdmdW5jdGlvbicgJiYgYXdzLlNlbmRSYXdFbWFpbENvbW1hbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHYzIEFQSVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFByb21pc2UgPSBzZXMuc2VuZChuZXcgYXdzLlNlbmRSYXdFbWFpbENvbW1hbmQoc2VzTWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdjIgQVBJXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kUHJvbWlzZSA9IHNlcy5zZW5kUmF3RW1haWwoc2VzTWVzc2FnZSkucHJvbWlzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2VuZFByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWdpb24gPT09ICd1cy1lYXN0LTEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbiA9ICdlbWFpbCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdE9iamVjdC5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZlbG9wZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogZW52ZWxvcGUuZnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBlbnZlbG9wZS50b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWQ6ICc8JyArIGRhdGEuTWVzc2FnZUlkICsgKCEvQC8udGVzdChkYXRhLk1lc3NhZ2VJZCkgPyAnQCcgKyByZWdpb24gKyAnLmFtYXpvbnNlcy5jb20nIDogJycpICsgJz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogZGF0YS5NZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bng6ICdzZW5kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU2VuZCBlcnJvciBmb3IgJXM6ICVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdE9iamVjdC5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyBTRVMgY29uZmlndXJhdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICB2ZXJpZnkoY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHByb21pc2U7XG4gICAgICAgIGxldCBzZXMgPSAodGhpcy5zZXMuYXdzID8gdGhpcy5zZXMuc2VzIDogdGhpcy5zZXMpIHx8IHt9O1xuICAgICAgICBsZXQgYXdzID0gdGhpcy5zZXMuYXdzIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IHNlc01lc3NhZ2UgPSB7XG4gICAgICAgICAgICBSYXdNZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgLy8gcmVxdWlyZWRcbiAgICAgICAgICAgICAgICBEYXRhOiAnRnJvbTogaW52YWxpZEBpbnZhbGlkXFxyXFxuVG86IGludmFsaWRAaW52YWxpZFxcclxcbiBTdWJqZWN0OiBJbnZhbGlkXFxyXFxuXFxyXFxuSW52YWxpZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBTb3VyY2U6ICdpbnZhbGlkQGludmFsaWQnLFxuICAgICAgICAgICAgRGVzdGluYXRpb25zOiBbJ2ludmFsaWRAaW52YWxpZCddXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHNoYXJlZC5jYWxsYmFja1Byb21pc2UocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNiID0gZXJyID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIgJiYgKGVyci5jb2RlIHx8IGVyci5Db2RlKSAhPT0gJ0ludmFsaWRQYXJhbWV0ZXJWYWx1ZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodHlwZW9mIHNlcy5zZW5kID09PSAnZnVuY3Rpb24nICYmIGF3cy5TZW5kUmF3RW1haWxDb21tYW5kKSB7XG4gICAgICAgICAgICAvLyB2MyBBUElcbiAgICAgICAgICAgIHNlc01lc3NhZ2UuUmF3TWVzc2FnZS5EYXRhID0gQnVmZmVyLmZyb20oc2VzTWVzc2FnZS5SYXdNZXNzYWdlLkRhdGEpO1xuICAgICAgICAgICAgc2VzLnNlbmQobmV3IGF3cy5TZW5kUmF3RW1haWxDb21tYW5kKHNlc01lc3NhZ2UpLCBjYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB2MiBBUElcbiAgICAgICAgICAgIHNlcy5zZW5kUmF3RW1haWwoc2VzTWVzc2FnZSwgY2IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNFU1RyYW5zcG9ydDtcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwicGFja2FnZURhdGEiLCJzaGFyZWQiLCJMZVdpbmRvd3MiLCJTRVNUcmFuc3BvcnQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJzZXMiLCJTRVMiLCJuYW1lIiwidmVyc2lvbiIsImxvZ2dlciIsImdldExvZ2dlciIsImNvbXBvbmVudCIsIm1heENvbm5lY3Rpb25zIiwiTnVtYmVyIiwiSW5maW5pdHkiLCJjb25uZWN0aW9ucyIsInNlbmRpbmdSYXRlIiwic2VuZGluZ1JhdGVUVEwiLCJyYXRlSW50ZXJ2YWwiLCJyYXRlTWVzc2FnZXMiLCJwZW5kaW5nIiwiaWRsaW5nIiwic2V0SW1tZWRpYXRlIiwiZW1pdCIsInNlbmQiLCJtYWlsIiwiY2FsbGJhY2siLCJwdXNoIiwiX2NoZWNrU2VuZGluZ1JhdGUiLCJfc2VuZCIsImFyZ3MiLCJfc2VudCIsIl9jaGVja1JhdGVkUXVldWUiLCJsZW5ndGgiLCJuZXh0Iiwic2hpZnQiLCJjbGVhclRpbWVvdXQiLCJub3ciLCJEYXRlIiwib2xkZXN0IiwiaSIsInRzIiwic3BsaWNlIiwiZGVsYXkiLCJNYXRoIiwibWF4Iiwic2V0VGltZW91dCIsInVucmVmIiwiRSIsImlzSWRsZSIsInN0YXRPYmplY3QiLCJlbnZlbG9wZSIsImRhdGEiLCJtZXNzYWdlIiwiZ2V0RW52ZWxvcGUiLCJtZXNzYWdlSWQiLCJyZWNpcGllbnRzIiwiY29uY2F0IiwidG8iLCJpbmZvIiwidG54Iiwiam9pbiIsImdldFJhd01lc3NhZ2UiLCJfZGtpbSIsInNraXBGaWVsZHMiLCJzb3VyY2VTdHJlYW0iLCJjcmVhdGVSZWFkU3RyZWFtIiwic3RyZWFtIiwicGlwZSIsImNodW5rcyIsImNodW5rbGVuIiwib24iLCJjaHVuayIsInJlYWQiLCJvbmNlIiwiZXJyIiwiQnVmZmVyIiwicmF3IiwiZXJyb3IiLCJzZXNNZXNzYWdlIiwiUmF3TWVzc2FnZSIsIkRhdGEiLCJTb3VyY2UiLCJmcm9tIiwiRGVzdGluYXRpb25zIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJhd3MiLCJnZXRSZWdpb24iLCJjYiIsImNvbmZpZyIsInJlZ2lvbiIsInRoZW4iLCJjYXRjaCIsInNlbmRQcm9taXNlIiwiU2VuZFJhd0VtYWlsQ29tbWFuZCIsInNlbmRSYXdFbWFpbCIsInByb21pc2UiLCJNZXNzYWdlSWQiLCJ0ZXN0IiwicmVzcG9uc2UiLCJ2ZXJpZnkiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbGxiYWNrUHJvbWlzZSIsImNvZGUiLCJDb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/shared/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/shared/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-console: 0 */ \nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst DNS_TTL = 5 * 60 * 1000;\nlet networkInterfaces;\ntry {\n    networkInterfaces = os.networkInterfaces();\n} catch (err) {\n// fails on some systems\n}\nmodule.exports.networkInterfaces = networkInterfaces;\nconst isFamilySupported = (family, allowInternal)=>{\n    let networkInterfaces = module.exports.networkInterfaces;\n    if (!networkInterfaces) {\n        // hope for the best\n        return true;\n    }\n    const familySupported = // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n    Object.keys(networkInterfaces).map((key)=>networkInterfaces[key])// crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n    .reduce((acc, val)=>acc.concat(val), []).filter((i)=>!i.internal || allowInternal).filter((i)=>i.family === \"IPv\" + family || i.family === family).length > 0;\n    return familySupported;\n};\nconst resolver = (family, hostname, options, callback)=>{\n    options = options || {};\n    const familySupported = isFamilySupported(family, options.allowInternalNetworkInterfaces);\n    if (!familySupported) {\n        return callback(null, []);\n    }\n    const resolver = dns.Resolver ? new dns.Resolver(options) : dns;\n    resolver[\"resolve\" + family](hostname, (err, addresses)=>{\n        if (err) {\n            switch(err.code){\n                case dns.NODATA:\n                case dns.NOTFOUND:\n                case dns.NOTIMP:\n                case dns.SERVFAIL:\n                case dns.CONNREFUSED:\n                case dns.REFUSED:\n                case \"EAI_AGAIN\":\n                    return callback(null, []);\n            }\n            return callback(err);\n        }\n        return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n    });\n};\nconst dnsCache = module.exports.dnsCache = new Map();\nconst formatDNSValue = (value, extra)=>{\n    if (!value) {\n        return Object.assign({}, extra || {});\n    }\n    return Object.assign({\n        servername: value.servername,\n        host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n    }, extra || {});\n};\nmodule.exports.resolveHostname = (options, callback)=>{\n    options = options || {};\n    if (!options.host && options.servername) {\n        options.host = options.servername;\n    }\n    if (!options.host || net.isIP(options.host)) {\n        // nothing to do here\n        let value = {\n            addresses: [\n                options.host\n            ],\n            servername: options.servername || false\n        };\n        return callback(null, formatDNSValue(value, {\n            cached: false\n        }));\n    }\n    let cached;\n    if (dnsCache.has(options.host)) {\n        cached = dnsCache.get(options.host);\n        if (!cached.expires || cached.expires >= Date.now()) {\n            return callback(null, formatDNSValue(cached.value, {\n                cached: true\n            }));\n        }\n    }\n    resolver(4, options.host, options, (err, addresses)=>{\n        if (err) {\n            if (cached) {\n                // ignore error, use expired value\n                return callback(null, formatDNSValue(cached.value, {\n                    cached: true,\n                    error: err\n                }));\n            }\n            return callback(err);\n        }\n        if (addresses && addresses.length) {\n            let value = {\n                addresses,\n                servername: options.servername || options.host\n            };\n            dnsCache.set(options.host, {\n                value,\n                expires: Date.now() + (options.dnsTtl || DNS_TTL)\n            });\n            return callback(null, formatDNSValue(value, {\n                cached: false\n            }));\n        }\n        resolver(6, options.host, options, (err, addresses)=>{\n            if (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(null, formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    }));\n                }\n                return callback(err);\n            }\n            if (addresses && addresses.length) {\n                let value = {\n                    addresses,\n                    servername: options.servername || options.host\n                };\n                dnsCache.set(options.host, {\n                    value,\n                    expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                });\n                return callback(null, formatDNSValue(value, {\n                    cached: false\n                }));\n            }\n            try {\n                dns.lookup(options.host, {\n                    all: true\n                }, (err, addresses)=>{\n                    if (err) {\n                        if (cached) {\n                            // ignore error, use expired value\n                            return callback(null, formatDNSValue(cached.value, {\n                                cached: true,\n                                error: err\n                            }));\n                        }\n                        return callback(err);\n                    }\n                    let address = addresses ? addresses.filter((addr)=>isFamilySupported(addr.family)).map((addr)=>addr.address).shift() : false;\n                    if (addresses && addresses.length && !address) {\n                        // there are addresses but none can be used\n                        console.warn(`Failed to resolve IPv${addresses[0].family} addresses with current network`);\n                    }\n                    if (!address && cached) {\n                        // nothing was found, fallback to cached value\n                        return callback(null, formatDNSValue(cached.value, {\n                            cached: true\n                        }));\n                    }\n                    let value = {\n                        addresses: address ? [\n                            address\n                        ] : [\n                            options.host\n                        ],\n                        servername: options.servername || options.host\n                    };\n                    dnsCache.set(options.host, {\n                        value,\n                        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                    });\n                    return callback(null, formatDNSValue(value, {\n                        cached: false\n                    }));\n                });\n            } catch (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(null, formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    }));\n                }\n                return callback(err);\n            }\n        });\n    });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */ module.exports.parseConnectionUrl = (str)=>{\n    str = str || \"\";\n    let options = {};\n    [\n        urllib.parse(str, true)\n    ].forEach((url)=>{\n        let auth;\n        switch(url.protocol){\n            case \"smtp:\":\n                options.secure = false;\n                break;\n            case \"smtps:\":\n                options.secure = true;\n                break;\n            case \"direct:\":\n                options.direct = true;\n                break;\n        }\n        if (!isNaN(url.port) && Number(url.port)) {\n            options.port = Number(url.port);\n        }\n        if (url.hostname) {\n            options.host = url.hostname;\n        }\n        if (url.auth) {\n            auth = url.auth.split(\":\");\n            if (!options.auth) {\n                options.auth = {};\n            }\n            options.auth.user = auth.shift();\n            options.auth.pass = auth.join(\":\");\n        }\n        Object.keys(url.query || {}).forEach((key)=>{\n            let obj = options;\n            let lKey = key;\n            let value = url.query[key];\n            if (!isNaN(value)) {\n                value = Number(value);\n            }\n            switch(value){\n                case \"true\":\n                    value = true;\n                    break;\n                case \"false\":\n                    value = false;\n                    break;\n            }\n            // tls is nested object\n            if (key.indexOf(\"tls.\") === 0) {\n                lKey = key.substr(4);\n                if (!options.tls) {\n                    options.tls = {};\n                }\n                obj = options.tls;\n            } else if (key.indexOf(\".\") >= 0) {\n                // ignore nested properties besides tls\n                return;\n            }\n            if (!(lKey in obj)) {\n                obj[lKey] = value;\n            }\n        });\n    });\n    return options;\n};\nmodule.exports._logFunc = (logger, level, defaults, data, message, ...args)=>{\n    let entry = {};\n    Object.keys(defaults || {}).forEach((key)=>{\n        if (key !== \"level\") {\n            entry[key] = defaults[key];\n        }\n    });\n    Object.keys(data || {}).forEach((key)=>{\n        if (key !== \"level\") {\n            entry[key] = data[key];\n        }\n    });\n    logger[level](entry, message, ...args);\n};\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */ module.exports.getLogger = (options, defaults)=>{\n    options = options || {};\n    let response = {};\n    let levels = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\",\n        \"fatal\"\n    ];\n    if (!options.logger) {\n        // use vanity logger\n        levels.forEach((level)=>{\n            response[level] = ()=>false;\n        });\n        return response;\n    }\n    let logger = options.logger;\n    if (options.logger === true) {\n        // create console logger\n        logger = createDefaultLogger(levels);\n    }\n    levels.forEach((level)=>{\n        response[level] = (data, message, ...args)=>{\n            module.exports._logFunc(logger, level, defaults, data, message, ...args);\n        };\n    });\n    return response;\n};\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */ module.exports.callbackPromise = (resolve, reject)=>function() {\n        let args = Array.from(arguments);\n        let err = args.shift();\n        if (err) {\n            reject(err);\n        } else {\n            resolve(...args);\n        }\n    };\nmodule.exports.parseDataURI = (uri)=>{\n    let input = uri;\n    let commaPos = input.indexOf(\",\");\n    if (!commaPos) {\n        return uri;\n    }\n    let data = input.substring(commaPos + 1);\n    let metaStr = input.substring(\"data:\".length, commaPos);\n    let encoding;\n    let metaEntries = metaStr.split(\";\");\n    let lastMetaEntry = metaEntries.length > 1 ? metaEntries[metaEntries.length - 1] : false;\n    if (lastMetaEntry && lastMetaEntry.indexOf(\"=\") < 0) {\n        encoding = lastMetaEntry.toLowerCase();\n        metaEntries.pop();\n    }\n    let contentType = metaEntries.shift() || \"application/octet-stream\";\n    let params = {};\n    for (let entry of metaEntries){\n        let sep = entry.indexOf(\"=\");\n        if (sep >= 0) {\n            let key = entry.substring(0, sep);\n            let value = entry.substring(sep + 1);\n            params[key] = value;\n        }\n    }\n    switch(encoding){\n        case \"base64\":\n            data = Buffer.from(data, \"base64\");\n            break;\n        case \"utf8\":\n            data = Buffer.from(data);\n            break;\n        default:\n            try {\n                data = Buffer.from(decodeURIComponent(data));\n            } catch (err) {\n                data = Buffer.from(data);\n            }\n            data = Buffer.from(data);\n    }\n    return {\n        data,\n        encoding,\n        contentType,\n        params\n    };\n};\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */ module.exports.resolveContent = (data, key, callback)=>{\n    let promise;\n    if (!callback) {\n        promise = new Promise((resolve, reject)=>{\n            callback = module.exports.callbackPromise(resolve, reject);\n        });\n    }\n    let content = data && data[key] && data[key].content || data[key];\n    let contentStream;\n    let encoding = (typeof data[key] === \"object\" && data[key].encoding || \"utf8\").toString().toLowerCase().replace(/[-_\\s]/g, \"\");\n    if (!content) {\n        return callback(null, content);\n    }\n    if (typeof content === \"object\") {\n        if (typeof content.pipe === \"function\") {\n            return resolveStream(content, (err, value)=>{\n                if (err) {\n                    return callback(err);\n                }\n                // we can't stream twice the same content, so we need\n                // to replace the stream object with the streaming result\n                if (data[key].content) {\n                    data[key].content = value;\n                } else {\n                    data[key] = value;\n                }\n                callback(null, value);\n            });\n        } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n            contentStream = nmfetch(content.path || content.href);\n            return resolveStream(contentStream, callback);\n        } else if (/^data:/i.test(content.path || content.href)) {\n            let parsedDataUri = module.exports.parseDataURI(content.path || content.href);\n            if (!parsedDataUri || !parsedDataUri.data) {\n                return callback(null, Buffer.from(0));\n            }\n            return callback(null, parsedDataUri.data);\n        } else if (content.path) {\n            return resolveStream(fs.createReadStream(content.path), callback);\n        }\n    }\n    if (typeof data[key].content === \"string\" && ![\n        \"utf8\",\n        \"usascii\",\n        \"ascii\"\n    ].includes(encoding)) {\n        content = Buffer.from(data[key].content, encoding);\n    }\n    // default action, return as is\n    setImmediate(()=>callback(null, content));\n    return promise;\n};\n/**\n * Copies properties from source objects to target objects\n */ module.exports.assign = function() {\n    let args = Array.from(arguments);\n    let target = args.shift() || {};\n    args.forEach((source)=>{\n        Object.keys(source || {}).forEach((key)=>{\n            if ([\n                \"tls\",\n                \"auth\"\n            ].includes(key) && source[key] && typeof source[key] === \"object\") {\n                // tls and auth are special keys that need to be enumerated separately\n                // other objects are passed as is\n                if (!target[key]) {\n                    // ensure that target has this key\n                    target[key] = {};\n                }\n                Object.keys(source[key]).forEach((subKey)=>{\n                    target[key][subKey] = source[key][subKey];\n                });\n            } else {\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n};\nmodule.exports.encodeXText = (str)=>{\n    // ! 0x21\n    // + 0x2B\n    // = 0x3D\n    // ~ 0x7E\n    if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n        return str;\n    }\n    let buf = Buffer.from(str);\n    let result = \"\";\n    for(let i = 0, len = buf.length; i < len; i++){\n        let c = buf[i];\n        if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n            result += \"+\" + (c < 0x10 ? \"0\" : \"\") + c.toString(16).toUpperCase();\n        } else {\n            result += String.fromCharCode(c);\n        }\n    }\n    return result;\n};\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */ function resolveStream(stream, callback) {\n    let responded = false;\n    let chunks = [];\n    let chunklen = 0;\n    stream.on(\"error\", (err)=>{\n        if (responded) {\n            return;\n        }\n        responded = true;\n        callback(err);\n    });\n    stream.on(\"readable\", ()=>{\n        let chunk;\n        while((chunk = stream.read()) !== null){\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n    stream.on(\"end\", ()=>{\n        if (responded) {\n            return;\n        }\n        responded = true;\n        let value;\n        try {\n            value = Buffer.concat(chunks, chunklen);\n        } catch (E) {\n            return callback(E);\n        }\n        callback(null, value);\n    });\n}\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */ function createDefaultLogger(levels) {\n    let levelMaxLen = 0;\n    let levelNames = new Map();\n    levels.forEach((level)=>{\n        if (level.length > levelMaxLen) {\n            levelMaxLen = level.length;\n        }\n    });\n    levels.forEach((level)=>{\n        let levelName = level.toUpperCase();\n        if (levelName.length < levelMaxLen) {\n            levelName += \" \".repeat(levelMaxLen - levelName.length);\n        }\n        levelNames.set(level, levelName);\n    });\n    let print = (level, entry, message, ...args)=>{\n        let prefix = \"\";\n        if (entry) {\n            if (entry.tnx === \"server\") {\n                prefix = \"S: \";\n            } else if (entry.tnx === \"client\") {\n                prefix = \"C: \";\n            }\n            if (entry.sid) {\n                prefix = \"[\" + entry.sid + \"] \" + prefix;\n            }\n            if (entry.cid) {\n                prefix = \"[#\" + entry.cid + \"] \" + prefix;\n            }\n        }\n        message = util.format(message, ...args);\n        message.split(/\\r?\\n/).forEach((line)=>{\n            console.log(\"[%s] %s %s\", new Date().toISOString().substr(0, 19).replace(/T/, \" \"), levelNames.get(level), prefix + line);\n        });\n    };\n    let logger = {};\n    levels.forEach((level)=>{\n        logger[level] = print.bind(null, level);\n    });\n    return logger;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/shared/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js":
/*!********************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/data-stream.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */ class DataStream extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this._curLine = \"\";\n        this.inByteCount = 0;\n        this.outByteCount = 0;\n        this.lastByte = false;\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let chunks = [];\n        let chunklen = 0;\n        let i, len, lastPos = 0;\n        let buf;\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk);\n        }\n        this.inByteCount += chunk.length;\n        for(i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x2e) {\n                // .\n                if (i && chunk[i - 1] === 0x0a || !i && (!this.lastByte || this.lastByte === 0x0a)) {\n                    buf = chunk.slice(lastPos, i + 1);\n                    chunks.push(buf);\n                    chunks.push(Buffer.from(\".\"));\n                    chunklen += buf.length + 1;\n                    lastPos = i + 1;\n                }\n            } else if (chunk[i] === 0x0a) {\n                // .\n                if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        chunks.push(buf);\n                        chunklen += buf.length + 2;\n                    } else {\n                        chunklen += 2;\n                    }\n                    chunks.push(Buffer.from(\"\\r\\n\"));\n                    lastPos = i + 1;\n                }\n            }\n        }\n        if (chunklen) {\n            // add last piece\n            if (lastPos < chunk.length) {\n                buf = chunk.slice(lastPos);\n                chunks.push(buf);\n                chunklen += buf.length;\n            }\n            this.outByteCount += chunklen;\n            this.push(Buffer.concat(chunks, chunklen));\n        } else {\n            this.outByteCount += chunk.length;\n            this.push(chunk);\n        }\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n    /**\n     * Finalizes the stream with a dot on a single line\n     */ _flush(done) {\n        let buf;\n        if (this.lastByte === 0x0a) {\n            buf = Buffer.from(\".\\r\\n\");\n        } else if (this.lastByte === 0x0d) {\n            buf = Buffer.from(\"\\n.\\r\\n\");\n        } else {\n            buf = Buffer.from(\"\\r\\n.\\r\\n\");\n        }\n        this.outByteCount += buf.length;\n        this.push(buf);\n        done();\n    }\n}\nmodule.exports = DataStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvc210cC1jb25uZWN0aW9uL2RhdGEtc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsWUFBWUYsT0FBT0UsU0FBUztBQUVsQzs7Ozs7Q0FLQyxHQUNELE1BQU1DLG1CQUFtQkQ7SUFDckJFLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04saUJBQWlCO1FBQ2pCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFDM0IsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFFaEIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFDcEI7SUFFQTs7S0FFQyxHQUNEQyxXQUFXQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFO1FBQzlCLElBQUlDLFNBQVMsRUFBRTtRQUNmLElBQUlDLFdBQVc7UUFDZixJQUFJQyxHQUNBQyxLQUNBQyxVQUFVO1FBQ2QsSUFBSUM7UUFFSixJQUFJLENBQUNSLFNBQVMsQ0FBQ0EsTUFBTVMsTUFBTSxFQUFFO1lBQ3pCLE9BQU9QO1FBQ1g7UUFFQSxJQUFJLE9BQU9GLFVBQVUsVUFBVTtZQUMzQkEsUUFBUVUsT0FBT0MsSUFBSSxDQUFDWDtRQUN4QjtRQUVBLElBQUksQ0FBQ0osV0FBVyxJQUFJSSxNQUFNUyxNQUFNO1FBRWhDLElBQUtKLElBQUksR0FBR0MsTUFBTU4sTUFBTVMsTUFBTSxFQUFFSixJQUFJQyxLQUFLRCxJQUFLO1lBQzFDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLElBQUk7Z0JBQ0osSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBTSxFQUFDLElBQUksQ0FBQ1AsUUFBUSxJQUFJLElBQUksQ0FBQ0EsUUFBUSxLQUFLLElBQUcsR0FBSztvQkFDcEZVLE1BQU1SLE1BQU1ZLEtBQUssQ0FBQ0wsU0FBU0YsSUFBSTtvQkFDL0JGLE9BQU9VLElBQUksQ0FBQ0w7b0JBQ1pMLE9BQU9VLElBQUksQ0FBQ0gsT0FBT0MsSUFBSSxDQUFDO29CQUN4QlAsWUFBWUksSUFBSUMsTUFBTSxHQUFHO29CQUN6QkYsVUFBVUYsSUFBSTtnQkFDbEI7WUFDSixPQUFPLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQzFCLElBQUk7Z0JBQ0osSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBSyxJQUFJLENBQUNQLFFBQVEsS0FBSyxNQUFPO29CQUNoRSxJQUFJTyxJQUFJRSxTQUFTO3dCQUNiQyxNQUFNUixNQUFNWSxLQUFLLENBQUNMLFNBQVNGO3dCQUMzQkYsT0FBT1UsSUFBSSxDQUFDTDt3QkFDWkosWUFBWUksSUFBSUMsTUFBTSxHQUFHO29CQUM3QixPQUFPO3dCQUNITCxZQUFZO29CQUNoQjtvQkFDQUQsT0FBT1UsSUFBSSxDQUFDSCxPQUFPQyxJQUFJLENBQUM7b0JBQ3hCSixVQUFVRixJQUFJO2dCQUNsQjtZQUNKO1FBQ0o7UUFFQSxJQUFJRCxVQUFVO1lBQ1YsaUJBQWlCO1lBQ2pCLElBQUlHLFVBQVVQLE1BQU1TLE1BQU0sRUFBRTtnQkFDeEJELE1BQU1SLE1BQU1ZLEtBQUssQ0FBQ0w7Z0JBQ2xCSixPQUFPVSxJQUFJLENBQUNMO2dCQUNaSixZQUFZSSxJQUFJQyxNQUFNO1lBQzFCO1lBRUEsSUFBSSxDQUFDWixZQUFZLElBQUlPO1lBQ3JCLElBQUksQ0FBQ1MsSUFBSSxDQUFDSCxPQUFPSSxNQUFNLENBQUNYLFFBQVFDO1FBQ3BDLE9BQU87WUFDSCxJQUFJLENBQUNQLFlBQVksSUFBSUcsTUFBTVMsTUFBTTtZQUNqQyxJQUFJLENBQUNJLElBQUksQ0FBQ2I7UUFDZDtRQUVBLElBQUksQ0FBQ0YsUUFBUSxHQUFHRSxLQUFLLENBQUNBLE1BQU1TLE1BQU0sR0FBRyxFQUFFO1FBQ3ZDUDtJQUNKO0lBRUE7O0tBRUMsR0FDRGEsT0FBT2IsSUFBSSxFQUFFO1FBQ1QsSUFBSU07UUFDSixJQUFJLElBQUksQ0FBQ1YsUUFBUSxLQUFLLE1BQU07WUFDeEJVLE1BQU1FLE9BQU9DLElBQUksQ0FBQztRQUN0QixPQUFPLElBQUksSUFBSSxDQUFDYixRQUFRLEtBQUssTUFBTTtZQUMvQlUsTUFBTUUsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCLE9BQU87WUFDSEgsTUFBTUUsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDZCxZQUFZLElBQUlXLElBQUlDLE1BQU07UUFDL0IsSUFBSSxDQUFDSSxJQUFJLENBQUNMO1FBQ1ZOO0lBQ0o7QUFDSjtBQUVBYyxPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRpbnVhbGcvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvc210cC1jb25uZWN0aW9uL2RhdGEtc3RyZWFtLmpzPzAzM2UiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmNvbnN0IFRyYW5zZm9ybSA9IHN0cmVhbS5UcmFuc2Zvcm07XG5cbi8qKlxuICogRXNjYXBlcyBkb3RzIGluIHRoZSBiZWdpbm5pbmcgb2YgbGluZXMuIEVuZHMgdGhlIHN0cmVhbSB3aXRoIDxDUj48TEY+LjxDUj48TEY+XG4gKiBBbHNvIG1ha2VzIHN1cmUgdGhhdCBvbmx5IDxDUj48TEY+IHNlcXVlbmNlcyBhcmUgdXNlZCBmb3IgbGluZWJyZWFrc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFN0cmVhbSBvcHRpb25zXG4gKi9cbmNsYXNzIERhdGFTdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIC8vIGluaXQgVHJhbnNmb3JtXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMuX2N1ckxpbmUgPSAnJztcblxuICAgICAgICB0aGlzLmluQnl0ZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5vdXRCeXRlQ291bnQgPSAwO1xuICAgICAgICB0aGlzLmxhc3RCeXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyBkb3RzXG4gICAgICovXG4gICAgX3RyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHtcbiAgICAgICAgbGV0IGNodW5rcyA9IFtdO1xuICAgICAgICBsZXQgY2h1bmtsZW4gPSAwO1xuICAgICAgICBsZXQgaSxcbiAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgIGxhc3RQb3MgPSAwO1xuICAgICAgICBsZXQgYnVmO1xuXG4gICAgICAgIGlmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5CeXRlQ291bnQgKz0gY2h1bmsubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY2h1bmtbaV0gPT09IDB4MmUpIHtcbiAgICAgICAgICAgICAgICAvLyAuXG4gICAgICAgICAgICAgICAgaWYgKChpICYmIGNodW5rW2kgLSAxXSA9PT0gMHgwYSkgfHwgKCFpICYmICghdGhpcy5sYXN0Qnl0ZSB8fCB0aGlzLmxhc3RCeXRlID09PSAweDBhKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmID0gY2h1bmsuc2xpY2UobGFzdFBvcywgaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICBjaHVua3MucHVzaChidWYpO1xuICAgICAgICAgICAgICAgICAgICBjaHVua3MucHVzaChCdWZmZXIuZnJvbSgnLicpKTtcbiAgICAgICAgICAgICAgICAgICAgY2h1bmtsZW4gKz0gYnVmLmxlbmd0aCArIDE7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQb3MgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNodW5rW2ldID09PSAweDBhKSB7XG4gICAgICAgICAgICAgICAgLy8gLlxuICAgICAgICAgICAgICAgIGlmICgoaSAmJiBjaHVua1tpIC0gMV0gIT09IDB4MGQpIHx8ICghaSAmJiB0aGlzLmxhc3RCeXRlICE9PSAweDBkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IGxhc3RQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtzLnB1c2goYnVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rbGVuICs9IGJ1Zi5sZW5ndGggKyAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtsZW4gKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaHVua3MucHVzaChCdWZmZXIuZnJvbSgnXFxyXFxuJykpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0UG9zID0gaSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNodW5rbGVuKSB7XG4gICAgICAgICAgICAvLyBhZGQgbGFzdCBwaWVjZVxuICAgICAgICAgICAgaWYgKGxhc3RQb3MgPCBjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zKTtcbiAgICAgICAgICAgICAgICBjaHVua3MucHVzaChidWYpO1xuICAgICAgICAgICAgICAgIGNodW5rbGVuICs9IGJ1Zi5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub3V0Qnl0ZUNvdW50ICs9IGNodW5rbGVuO1xuICAgICAgICAgICAgdGhpcy5wdXNoKEJ1ZmZlci5jb25jYXQoY2h1bmtzLCBjaHVua2xlbikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vdXRCeXRlQ291bnQgKz0gY2h1bmsubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdEJ5dGUgPSBjaHVua1tjaHVuay5sZW5ndGggLSAxXTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmFsaXplcyB0aGUgc3RyZWFtIHdpdGggYSBkb3Qgb24gYSBzaW5nbGUgbGluZVxuICAgICAqL1xuICAgIF9mbHVzaChkb25lKSB7XG4gICAgICAgIGxldCBidWY7XG4gICAgICAgIGlmICh0aGlzLmxhc3RCeXRlID09PSAweDBhKSB7XG4gICAgICAgICAgICBidWYgPSBCdWZmZXIuZnJvbSgnLlxcclxcbicpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGFzdEJ5dGUgPT09IDB4MGQpIHtcbiAgICAgICAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKCdcXG4uXFxyXFxuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWYgPSBCdWZmZXIuZnJvbSgnXFxyXFxuLlxcclxcbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3V0Qnl0ZUNvdW50ICs9IGJ1Zi5sZW5ndGg7XG4gICAgICAgIHRoaXMucHVzaChidWYpO1xuICAgICAgICBkb25lKCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFTdHJlYW07XG4iXSwibmFtZXMiOlsic3RyZWFtIiwicmVxdWlyZSIsIlRyYW5zZm9ybSIsIkRhdGFTdHJlYW0iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJfY3VyTGluZSIsImluQnl0ZUNvdW50Iiwib3V0Qnl0ZUNvdW50IiwibGFzdEJ5dGUiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImRvbmUiLCJjaHVua3MiLCJjaHVua2xlbiIsImkiLCJsZW4iLCJsYXN0UG9zIiwiYnVmIiwibGVuZ3RoIiwiQnVmZmVyIiwiZnJvbSIsInNsaWNlIiwicHVzaCIsImNvbmNhdCIsIl9mbHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js":
/*!**************************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Minimal HTTP/S proxy client\n */ const net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\n/**\n * Establishes proxied connection to destinationPort\n *\n * httpProxyClient(\"http://localhost:3128/\", 80, \"google.com\", function(err, socket){\n *     socket.write(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n * });\n *\n * @param {String} proxyUrl proxy configuration, etg \"http://proxy.host:3128/\"\n * @param {Number} destinationPort Port to open in destination host\n * @param {String} destinationHost Destination hostname\n * @param {Function} callback Callback to run with the rocket object once connection is established\n */ function httpProxyClient(proxyUrl, destinationPort, destinationHost, callback) {\n    let proxy = urllib.parse(proxyUrl);\n    // create a socket connection to the proxy server\n    let options;\n    let connect;\n    let socket;\n    options = {\n        host: proxy.hostname,\n        port: Number(proxy.port) ? Number(proxy.port) : proxy.protocol === \"https:\" ? 443 : 80\n    };\n    if (proxy.protocol === \"https:\") {\n        // we can use untrusted proxies as long as we verify actual SMTP certificates\n        options.rejectUnauthorized = false;\n        connect = tls.connect.bind(tls);\n    } else {\n        connect = net.connect.bind(net);\n    }\n    // Error harness for initial connection. Once connection is established, the responsibility\n    // to handle errors is passed to whoever uses this socket\n    let finished = false;\n    let tempSocketErr = (err)=>{\n        if (finished) {\n            return;\n        }\n        finished = true;\n        try {\n            socket.destroy();\n        } catch (E) {\n        // ignore\n        }\n        callback(err);\n    };\n    let timeoutErr = ()=>{\n        let err = new Error(\"Proxy socket timed out\");\n        err.code = \"ETIMEDOUT\";\n        tempSocketErr(err);\n    };\n    socket = connect(options, ()=>{\n        if (finished) {\n            return;\n        }\n        let reqHeaders = {\n            Host: destinationHost + \":\" + destinationPort,\n            Connection: \"close\"\n        };\n        if (proxy.auth) {\n            reqHeaders[\"Proxy-Authorization\"] = \"Basic \" + Buffer.from(proxy.auth).toString(\"base64\");\n        }\n        socket.write(// HTTP method\n        \"CONNECT \" + destinationHost + \":\" + destinationPort + \" HTTP/1.1\\r\\n\" + // HTTP request headers\n        Object.keys(reqHeaders).map((key)=>key + \": \" + reqHeaders[key]).join(\"\\r\\n\") + // End request\n        \"\\r\\n\\r\\n\");\n        let headers = \"\";\n        let onSocketData = (chunk)=>{\n            let match;\n            let remainder;\n            if (finished) {\n                return;\n            }\n            headers += chunk.toString(\"binary\");\n            if (match = headers.match(/\\r\\n\\r\\n/)) {\n                socket.removeListener(\"data\", onSocketData);\n                remainder = headers.substr(match.index + match[0].length);\n                headers = headers.substr(0, match.index);\n                if (remainder) {\n                    socket.unshift(Buffer.from(remainder, \"binary\"));\n                }\n                // proxy connection is now established\n                finished = true;\n                // check response code\n                match = headers.match(/^HTTP\\/\\d+\\.\\d+ (\\d+)/i);\n                if (!match || (match[1] || \"\").charAt(0) !== \"2\") {\n                    try {\n                        socket.destroy();\n                    } catch (E) {\n                    // ignore\n                    }\n                    return callback(new Error(\"Invalid response from proxy\" + (match && \": \" + match[1] || \"\")));\n                }\n                socket.removeListener(\"error\", tempSocketErr);\n                socket.removeListener(\"timeout\", timeoutErr);\n                socket.setTimeout(0);\n                return callback(null, socket);\n            }\n        };\n        socket.on(\"data\", onSocketData);\n    });\n    socket.setTimeout(httpProxyClient.timeout || 30 * 1000);\n    socket.on(\"timeout\", timeoutErr);\n    socket.once(\"error\", tempSocketErr);\n}\nmodule.exports = httpProxyClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageInfo = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst DataStream = __webpack_require__(/*! ./data-stream */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n// default timeout values in ms\nconst CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nconst SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nconst GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\nconst DNS_TIMEOUT = 30 * 1000; // how much to wait for resolveHostname\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **dnsTimeout** - Time to wait in ms for the DNS requests to be resolved (defaults to 30 seconds)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */ class SMTPConnection extends EventEmitter {\n    constructor(options){\n        super(options);\n        this.id = crypto.randomBytes(8).toString(\"base64\").replace(/\\W/g, \"\");\n        this.stage = \"init\";\n        this.options = options || {};\n        this.secureConnection = !!this.options.secure;\n        this.alreadySecured = !!this.options.secured;\n        this.port = Number(this.options.port) || (this.secureConnection ? 465 : 587);\n        this.host = this.options.host || \"localhost\";\n        this.servername = this.options.servername ? this.options.servername : !net.isIP(this.host) ? this.host : false;\n        this.allowInternalNetworkInterfaces = this.options.allowInternalNetworkInterfaces || false;\n        if (typeof this.options.secure === \"undefined\" && this.port === 465) {\n            // if secure option is not set but port is 465, then default to secure\n            this.secureConnection = true;\n        }\n        this.name = this.options.name || this._getHostname();\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-connection\",\n            sid: this.id\n        });\n        this.customAuth = new Map();\n        Object.keys(this.options.customAuth || {}).forEach((key)=>{\n            let mapKey = (key || \"\").toString().trim().toUpperCase();\n            if (!mapKey) {\n                return;\n            }\n            this.customAuth.set(mapKey, this.options.customAuth[key]);\n        });\n        /**\n         * Expose version nr, just for the reference\n         * @type {String}\n         */ this.version = packageInfo.version;\n        /**\n         * If true, then the user is authenticated\n         * @type {Boolean}\n         */ this.authenticated = false;\n        /**\n         * If set to true, this instance is no longer active\n         * @private\n         */ this.destroyed = false;\n        /**\n         * Defines if the current connection is secure or not. If not,\n         * STARTTLS can be used if available\n         * @private\n         */ this.secure = !!this.secureConnection;\n        /**\n         * Store incomplete messages coming from the server\n         * @private\n         */ this._remainder = \"\";\n        /**\n         * Unprocessed responses from the server\n         * @type {Array}\n         */ this._responseQueue = [];\n        this.lastServerResponse = false;\n        /**\n         * The socket connecting to the server\n         * @publick\n         */ this._socket = false;\n        /**\n         * Lists supported auth mechanisms\n         * @private\n         */ this._supportedAuth = [];\n        /**\n         * Set to true, if EHLO response includes \"AUTH\".\n         * If false then authentication is not tried\n         */ this.allowsAuth = false;\n        /**\n         * Includes current envelope (from, to)\n         * @private\n         */ this._envelope = false;\n        /**\n         * Lists supported extensions\n         * @private\n         */ this._supportedExtensions = [];\n        /**\n         * Defines the maximum allowed size for a single message\n         * @private\n         */ this._maxAllowedSize = 0;\n        /**\n         * Function queue to run if a data chunk comes from the server\n         * @private\n         */ this._responseActions = [];\n        this._recipientQueue = [];\n        /**\n         * Timeout variable for waiting the greeting\n         * @private\n         */ this._greetingTimeout = false;\n        /**\n         * Timeout variable for waiting the connection to start\n         * @private\n         */ this._connectionTimeout = false;\n        /**\n         * If the socket is deemed already closed\n         * @private\n         */ this._destroyed = false;\n        /**\n         * If the socket is already being closed\n         * @private\n         */ this._closing = false;\n        /**\n         * Callbacks for socket's listeners\n         */ this._onSocketData = (chunk)=>this._onData(chunk);\n        this._onSocketError = (error)=>this._onError(error, \"ESOCKET\", false, \"CONN\");\n        this._onSocketClose = ()=>this._onClose();\n        this._onSocketEnd = ()=>this._onEnd();\n        this._onSocketTimeout = ()=>this._onTimeout();\n    }\n    /**\n     * Creates a connection to a SMTP server and sets up connection\n     * listener\n     */ connect(connectCallback) {\n        if (typeof connectCallback === \"function\") {\n            this.once(\"connect\", ()=>{\n                this.logger.debug({\n                    tnx: \"smtp\"\n                }, \"SMTP handshake finished\");\n                connectCallback();\n            });\n            const isDestroyedMessage = this._isDestroyedMessage(\"connect\");\n            if (isDestroyedMessage) {\n                return connectCallback(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"CONN\"));\n            }\n        }\n        let opts = {\n            port: this.port,\n            host: this.host,\n            allowInternalNetworkInterfaces: this.allowInternalNetworkInterfaces,\n            timeout: this.options.dnsTimeout || DNS_TIMEOUT\n        };\n        if (this.options.localAddress) {\n            opts.localAddress = this.options.localAddress;\n        }\n        let setupConnectionHandlers = ()=>{\n            this._connectionTimeout = setTimeout(()=>{\n                this._onError(\"Connection timeout\", \"ETIMEDOUT\", false, \"CONN\");\n            }, this.options.connectionTimeout || CONNECTION_TIMEOUT);\n            this._socket.on(\"error\", this._onSocketError);\n        };\n        if (this.options.connection) {\n            // connection is already opened\n            this._socket = this.options.connection;\n            if (this.secureConnection && !this.alreadySecured) {\n                setImmediate(()=>this._upgradeConnection((err)=>{\n                        if (err) {\n                            this._onError(new Error(\"Error initiating TLS - \" + (err.message || err)), \"ETLS\", false, \"CONN\");\n                            return;\n                        }\n                        this._onConnect();\n                    }));\n            } else {\n                setImmediate(()=>this._onConnect());\n            }\n            return;\n        } else if (this.options.socket) {\n            // socket object is set up but not yet connected\n            this._socket = this.options.socket;\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket.connect(this.port, this.host, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        } else if (this.secureConnection) {\n            // connect using tls\n            if (this.options.tls) {\n                Object.keys(this.options.tls).forEach((key)=>{\n                    opts[key] = this.options.tls[key];\n                });\n            }\n            // ensure servername for SNI\n            if (this.servername && !opts.servername) {\n                opts.servername = this.servername;\n            }\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = tls.connect(opts, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        } else {\n            // connect using plaintext\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = net.connect(opts, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        }\n    }\n    /**\n     * Sends QUIT\n     */ quit() {\n        this._sendCommand(\"QUIT\");\n        this._responseActions.push(this.close);\n    }\n    /**\n     * Closes the connection to the server\n     */ close() {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        this._responseActions = [];\n        // allow to run this function only once\n        if (this._closing) {\n            return;\n        }\n        this._closing = true;\n        let closeMethod = \"end\";\n        if (this.stage === \"init\") {\n            // Close the socket immediately when connection timed out\n            closeMethod = \"destroy\";\n        }\n        this.logger.debug({\n            tnx: \"smtp\"\n        }, 'Closing connection to the server using \"%s\"', closeMethod);\n        let socket = this._socket && this._socket.socket || this._socket;\n        if (socket && !socket.destroyed) {\n            try {\n                this._socket[closeMethod]();\n            } catch (E) {\n            // just ignore\n            }\n        }\n        this._destroy();\n    }\n    /**\n     * Authenticate user\n     */ login(authData, callback) {\n        const isDestroyedMessage = this._isDestroyedMessage(\"login\");\n        if (isDestroyedMessage) {\n            return callback(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"API\"));\n        }\n        this._auth = authData || {};\n        // Select SASL authentication method\n        this._authMethod = (this._auth.method || \"\").toString().trim().toUpperCase() || false;\n        if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n            this._authMethod = \"XOAUTH2\";\n        } else if (!this._authMethod || this._authMethod === \"XOAUTH2\" && !this._auth.oauth2) {\n            // use first supported\n            this._authMethod = (this._supportedAuth[0] || \"PLAIN\").toUpperCase().trim();\n        }\n        if (this._authMethod !== \"XOAUTH2\" && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n            if (this._auth.user && this._auth.pass || this.customAuth.has(this._authMethod)) {\n                this._auth.credentials = {\n                    user: this._auth.user,\n                    pass: this._auth.pass,\n                    options: this._auth.options\n                };\n            } else {\n                return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', \"EAUTH\", false, \"API\"));\n            }\n        }\n        if (this.customAuth.has(this._authMethod)) {\n            let handler = this.customAuth.get(this._authMethod);\n            let lastResponse;\n            let returned = false;\n            let resolve = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                this.logger.info({\n                    tnx: \"smtp\",\n                    username: this._auth.user,\n                    action: \"authenticated\",\n                    method: this._authMethod\n                }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n                this.authenticated = true;\n                callback(null, true);\n            };\n            let reject = (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                callback(this._formatError(err, \"EAUTH\", lastResponse, \"AUTH \" + this._authMethod));\n            };\n            let handlerResponse = handler({\n                auth: this._auth,\n                method: this._authMethod,\n                extensions: [].concat(this._supportedExtensions),\n                authMethods: [].concat(this._supportedAuth),\n                maxAllowedSize: this._maxAllowedSize || false,\n                sendCommand: (cmd, done)=>{\n                    let promise;\n                    if (!done) {\n                        promise = new Promise((resolve, reject)=>{\n                            done = shared.callbackPromise(resolve, reject);\n                        });\n                    }\n                    this._responseActions.push((str)=>{\n                        lastResponse = str;\n                        let codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n                        let data = {\n                            command: cmd,\n                            response: str\n                        };\n                        if (codes) {\n                            data.status = Number(codes[1]) || 0;\n                            if (codes[2]) {\n                                data.code = codes[2];\n                            }\n                            data.text = str.substr(codes[0].length);\n                        } else {\n                            data.text = str;\n                            data.status = 0; // just in case we need to perform numeric comparisons\n                        }\n                        done(null, data);\n                    });\n                    setImmediate(()=>this._sendCommand(cmd));\n                    return promise;\n                },\n                resolve,\n                reject\n            });\n            if (handlerResponse && typeof handlerResponse.catch === \"function\") {\n                // a promise was returned\n                handlerResponse.then(resolve).catch(reject);\n            }\n            return;\n        }\n        switch(this._authMethod){\n            case \"XOAUTH2\":\n                this._handleXOauth2Token(false, callback);\n                return;\n            case \"LOGIN\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTH_LOGIN_USER(str, callback);\n                });\n                this._sendCommand(\"AUTH LOGIN\");\n                return;\n            case \"PLAIN\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTHComplete(str, callback);\n                });\n                this._sendCommand(\"AUTH PLAIN \" + Buffer.from(//this._auth.user+'\\u0000'+\n                \"\\x00\" + // skip authorization identity as it causes problems with some servers\n                this._auth.credentials.user + \"\\x00\" + this._auth.credentials.pass, \"utf-8\").toString(\"base64\"), // log entry without passwords\n                \"AUTH PLAIN \" + Buffer.from(//this._auth.user+'\\u0000'+\n                \"\\x00\" + // skip authorization identity as it causes problems with some servers\n                this._auth.credentials.user + \"\\x00\" + \"/* secret */\", \"utf-8\").toString(\"base64\"));\n                return;\n            case \"CRAM-MD5\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTH_CRAM_MD5(str, callback);\n                });\n                this._sendCommand(\"AUTH CRAM-MD5\");\n                return;\n        }\n        return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', \"EAUTH\", false, \"API\"));\n    }\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */ send(envelope, message, done) {\n        if (!message) {\n            return done(this._formatError(\"Empty message\", \"EMESSAGE\", false, \"API\"));\n        }\n        const isDestroyedMessage = this._isDestroyedMessage(\"send message\");\n        if (isDestroyedMessage) {\n            return done(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"API\"));\n        }\n        // reject larger messages than allowed\n        if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n            return setImmediate(()=>{\n                done(this._formatError(\"Message size larger than allowed \" + this._maxAllowedSize, \"EMESSAGE\", false, \"MAIL FROM\"));\n            });\n        }\n        // ensure that callback is only called once\n        let returned = false;\n        let callback = function() {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            done(...arguments);\n        };\n        if (typeof message.on === \"function\") {\n            message.on(\"error\", (err)=>callback(this._formatError(err, \"ESTREAM\", false, \"API\")));\n        }\n        let startTime = Date.now();\n        this._setEnvelope(envelope, (err, info)=>{\n            if (err) {\n                return callback(err);\n            }\n            let envelopeTime = Date.now();\n            let stream = this._createSendStream((err, str)=>{\n                if (err) {\n                    return callback(err);\n                }\n                info.envelopeTime = envelopeTime - startTime;\n                info.messageTime = Date.now() - envelopeTime;\n                info.messageSize = stream.outByteCount;\n                info.response = str;\n                return callback(null, info);\n            });\n            if (typeof message.pipe === \"function\") {\n                message.pipe(stream);\n            } else {\n                stream.write(message);\n                stream.end();\n            }\n        });\n    }\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */ reset(callback) {\n        this._sendCommand(\"RSET\");\n        this._responseActions.push((str)=>{\n            if (str.charAt(0) !== \"2\") {\n                return callback(this._formatError(\"Could not reset session state. response=\" + str, \"EPROTOCOL\", str, \"RSET\"));\n            }\n            this._envelope = false;\n            return callback(null, true);\n        });\n    }\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */ _onConnect() {\n        clearTimeout(this._connectionTimeout);\n        this.logger.info({\n            tnx: \"network\",\n            localAddress: this._socket.localAddress,\n            localPort: this._socket.localPort,\n            remoteAddress: this._socket.remoteAddress,\n            remotePort: this._socket.remotePort\n        }, \"%s established to %s:%s\", this.secure ? \"Secure connection\" : \"Connection\", this._socket.remoteAddress, this._socket.remotePort);\n        if (this._destroyed) {\n            // Connection was established after we already had canceled it\n            this.close();\n            return;\n        }\n        this.stage = \"connected\";\n        // clear existing listeners for the socket\n        this._socket.removeListener(\"data\", this._onSocketData);\n        this._socket.removeListener(\"timeout\", this._onSocketTimeout);\n        this._socket.removeListener(\"close\", this._onSocketClose);\n        this._socket.removeListener(\"end\", this._onSocketEnd);\n        this._socket.on(\"data\", this._onSocketData);\n        this._socket.once(\"close\", this._onSocketClose);\n        this._socket.once(\"end\", this._onSocketEnd);\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n        this._socket.on(\"timeout\", this._onSocketTimeout);\n        this._greetingTimeout = setTimeout(()=>{\n            // if still waiting for greeting, give up\n            if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n                this._onError(\"Greeting never received\", \"ETIMEDOUT\", false, \"CONN\");\n            }\n        }, this.options.greetingTimeout || GREETING_TIMEOUT);\n        this._responseActions.push(this._actionGreeting);\n        // we have a 'data' listener set up so resume socket if it was paused\n        this._socket.resume();\n    }\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */ _onData(chunk) {\n        if (this._destroyed || !chunk || !chunk.length) {\n            return;\n        }\n        let data = (chunk || \"\").toString(\"binary\");\n        let lines = (this._remainder + data).split(/\\r?\\n/);\n        let lastline;\n        this._remainder = lines.pop();\n        for(let i = 0, len = lines.length; i < len; i++){\n            if (this._responseQueue.length) {\n                lastline = this._responseQueue[this._responseQueue.length - 1];\n                if (/^\\d+-/.test(lastline.split(\"\\n\").pop())) {\n                    this._responseQueue[this._responseQueue.length - 1] += \"\\n\" + lines[i];\n                    continue;\n                }\n            }\n            this._responseQueue.push(lines[i]);\n        }\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+-/.test(lastline.split(\"\\n\").pop())) {\n                return;\n            }\n        }\n        this._processResponse();\n    }\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */ _onError(err, type, data, command) {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        if (this._destroyed) {\n            // just ignore, already closed\n            // this might happen when a socket is canceled because of reached timeout\n            // but the socket timeout error itself receives only after\n            return;\n        }\n        err = this._formatError(err, type, data, command);\n        this.logger.error(data, err.message);\n        this.emit(\"error\", err);\n        this.close();\n    }\n    _formatError(message, type, response, command) {\n        let err;\n        if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n            err = message;\n        } else {\n            err = new Error(message);\n        }\n        if (type && type !== \"Error\") {\n            err.code = type;\n        }\n        if (response) {\n            err.response = response;\n            err.message += \": \" + response;\n        }\n        let responseCode = typeof response === \"string\" && Number((response.match(/^\\d+/) || [])[0]) || false;\n        if (responseCode) {\n            err.responseCode = responseCode;\n        }\n        if (command) {\n            err.command = command;\n        }\n        return err;\n    }\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */ _onClose() {\n        let serverResponse = false;\n        if (this._remainder && this._remainder.trim()) {\n            if (this.options.debug || this.options.transactionLog) {\n                this.logger.debug({\n                    tnx: \"server\"\n                }, this._remainder.replace(/\\r?\\n$/, \"\"));\n            }\n            this.lastServerResponse = serverResponse = this._remainder.trim();\n        }\n        this.logger.info({\n            tnx: \"network\"\n        }, \"Connection closed\");\n        if (this.upgrading && !this._destroyed) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ETLS\", serverResponse, \"CONN\");\n        } else if (![\n            this._actionGreeting,\n            this.close\n        ].includes(this._responseActions[0]) && !this._destroyed) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ECONNECTION\", serverResponse, \"CONN\");\n        } else if (/^[45]\\d{2}\\b/.test(serverResponse)) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ECONNECTION\", serverResponse, \"CONN\");\n        }\n        this._destroy();\n    }\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */ _onEnd() {\n        if (this._socket && !this._socket.destroyed) {\n            this._socket.destroy();\n        }\n    }\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */ _onTimeout() {\n        return this._onError(new Error(\"Timeout\"), \"ETIMEDOUT\", false, \"CONN\");\n    }\n    /**\n     * Destroys the client, emits 'end'\n     */ _destroy() {\n        if (this._destroyed) {\n            return;\n        }\n        this._destroyed = true;\n        this.emit(\"end\");\n    }\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */ _upgradeConnection(callback) {\n        // do not remove all listeners or it breaks node v0.10 as there's\n        // apparently a 'finish' event set that would be cleared as well\n        // we can safely keep 'error', 'end', 'close' etc. events\n        this._socket.removeListener(\"data\", this._onSocketData); // incoming data is going to be gibberish from this point onwards\n        this._socket.removeListener(\"timeout\", this._onSocketTimeout); // timeout will be re-set for the new socket object\n        let socketPlain = this._socket;\n        let opts = {\n            socket: this._socket,\n            host: this.host\n        };\n        Object.keys(this.options.tls || {}).forEach((key)=>{\n            opts[key] = this.options.tls[key];\n        });\n        // ensure servername for SNI\n        if (this.servername && !opts.servername) {\n            opts.servername = this.servername;\n        }\n        this.upgrading = true;\n        // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch\n        try {\n            this._socket = tls.connect(opts, ()=>{\n                this.secure = true;\n                this.upgrading = false;\n                this._socket.on(\"data\", this._onSocketData);\n                socketPlain.removeListener(\"close\", this._onSocketClose);\n                socketPlain.removeListener(\"end\", this._onSocketEnd);\n                return callback(null, true);\n            });\n        } catch (err) {\n            return callback(err);\n        }\n        this._socket.on(\"error\", this._onSocketError);\n        this._socket.once(\"close\", this._onSocketClose);\n        this._socket.once(\"end\", this._onSocketEnd);\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n        this._socket.on(\"timeout\", this._onSocketTimeout);\n        // resume in case the socket was paused\n        socketPlain.resume();\n    }\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */ _processResponse() {\n        if (!this._responseQueue.length) {\n            return false;\n        }\n        let str = this.lastServerResponse = (this._responseQueue.shift() || \"\").toString();\n        if (/^\\d+-/.test(str.split(\"\\n\").pop())) {\n            // keep waiting for the final part of multiline response\n            return;\n        }\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug({\n                tnx: \"server\"\n            }, str.replace(/\\r?\\n$/, \"\"));\n        }\n        if (!str.trim()) {\n            // skip unexpected empty lines\n            setImmediate(()=>this._processResponse());\n        }\n        let action = this._responseActions.shift();\n        if (typeof action === \"function\") {\n            action.call(this, str);\n            setImmediate(()=>this._processResponse());\n        } else {\n            return this._onError(new Error(\"Unexpected Response\"), \"EPROTOCOL\", str, \"CONN\");\n        }\n    }\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     * @param {String} logStr Optional string to be used for logging instead of the actual string\n     */ _sendCommand(str, logStr) {\n        if (this._destroyed) {\n            // Connection already closed, can't send any more data\n            return;\n        }\n        if (this._socket.destroyed) {\n            return this.close();\n        }\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug({\n                tnx: \"client\"\n            }, (logStr || str || \"\").toString().replace(/\\r?\\n$/, \"\"));\n        }\n        this._socket.write(Buffer.from(str + \"\\r\\n\", \"utf-8\"));\n    }\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */ _setEnvelope(envelope, callback) {\n        let args = [];\n        let useSmtpUtf8 = false;\n        this._envelope = envelope || {};\n        this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || \"\").toString().trim();\n        this._envelope.to = [].concat(this._envelope.to || []).map((to)=>(to && to.address || to || \"\").toString().trim());\n        if (!this._envelope.to.length) {\n            return callback(this._formatError(\"No recipients defined\", \"EENVELOPE\", false, \"API\"));\n        }\n        if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n            return callback(this._formatError(\"Invalid sender \" + JSON.stringify(this._envelope.from), \"EENVELOPE\", false, \"API\"));\n        }\n        // check if the sender address uses only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n            useSmtpUtf8 = true;\n        }\n        for(let i = 0, len = this._envelope.to.length; i < len; i++){\n            if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n                return callback(this._formatError(\"Invalid recipient \" + JSON.stringify(this._envelope.to[i]), \"EENVELOPE\", false, \"API\"));\n            }\n            // check if the recipients addresses use only ASCII characters,\n            // otherwise require usage of SMTPUTF8 extension\n            if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n                useSmtpUtf8 = true;\n            }\n        }\n        // clone the recipients array for latter manipulation\n        this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n        this._envelope.rejected = [];\n        this._envelope.rejectedErrors = [];\n        this._envelope.accepted = [];\n        if (this._envelope.dsn) {\n            try {\n                this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n            } catch (err) {\n                return callback(this._formatError(\"Invalid DSN \" + err.message, \"EENVELOPE\", false, \"API\"));\n            }\n        }\n        this._responseActions.push((str)=>{\n            this._actionMAIL(str, callback);\n        });\n        // If the server supports SMTPUTF8 and the envelope includes an internationalized\n        // email address then append SMTPUTF8 keyword to the MAIL FROM command\n        if (useSmtpUtf8 && this._supportedExtensions.includes(\"SMTPUTF8\")) {\n            args.push(\"SMTPUTF8\");\n            this._usingSmtpUtf8 = true;\n        }\n        // If the server supports 8BITMIME and the message might contain non-ascii bytes\n        // then append the 8BITMIME keyword to the MAIL FROM command\n        if (this._envelope.use8BitMime && this._supportedExtensions.includes(\"8BITMIME\")) {\n            args.push(\"BODY=8BITMIME\");\n            this._using8BitMime = true;\n        }\n        if (this._envelope.size && this._supportedExtensions.includes(\"SIZE\")) {\n            args.push(\"SIZE=\" + this._envelope.size);\n        }\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the MAIL FROM command\n        if (this._envelope.dsn && this._supportedExtensions.includes(\"DSN\")) {\n            if (this._envelope.dsn.ret) {\n                args.push(\"RET=\" + shared.encodeXText(this._envelope.dsn.ret));\n            }\n            if (this._envelope.dsn.envid) {\n                args.push(\"ENVID=\" + shared.encodeXText(this._envelope.dsn.envid));\n            }\n        }\n        this._sendCommand(\"MAIL FROM:<\" + this._envelope.from + \">\" + (args.length ? \" \" + args.join(\" \") : \"\"));\n    }\n    _setDsnEnvelope(params) {\n        let ret = (params.ret || params.return || \"\").toString().toUpperCase() || null;\n        if (ret) {\n            switch(ret){\n                case \"HDRS\":\n                case \"HEADERS\":\n                    ret = \"HDRS\";\n                    break;\n                case \"FULL\":\n                case \"BODY\":\n                    ret = \"FULL\";\n                    break;\n            }\n        }\n        if (ret && ![\n            \"FULL\",\n            \"HDRS\"\n        ].includes(ret)) {\n            throw new Error(\"ret: \" + JSON.stringify(ret));\n        }\n        let envid = (params.envid || params.id || \"\").toString() || null;\n        let notify = params.notify || null;\n        if (notify) {\n            if (typeof notify === \"string\") {\n                notify = notify.split(\",\");\n            }\n            notify = notify.map((n)=>n.trim().toUpperCase());\n            let validNotify = [\n                \"NEVER\",\n                \"SUCCESS\",\n                \"FAILURE\",\n                \"DELAY\"\n            ];\n            let invaliNotify = notify.filter((n)=>!validNotify.includes(n));\n            if (invaliNotify.length || notify.length > 1 && notify.includes(\"NEVER\")) {\n                throw new Error(\"notify: \" + JSON.stringify(notify.join(\",\")));\n            }\n            notify = notify.join(\",\");\n        }\n        let orcpt = (params.recipient || params.orcpt || \"\").toString() || null;\n        if (orcpt && orcpt.indexOf(\";\") < 0) {\n            orcpt = \"rfc822;\" + orcpt;\n        }\n        return {\n            ret,\n            envid,\n            notify,\n            orcpt\n        };\n    }\n    _getDsnRcptToArgs() {\n        let args = [];\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the RCPT TO command\n        if (this._envelope.dsn && this._supportedExtensions.includes(\"DSN\")) {\n            if (this._envelope.dsn.notify) {\n                args.push(\"NOTIFY=\" + shared.encodeXText(this._envelope.dsn.notify));\n            }\n            if (this._envelope.dsn.orcpt) {\n                args.push(\"ORCPT=\" + shared.encodeXText(this._envelope.dsn.orcpt));\n            }\n        }\n        return args.length ? \" \" + args.join(\" \") : \"\";\n    }\n    _createSendStream(callback) {\n        let dataStream = new DataStream();\n        let logStream;\n        if (this.options.lmtp) {\n            this._envelope.accepted.forEach((recipient, i)=>{\n                let final = i === this._envelope.accepted.length - 1;\n                this._responseActions.push((str)=>{\n                    this._actionLMTPStream(recipient, final, str, callback);\n                });\n            });\n        } else {\n            this._responseActions.push((str)=>{\n                this._actionSMTPStream(str, callback);\n            });\n        }\n        dataStream.pipe(this._socket, {\n            end: false\n        });\n        if (this.options.debug) {\n            logStream = new PassThrough();\n            logStream.on(\"readable\", ()=>{\n                let chunk;\n                while(chunk = logStream.read()){\n                    this.logger.debug({\n                        tnx: \"message\"\n                    }, chunk.toString(\"binary\").replace(/\\r?\\n$/, \"\"));\n                }\n            });\n            dataStream.pipe(logStream);\n        }\n        dataStream.once(\"end\", ()=>{\n            this.logger.info({\n                tnx: \"message\",\n                inByteCount: dataStream.inByteCount,\n                outByteCount: dataStream.outByteCount\n            }, \"<%s bytes encoded mime message (source size %s bytes)>\", dataStream.outByteCount, dataStream.inByteCount);\n        });\n        return dataStream;\n    }\n    /** ACTIONS **/ /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */ _actionGreeting(str) {\n        clearTimeout(this._greetingTimeout);\n        if (str.substr(0, 3) !== \"220\") {\n            this._onError(new Error(\"Invalid greeting. response=\" + str), \"EPROTOCOL\", str, \"CONN\");\n            return;\n        }\n        if (this.options.lmtp) {\n            this._responseActions.push(this._actionLHLO);\n            this._sendCommand(\"LHLO \" + this.name);\n        } else {\n            this._responseActions.push(this._actionEHLO);\n            this._sendCommand(\"EHLO \" + this.name);\n        }\n    }\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */ _actionLHLO(str) {\n        if (str.charAt(0) !== \"2\") {\n            this._onError(new Error(\"Invalid LHLO. response=\" + str), \"EPROTOCOL\", str, \"LHLO\");\n            return;\n        }\n        this._actionEHLO(str);\n    }\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */ _actionEHLO(str) {\n        let match;\n        if (str.substr(0, 3) === \"421\") {\n            this._onError(new Error(\"Server terminates connection. response=\" + str), \"ECONNECTION\", str, \"EHLO\");\n            return;\n        }\n        if (str.charAt(0) !== \"2\") {\n            if (this.options.requireTLS) {\n                this._onError(new Error(\"EHLO failed but HELO does not support required STARTTLS. response=\" + str), \"ECONNECTION\", str, \"EHLO\");\n                return;\n            }\n            // Try HELO instead\n            this._responseActions.push(this._actionHELO);\n            this._sendCommand(\"HELO \" + this.name);\n            return;\n        }\n        this._ehloLines = str.split(/\\r?\\n/).map((line)=>line.replace(/^\\d+[ -]/, \"\").trim()).filter((line)=>line).slice(1);\n        // Detect if the server supports STARTTLS\n        if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n            this._sendCommand(\"STARTTLS\");\n            this._responseActions.push(this._actionSTARTTLS);\n            return;\n        }\n        // Detect if the server supports SMTPUTF8\n        if (/[ -]SMTPUTF8\\b/im.test(str)) {\n            this._supportedExtensions.push(\"SMTPUTF8\");\n        }\n        // Detect if the server supports DSN\n        if (/[ -]DSN\\b/im.test(str)) {\n            this._supportedExtensions.push(\"DSN\");\n        }\n        // Detect if the server supports 8BITMIME\n        if (/[ -]8BITMIME\\b/im.test(str)) {\n            this._supportedExtensions.push(\"8BITMIME\");\n        }\n        // Detect if the server supports PIPELINING\n        if (/[ -]PIPELINING\\b/im.test(str)) {\n            this._supportedExtensions.push(\"PIPELINING\");\n        }\n        // Detect if the server supports AUTH\n        if (/[ -]AUTH\\b/i.test(str)) {\n            this.allowsAuth = true;\n        }\n        // Detect if the server supports PLAIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n            this._supportedAuth.push(\"PLAIN\");\n        }\n        // Detect if the server supports LOGIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n            this._supportedAuth.push(\"LOGIN\");\n        }\n        // Detect if the server supports CRAM-MD5 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n            this._supportedAuth.push(\"CRAM-MD5\");\n        }\n        // Detect if the server supports XOAUTH2 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n            this._supportedAuth.push(\"XOAUTH2\");\n        }\n        // Detect if the server supports SIZE extensions (and the max allowed size)\n        if (match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im)) {\n            this._supportedExtensions.push(\"SIZE\");\n            this._maxAllowedSize = Number(match[1]) || 0;\n        }\n        this.emit(\"connect\");\n    }\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */ _actionHELO(str) {\n        if (str.charAt(0) !== \"2\") {\n            this._onError(new Error(\"Invalid HELO. response=\" + str), \"EPROTOCOL\", str, \"HELO\");\n            return;\n        }\n        // assume that authentication is enabled (most probably is not though)\n        this.allowsAuth = true;\n        this.emit(\"connect\");\n    }\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */ _actionSTARTTLS(str) {\n        if (str.charAt(0) !== \"2\") {\n            if (this.options.opportunisticTLS) {\n                this.logger.info({\n                    tnx: \"smtp\"\n                }, \"Failed STARTTLS upgrade, continuing unencrypted\");\n                return this.emit(\"connect\");\n            }\n            this._onError(new Error(\"Error upgrading connection with STARTTLS\"), \"ETLS\", str, \"STARTTLS\");\n            return;\n        }\n        this._upgradeConnection((err, secured)=>{\n            if (err) {\n                this._onError(new Error(\"Error initiating TLS - \" + (err.message || err)), \"ETLS\", false, \"STARTTLS\");\n                return;\n            }\n            this.logger.info({\n                tnx: \"smtp\"\n            }, \"Connection upgraded with STARTTLS\");\n            if (secured) {\n                // restart session\n                if (this.options.lmtp) {\n                    this._responseActions.push(this._actionLHLO);\n                    this._sendCommand(\"LHLO \" + this.name);\n                } else {\n                    this._responseActions.push(this._actionEHLO);\n                    this._sendCommand(\"EHLO \" + this.name);\n                }\n            } else {\n                this.emit(\"connect\");\n            }\n        });\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_LOGIN_USER(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 VXNlcm5hbWU6'\n            callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', \"EAUTH\", str, \"AUTH LOGIN\"));\n            return;\n        }\n        this._responseActions.push((str)=>{\n            this._actionAUTH_LOGIN_PASS(str, callback);\n        });\n        this._sendCommand(Buffer.from(this._auth.credentials.user + \"\", \"utf-8\").toString(\"base64\"));\n    }\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_CRAM_MD5(str, callback) {\n        let challengeMatch = str.match(/^334\\s+(.+)$/);\n        let challengeString = \"\";\n        if (!challengeMatch) {\n            return callback(this._formatError(\"Invalid login sequence while waiting for server challenge string\", \"EAUTH\", str, \"AUTH CRAM-MD5\"));\n        } else {\n            challengeString = challengeMatch[1];\n        }\n        // Decode from base64\n        let base64decoded = Buffer.from(challengeString, \"base64\").toString(\"ascii\"), hmacMD5 = crypto.createHmac(\"md5\", this._auth.credentials.pass);\n        hmacMD5.update(base64decoded);\n        let prepended = this._auth.credentials.user + \" \" + hmacMD5.digest(\"hex\");\n        this._responseActions.push((str)=>{\n            this._actionAUTH_CRAM_MD5_PASS(str, callback);\n        });\n        this._sendCommand(Buffer.from(prepended).toString(\"base64\"), // hidden hash for logs\n        Buffer.from(this._auth.credentials.user + \" /* secret */\").toString(\"base64\"));\n    }\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_CRAM_MD5_PASS(str, callback) {\n        if (!str.match(/^235\\s+/)) {\n            return callback(this._formatError('Invalid login sequence while waiting for \"235\"', \"EAUTH\", str, \"AUTH CRAM-MD5\"));\n        }\n        this.logger.info({\n            tnx: \"smtp\",\n            username: this._auth.user,\n            action: \"authenticated\",\n            method: this._authMethod\n        }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n        this.authenticated = true;\n        callback(null, true);\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_LOGIN_PASS(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 UGFzc3dvcmQ6'\n            return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', \"EAUTH\", str, \"AUTH LOGIN\"));\n        }\n        this._responseActions.push((str)=>{\n            this._actionAUTHComplete(str, callback);\n        });\n        this._sendCommand(Buffer.from((this._auth.credentials.pass || \"\").toString(), \"utf-8\").toString(\"base64\"), // Hidden pass for logs\n        Buffer.from(\"/* secret */\", \"utf-8\").toString(\"base64\"));\n    }\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTHComplete(str, isRetry, callback) {\n        if (!callback && typeof isRetry === \"function\") {\n            callback = isRetry;\n            isRetry = false;\n        }\n        if (str.substr(0, 3) === \"334\") {\n            this._responseActions.push((str)=>{\n                if (isRetry || this._authMethod !== \"XOAUTH2\") {\n                    this._actionAUTHComplete(str, true, callback);\n                } else {\n                    // fetch a new OAuth2 access token\n                    setImmediate(()=>this._handleXOauth2Token(true, callback));\n                }\n            });\n            this._sendCommand(\"\");\n            return;\n        }\n        if (str.charAt(0) !== \"2\") {\n            this.logger.info({\n                tnx: \"smtp\",\n                username: this._auth.user,\n                action: \"authfail\",\n                method: this._authMethod\n            }, \"User %s failed to authenticate\", JSON.stringify(this._auth.user));\n            return callback(this._formatError(\"Invalid login\", \"EAUTH\", str, \"AUTH \" + this._authMethod));\n        }\n        this.logger.info({\n            tnx: \"smtp\",\n            username: this._auth.user,\n            action: \"authenticated\",\n            method: this._authMethod\n        }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n        this.authenticated = true;\n        callback(null, true);\n    }\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */ _actionMAIL(str, callback) {\n        let message, curRecipient;\n        if (Number(str.charAt(0)) !== 2) {\n            if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n                message = \"Internationalized mailbox name not allowed\";\n            } else {\n                message = \"Mail command failed\";\n            }\n            return callback(this._formatError(message, \"EENVELOPE\", str, \"MAIL FROM\"));\n        }\n        if (!this._envelope.rcptQueue.length) {\n            return callback(this._formatError(\"Can't send mail - no recipients defined\", \"EENVELOPE\", false, \"API\"));\n        } else {\n            this._recipientQueue = [];\n            if (this._supportedExtensions.includes(\"PIPELINING\")) {\n                while(this._envelope.rcptQueue.length){\n                    curRecipient = this._envelope.rcptQueue.shift();\n                    this._recipientQueue.push(curRecipient);\n                    this._responseActions.push((str)=>{\n                        this._actionRCPT(str, callback);\n                    });\n                    this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n                }\n            } else {\n                curRecipient = this._envelope.rcptQueue.shift();\n                this._recipientQueue.push(curRecipient);\n                this._responseActions.push((str)=>{\n                    this._actionRCPT(str, callback);\n                });\n                this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n            }\n        }\n    }\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */ _actionRCPT(str, callback) {\n        let message, err, curRecipient = this._recipientQueue.shift();\n        if (Number(str.charAt(0)) !== 2) {\n            // this is a soft error\n            if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n                message = \"Internationalized mailbox name not allowed\";\n            } else {\n                message = \"Recipient command failed\";\n            }\n            this._envelope.rejected.push(curRecipient);\n            // store error for the failed recipient\n            err = this._formatError(message, \"EENVELOPE\", str, \"RCPT TO\");\n            err.recipient = curRecipient;\n            this._envelope.rejectedErrors.push(err);\n        } else {\n            this._envelope.accepted.push(curRecipient);\n        }\n        if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n            if (this._envelope.rejected.length < this._envelope.to.length) {\n                this._responseActions.push((str)=>{\n                    this._actionDATA(str, callback);\n                });\n                this._sendCommand(\"DATA\");\n            } else {\n                err = this._formatError(\"Can't send mail - all recipients were rejected\", \"EENVELOPE\", str, \"RCPT TO\");\n                err.rejected = this._envelope.rejected;\n                err.rejectedErrors = this._envelope.rejectedErrors;\n                return callback(err);\n            }\n        } else if (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push((str)=>{\n                this._actionRCPT(str, callback);\n            });\n            this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n        }\n    }\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */ _actionDATA(str, callback) {\n        // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n        // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n        if (!/^[23]/.test(str)) {\n            return callback(this._formatError(\"Data command failed\", \"EENVELOPE\", str, \"DATA\"));\n        }\n        let response = {\n            accepted: this._envelope.accepted,\n            rejected: this._envelope.rejected\n        };\n        if (this._ehloLines && this._ehloLines.length) {\n            response.ehlo = this._ehloLines;\n        }\n        if (this._envelope.rejectedErrors.length) {\n            response.rejectedErrors = this._envelope.rejectedErrors;\n        }\n        callback(null, response);\n    }\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */ _actionSMTPStream(str, callback) {\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            return callback(this._formatError(\"Message failed\", \"EMESSAGE\", str, \"DATA\"));\n        } else {\n            // Message sent succesfully\n            return callback(null, str);\n        }\n    }\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */ _actionLMTPStream(recipient, final, str, callback) {\n        let err;\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            err = this._formatError(\"Message failed for recipient \" + recipient, \"EMESSAGE\", str, \"DATA\");\n            err.recipient = recipient;\n            this._envelope.rejected.push(recipient);\n            this._envelope.rejectedErrors.push(err);\n            for(let i = 0, len = this._envelope.accepted.length; i < len; i++){\n                if (this._envelope.accepted[i] === recipient) {\n                    this._envelope.accepted.splice(i, 1);\n                }\n            }\n        }\n        if (final) {\n            return callback(null, str);\n        }\n    }\n    _handleXOauth2Token(isRetry, callback) {\n        this._auth.oauth2.getToken(isRetry, (err, accessToken)=>{\n            if (err) {\n                this.logger.info({\n                    tnx: \"smtp\",\n                    username: this._auth.user,\n                    action: \"authfail\",\n                    method: this._authMethod\n                }, \"User %s failed to authenticate\", JSON.stringify(this._auth.user));\n                return callback(this._formatError(err, \"EAUTH\", false, \"AUTH XOAUTH2\"));\n            }\n            this._responseActions.push((str)=>{\n                this._actionAUTHComplete(str, isRetry, callback);\n            });\n            this._sendCommand(\"AUTH XOAUTH2 \" + this._auth.oauth2.buildXOAuth2Token(accessToken), //  Hidden for logs\n            \"AUTH XOAUTH2 \" + this._auth.oauth2.buildXOAuth2Token(\"/* secret */\"));\n        });\n    }\n    /**\n     *\n     * @param {string} command\n     * @private\n     */ _isDestroyedMessage(command) {\n        if (this._destroyed) {\n            return \"Cannot \" + command + \" - smtp connection is already destroyed.\";\n        }\n        if (this._socket) {\n            if (this._socket.destroyed) {\n                return \"Cannot \" + command + \" - smtp connection socket is already destroyed.\";\n            }\n            if (!this._socket.writable) {\n                return \"Cannot \" + command + \" - smtp connection socket is already half-closed.\";\n            }\n        }\n    }\n    _getHostname() {\n        // defaul hostname is machine hostname or [IP]\n        let defaultHostname;\n        try {\n            defaultHostname = os.hostname() || \"\";\n        } catch (err) {\n            // fails on windows 7\n            defaultHostname = \"localhost\";\n        }\n        // ignore if not FQDN\n        if (!defaultHostname || defaultHostname.indexOf(\".\") < 0) {\n            defaultHostname = \"[127.0.0.1]\";\n        }\n        // IP should be enclosed in []\n        if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n            defaultHostname = \"[\" + defaultHostname + \"]\";\n        }\n        return defaultHostname;\n    }\n}\nmodule.exports = SMTPConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js":
/*!********************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-pool/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst PoolResource = __webpack_require__(/*! ./pool-resource */ \"(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js\");\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst wellKnown = __webpack_require__(/*! ../well-known */ \"(rsc)/./node_modules/nodemailer/lib/well-known/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */ class SMTPPool extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        if (typeof options === \"string\") {\n            options = {\n                url: options\n            };\n        }\n        let urlData;\n        let service = options.service;\n        if (typeof options.getSocket === \"function\") {\n            this.getSocket = options.getSocket;\n        }\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n        this.options = shared.assign(false, options, urlData, service && wellKnown(service) // wellknown options\n        );\n        this.options.maxConnections = this.options.maxConnections || 5;\n        this.options.maxMessages = this.options.maxMessages || 100;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-pool\"\n        });\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n        this.name = \"SMTP (pool)\";\n        this.version = packageData.version + \"[client:\" + connection.version + \"]\";\n        this._rateLimit = {\n            counter: 0,\n            timeout: null,\n            waiting: [],\n            checkpoint: false,\n            delta: Number(this.options.rateDelta) || 1000,\n            limit: Number(this.options.rateLimit) || 0\n        };\n        this._closed = false;\n        this._queue = [];\n        this._connections = [];\n        this._connectionCounter = 0;\n        this.idling = true;\n        setImmediate(()=>{\n            if (this.idling) {\n                this.emit(\"idle\");\n            }\n        });\n    }\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */ getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(()=>callback(null, false));\n    }\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        if (this._closed) {\n            return false;\n        }\n        this._queue.push({\n            mail,\n            requeueAttempts: 0,\n            callback\n        });\n        if (this.idling && this._queue.length >= this.options.maxConnections) {\n            this.idling = false;\n        }\n        setImmediate(()=>this._processMessages());\n        return true;\n    }\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */ close() {\n        let connection;\n        let len = this._connections.length;\n        this._closed = true;\n        // clear rate limit timer if it exists\n        clearTimeout(this._rateLimit.timeout);\n        if (!len && !this._queue.length) {\n            return;\n        }\n        // remove all available connections\n        for(let i = len - 1; i >= 0; i--){\n            if (this._connections[i] && this._connections[i].available) {\n                connection = this._connections[i];\n                connection.close();\n                this.logger.info({\n                    tnx: \"connection\",\n                    cid: connection.id,\n                    action: \"removed\"\n                }, \"Connection #%s removed\", connection.id);\n            }\n        }\n        if (len && !this._connections.length) {\n            this.logger.debug({\n                tnx: \"connection\"\n            }, \"All connections removed\");\n        }\n        if (!this._queue.length) {\n            return;\n        }\n        // make sure that entire queue would be cleaned\n        let invokeCallbacks = ()=>{\n            if (!this._queue.length) {\n                this.logger.debug({\n                    tnx: \"connection\"\n                }, \"Pending queue entries cleared\");\n                return;\n            }\n            let entry = this._queue.shift();\n            if (entry && typeof entry.callback === \"function\") {\n                try {\n                    entry.callback(new Error(\"Connection pool was closed\"));\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n            }\n            setImmediate(invokeCallbacks);\n        };\n        setImmediate(invokeCallbacks);\n    }\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */ _processMessages() {\n        let connection;\n        let i, len;\n        // do nothing if already closed\n        if (this._closed) {\n            return;\n        }\n        // do nothing if queue is empty\n        if (!this._queue.length) {\n            if (!this.idling) {\n                // no pending jobs\n                this.idling = true;\n                this.emit(\"idle\");\n            }\n            return;\n        }\n        // find first available connection\n        for(i = 0, len = this._connections.length; i < len; i++){\n            if (this._connections[i].available) {\n                connection = this._connections[i];\n                break;\n            }\n        }\n        if (!connection && this._connections.length < this.options.maxConnections) {\n            connection = this._createConnection();\n        }\n        if (!connection) {\n            // no more free connection slots available\n            this.idling = false;\n            return;\n        }\n        // check if there is free space in the processing queue\n        if (!this.idling && this._queue.length < this.options.maxConnections) {\n            this.idling = true;\n            this.emit(\"idle\");\n        }\n        let entry = connection.queueEntry = this._queue.shift();\n        entry.messageId = (connection.queueEntry.mail.message.getHeader(\"message-id\") || \"\").replace(/[<>\\s]/g, \"\");\n        connection.available = false;\n        this.logger.debug({\n            tnx: \"pool\",\n            cid: connection.id,\n            messageId: entry.messageId,\n            action: \"assign\"\n        }, \"Assigned message <%s> to #%s (%s)\", entry.messageId, connection.id, connection.messages + 1);\n        if (this._rateLimit.limit) {\n            this._rateLimit.counter++;\n            if (!this._rateLimit.checkpoint) {\n                this._rateLimit.checkpoint = Date.now();\n            }\n        }\n        connection.send(entry.mail, (err, info)=>{\n            // only process callback if current handler is not changed\n            if (entry === connection.queueEntry) {\n                try {\n                    entry.callback(err, info);\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n                connection.queueEntry = false;\n            }\n        });\n    }\n    /**\n     * Creates a new pool resource\n     */ _createConnection() {\n        let connection = new PoolResource(this);\n        connection.id = ++this._connectionCounter;\n        this.logger.info({\n            tnx: \"pool\",\n            cid: connection.id,\n            action: \"conection\"\n        }, \"Created new pool resource #%s\", connection.id);\n        // resource comes available\n        connection.on(\"available\", ()=>{\n            this.logger.debug({\n                tnx: \"connection\",\n                cid: connection.id,\n                action: \"available\"\n            }, \"Connection #%s became available\", connection.id);\n            if (this._closed) {\n                // if already closed run close() that will remove this connections from connections list\n                this.close();\n            } else {\n                // check if there's anything else to send\n                this._processMessages();\n            }\n        });\n        // resource is terminated with an error\n        connection.once(\"error\", (err)=>{\n            if (err.code !== \"EMAXLIMIT\") {\n                this.logger.error({\n                    err,\n                    tnx: \"pool\",\n                    cid: connection.id\n                }, \"Pool Error for #%s: %s\", connection.id, err.message);\n            } else {\n                this.logger.debug({\n                    tnx: \"pool\",\n                    cid: connection.id,\n                    action: \"maxlimit\"\n                }, \"Max messages limit exchausted for #%s\", connection.id);\n            }\n            if (connection.queueEntry) {\n                try {\n                    connection.queueEntry.callback(err);\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n                connection.queueEntry = false;\n            }\n            // remove the erroneus connection from connections list\n            this._removeConnection(connection);\n            this._continueProcessing();\n        });\n        connection.once(\"close\", ()=>{\n            this.logger.info({\n                tnx: \"connection\",\n                cid: connection.id,\n                action: \"closed\"\n            }, \"Connection #%s was closed\", connection.id);\n            this._removeConnection(connection);\n            if (connection.queueEntry) {\n                // If the connection closed when sending, add the message to the queue again\n                // if max number of requeues is not reached yet\n                // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n                // in the next event loop\n                setTimeout(()=>{\n                    if (connection.queueEntry) {\n                        if (this._shouldRequeuOnConnectionClose(connection.queueEntry)) {\n                            this._requeueEntryOnConnectionClose(connection);\n                        } else {\n                            this._failDeliveryOnConnectionClose(connection);\n                        }\n                    }\n                    this._continueProcessing();\n                }, 50);\n            } else {\n                this._continueProcessing();\n            }\n        });\n        this._connections.push(connection);\n        return connection;\n    }\n    _shouldRequeuOnConnectionClose(queueEntry) {\n        if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {\n            return true;\n        }\n        return queueEntry.requeueAttempts < this.options.maxRequeues;\n    }\n    _failDeliveryOnConnectionClose(connection) {\n        if (connection.queueEntry && connection.queueEntry.callback) {\n            try {\n                connection.queueEntry.callback(new Error(\"Reached maximum number of retries after connection was closed\"));\n            } catch (E) {\n                this.logger.error({\n                    err: E,\n                    tnx: \"callback\",\n                    messageId: connection.queueEntry.messageId,\n                    cid: connection.id\n                }, \"Callback error for #%s: %s\", connection.id, E.message);\n            }\n            connection.queueEntry = false;\n        }\n    }\n    _requeueEntryOnConnectionClose(connection) {\n        connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;\n        this.logger.debug({\n            tnx: \"pool\",\n            cid: connection.id,\n            messageId: connection.queueEntry.messageId,\n            action: \"requeue\"\n        }, \"Re-queued message <%s> for #%s. Attempt: #%s\", connection.queueEntry.messageId, connection.id, connection.queueEntry.requeueAttempts);\n        this._queue.unshift(connection.queueEntry);\n        connection.queueEntry = false;\n    }\n    /**\n     * Continue to process message if the pool hasn't closed\n     */ _continueProcessing() {\n        if (this._closed) {\n            this.close();\n        } else {\n            setTimeout(()=>this._processMessages(), 100);\n        }\n    }\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */ _removeConnection(connection) {\n        let index = this._connections.indexOf(connection);\n        if (index !== -1) {\n            this._connections.splice(index, 1);\n        }\n    }\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */ _checkRateLimit(callback) {\n        if (!this._rateLimit.limit) {\n            return callback();\n        }\n        let now = Date.now();\n        if (this._rateLimit.counter < this._rateLimit.limit) {\n            return callback();\n        }\n        this._rateLimit.waiting.push(callback);\n        if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n            return this._clearRateLimit();\n        } else if (!this._rateLimit.timeout) {\n            this._rateLimit.timeout = setTimeout(()=>this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n            this._rateLimit.checkpoint = now;\n        }\n    }\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */ _clearRateLimit() {\n        clearTimeout(this._rateLimit.timeout);\n        this._rateLimit.timeout = null;\n        this._rateLimit.counter = 0;\n        this._rateLimit.checkpoint = false;\n        // resume all paused connections\n        while(this._rateLimit.waiting.length){\n            let cb = this._rateLimit.waiting.shift();\n            setImmediate(cb);\n        }\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */ isIdle() {\n        return this.idling;\n    }\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        let auth = new PoolResource(this).auth;\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            let returned = false;\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error(\"Connection closed\"));\n            });\n            let finalize = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        finalize();\n                    });\n                } else if (!auth && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error(\"Authentication info was not provided\");\n                    err.code = \"NoAuth\";\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n        return promise;\n    }\n}\n// expose to the world\nmodule.exports = SMTPPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js":
/*!****************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-pool/pool-resource.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst assign = (__webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\").assign);\nconst XOAuth2 = __webpack_require__(/*! ../xoauth2 */ \"(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */ class PoolResource extends EventEmitter {\n    constructor(pool){\n        super();\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n        if (this.options.auth) {\n            switch((this.options.auth.type || \"\").toString().toUpperCase()){\n                case \"OAUTH2\":\n                    {\n                        let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                        oauth2.provisionCallback = this.pool.mailer && this.pool.mailer.get(\"oauth2_provision_cb\") || oauth2.provisionCallback;\n                        this.auth = {\n                            type: \"OAUTH2\",\n                            user: this.options.auth.user,\n                            oauth2,\n                            method: \"XOAUTH2\"\n                        };\n                        oauth2.on(\"token\", (token)=>this.pool.mailer.emit(\"token\", token));\n                        oauth2.on(\"error\", (err)=>this.emit(\"error\", err));\n                        break;\n                    }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || \"\").toString().toUpperCase() || \"LOGIN\",\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || \"\",\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || \"\").trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n        this._connection = false;\n        this._connected = false;\n        this.messages = 0;\n        this.available = true;\n    }\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */ connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            this.connection = new SMTPConnection(options);\n            this.connection.once(\"error\", (err)=>{\n                this.emit(\"error\", err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n            this.connection.once(\"end\", ()=>{\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                let timer = setTimeout(()=>{\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error(\"Unexpected socket close\");\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = \"ETLS\";\n                    }\n                    callback(err);\n                }, 1000);\n                try {\n                    timer.unref();\n                } catch (E) {\n                // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n            this.connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        if (err) {\n                            this.connection.close();\n                            this.emit(\"error\", err);\n                            return callback(err);\n                        }\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        if (!this._connected) {\n            return this.connect((err)=>{\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId,\n            cid: this.id\n        }, \"Sending message %s using #%s to <%s>\", messageId, this.id, recipients.join(\", \"));\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info)=>{\n            this.messages++;\n            if (err) {\n                this.connection.close();\n                this.emit(\"error\", err);\n                return callback(err);\n            }\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n            setImmediate(()=>{\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error(\"Resource exhausted\");\n                    err.code = \"EMAXLIMIT\";\n                    this.connection.close();\n                    this.emit(\"error\", err);\n                } else {\n                    this.pool._checkRateLimit(()=>{\n                        this.available = true;\n                        this.emit(\"available\");\n                    });\n                }\n            });\n            callback(null, info);\n        });\n    }\n    /**\n     * Closes the connection\n     */ close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit(\"close\");\n    }\n}\nmodule.exports = PoolResource;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-transport/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst wellKnown = __webpack_require__(/*! ../well-known */ \"(rsc)/./node_modules/nodemailer/lib/well-known/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst XOAuth2 = __webpack_require__(/*! ../xoauth2 */ \"(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */ class SMTPTransport extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        if (typeof options === \"string\") {\n            options = {\n                url: options\n            };\n        }\n        let urlData;\n        let service = options.service;\n        if (typeof options.getSocket === \"function\") {\n            this.getSocket = options.getSocket;\n        }\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n        this.options = shared.assign(false, options, urlData, service && wellKnown(service) // wellknown options\n        );\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-transport\"\n        });\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n        this.name = \"SMTP\";\n        this.version = packageData.version + \"[client:\" + connection.version + \"]\";\n        if (this.options.auth) {\n            this.auth = this.getAuth({});\n        }\n    }\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */ getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(()=>callback(null, false));\n    }\n    getAuth(authOpts) {\n        if (!authOpts) {\n            return this.auth;\n        }\n        let hasAuth = false;\n        let authData = {};\n        if (this.options.auth && typeof this.options.auth === \"object\") {\n            Object.keys(this.options.auth).forEach((key)=>{\n                hasAuth = true;\n                authData[key] = this.options.auth[key];\n            });\n        }\n        if (authOpts && typeof authOpts === \"object\") {\n            Object.keys(authOpts).forEach((key)=>{\n                hasAuth = true;\n                authData[key] = authOpts[key];\n            });\n        }\n        if (!hasAuth) {\n            return false;\n        }\n        switch((authData.type || \"\").toString().toUpperCase()){\n            case \"OAUTH2\":\n                {\n                    if (!authData.service && !authData.user) {\n                        return false;\n                    }\n                    let oauth2 = new XOAuth2(authData, this.logger);\n                    oauth2.provisionCallback = this.mailer && this.mailer.get(\"oauth2_provision_cb\") || oauth2.provisionCallback;\n                    oauth2.on(\"token\", (token)=>this.mailer.emit(\"token\", token));\n                    oauth2.on(\"error\", (err)=>this.emit(\"error\", err));\n                    return {\n                        type: \"OAUTH2\",\n                        user: authData.user,\n                        oauth2,\n                        method: \"XOAUTH2\"\n                    };\n                }\n            default:\n                return {\n                    type: (authData.type || \"\").toString().toUpperCase() || \"LOGIN\",\n                    user: authData.user,\n                    credentials: {\n                        user: authData.user || \"\",\n                        pass: authData.pass,\n                        options: authData.options\n                    },\n                    method: (authData.method || \"\").trim().toUpperCase() || this.options.authMethod || false\n                };\n        }\n    }\n    /**\n     * Sends an e-mail using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                // only copy options if we need to modify it\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                let timer = setTimeout(()=>{\n                    if (returned) {\n                        return;\n                    }\n                    returned = true;\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error(\"Unexpected socket close\");\n                    if (connection && connection._socket && connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = \"ETLS\";\n                    }\n                    callback(err);\n                }, 1000);\n                try {\n                    timer.unref();\n                } catch (E) {\n                // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n            let sendMessage = ()=>{\n                let envelope = mail.message.getEnvelope();\n                let messageId = mail.message.messageId();\n                let recipients = [].concat(envelope.to || []);\n                if (recipients.length > 3) {\n                    recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n                }\n                if (mail.data.dsn) {\n                    envelope.dsn = mail.data.dsn;\n                }\n                this.logger.info({\n                    tnx: \"send\",\n                    messageId\n                }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n                connection.send(envelope, mail.message.createReadStream(), (err, info)=>{\n                    returned = true;\n                    connection.close();\n                    if (err) {\n                        this.logger.error({\n                            err,\n                            tnx: \"send\"\n                        }, \"Send error for %s: %s\", messageId, err.message);\n                        return callback(err);\n                    }\n                    info.envelope = {\n                        from: envelope.from,\n                        to: envelope.to\n                    };\n                    info.messageId = messageId;\n                    try {\n                        return callback(null, info);\n                    } catch (E) {\n                        this.logger.error({\n                            err: E,\n                            tnx: \"callback\"\n                        }, \"Callback error for %s: %s\", messageId, E.message);\n                    }\n                });\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                let auth = this.getAuth(mail.data.auth);\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, (err)=>{\n                        if (auth && auth !== this.auth && auth.oauth2) {\n                            auth.oauth2.removeAllListeners();\n                        }\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        sendMessage();\n                    });\n                } else {\n                    sendMessage();\n                }\n            });\n        });\n    }\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            let returned = false;\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error(\"Connection closed\"));\n            });\n            let finalize = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                let authData = this.getAuth({});\n                if (authData && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(authData, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        finalize();\n                    });\n                } else if (!authData && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error(\"Authentication info was not provided\");\n                    err.code = \"NoAuth\";\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n        return promise;\n    }\n    /**\n     * Releases resources\n     */ close() {\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        this.emit(\"close\");\n    }\n}\n// expose to the world\nmodule.exports = SMTPTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/nodemailer/lib/stream-transport/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class StreamTransport {\n    constructor(options){\n        options = options || {};\n        this.options = options || {};\n        this.name = \"StreamTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"stream-transport\"\n        });\n        this.winbreak = [\n            \"win\",\n            \"windows\",\n            \"dos\",\n            \"\\r\\n\"\n        ].includes((options.newline || \"\").toString().toLowerCase());\n    }\n    /**\n     * Compiles a mailcomposer message and forwards it to handler that sends it\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // We probably need this in the output\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Sending message %s to <%s> using %s line breaks\", messageId, recipients.join(\", \"), this.winbreak ? \"<CR><LF>\" : \"<LF>\");\n        setImmediate(()=>{\n            let stream;\n            try {\n                stream = mail.message.createReadStream();\n            } catch (E) {\n                this.logger.error({\n                    err: E,\n                    tnx: \"send\",\n                    messageId\n                }, \"Creating send stream failed for %s. %s\", messageId, E.message);\n                return done(E);\n            }\n            if (!this.options.buffer) {\n                stream.once(\"error\", (err)=>{\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed creating message for %s. %s\", messageId, err.message);\n                });\n                return done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: stream\n                });\n            }\n            let chunks = [];\n            let chunklen = 0;\n            stream.on(\"readable\", ()=>{\n                let chunk;\n                while((chunk = stream.read()) !== null){\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n            stream.once(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"send\",\n                    messageId\n                }, \"Failed creating message for %s. %s\", messageId, err.message);\n                return done(err);\n            });\n            stream.on(\"end\", ()=>done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: Buffer.concat(chunks, chunklen)\n                }));\n        });\n    }\n}\nmodule.exports = StreamTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/well-known/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodemailer/lib/well-known/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst services = __webpack_require__(/*! ./services.json */ \"(rsc)/./node_modules/nodemailer/lib/well-known/services.json\");\nconst normalized = {};\nObject.keys(services).forEach((key)=>{\n    let service = services[key];\n    normalized[normalizeKey(key)] = normalizeService(service);\n    [].concat(service.aliases || []).forEach((alias)=>{\n        normalized[normalizeKey(alias)] = normalizeService(service);\n    });\n    [].concat(service.domains || []).forEach((domain)=>{\n        normalized[normalizeKey(domain)] = normalizeService(service);\n    });\n});\nfunction normalizeKey(key) {\n    return key.replace(/[^a-zA-Z0-9.-]/g, \"\").toLowerCase();\n}\nfunction normalizeService(service) {\n    let filter = [\n        \"domains\",\n        \"aliases\"\n    ];\n    let response = {};\n    Object.keys(service).forEach((key)=>{\n        if (filter.indexOf(key) < 0) {\n            response[key] = service[key];\n        }\n    });\n    return response;\n}\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */ module.exports = function(key) {\n    key = normalizeKey(key.split(\"@\").pop());\n    return normalized[key] || false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvd2VsbC1rbm93bi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVdDLG1CQUFPQSxDQUFDO0FBQ3pCLE1BQU1DLGFBQWEsQ0FBQztBQUVwQkMsT0FBT0MsSUFBSSxDQUFDSixVQUFVSyxPQUFPLENBQUNDLENBQUFBO0lBQzFCLElBQUlDLFVBQVVQLFFBQVEsQ0FBQ00sSUFBSTtJQUUzQkosVUFBVSxDQUFDTSxhQUFhRixLQUFLLEdBQUdHLGlCQUFpQkY7SUFFakQsRUFBRSxDQUFDRyxNQUFNLENBQUNILFFBQVFJLE9BQU8sSUFBSSxFQUFFLEVBQUVOLE9BQU8sQ0FBQ08sQ0FBQUE7UUFDckNWLFVBQVUsQ0FBQ00sYUFBYUksT0FBTyxHQUFHSCxpQkFBaUJGO0lBQ3ZEO0lBRUEsRUFBRSxDQUFDRyxNQUFNLENBQUNILFFBQVFNLE9BQU8sSUFBSSxFQUFFLEVBQUVSLE9BQU8sQ0FBQ1MsQ0FBQUE7UUFDckNaLFVBQVUsQ0FBQ00sYUFBYU0sUUFBUSxHQUFHTCxpQkFBaUJGO0lBQ3hEO0FBQ0o7QUFFQSxTQUFTQyxhQUFhRixHQUFHO0lBQ3JCLE9BQU9BLElBQUlTLE9BQU8sQ0FBQyxtQkFBbUIsSUFBSUMsV0FBVztBQUN6RDtBQUVBLFNBQVNQLGlCQUFpQkYsT0FBTztJQUM3QixJQUFJVSxTQUFTO1FBQUM7UUFBVztLQUFVO0lBQ25DLElBQUlDLFdBQVcsQ0FBQztJQUVoQmYsT0FBT0MsSUFBSSxDQUFDRyxTQUFTRixPQUFPLENBQUNDLENBQUFBO1FBQ3pCLElBQUlXLE9BQU9FLE9BQU8sQ0FBQ2IsT0FBTyxHQUFHO1lBQ3pCWSxRQUFRLENBQUNaLElBQUksR0FBR0MsT0FBTyxDQUFDRCxJQUFJO1FBQ2hDO0lBQ0o7SUFFQSxPQUFPWTtBQUNYO0FBRUE7Ozs7OztDQU1DLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRyxTQUFVZixHQUFHO0lBQzFCQSxNQUFNRSxhQUFhRixJQUFJZ0IsS0FBSyxDQUFDLEtBQUtDLEdBQUc7SUFDckMsT0FBT3JCLFVBQVUsQ0FBQ0ksSUFBSSxJQUFJO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udGludWFsZy8uL25vZGVfbW9kdWxlcy9ub2RlbWFpbGVyL2xpYi93ZWxsLWtub3duL2luZGV4LmpzP2M3MTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzZXJ2aWNlcyA9IHJlcXVpcmUoJy4vc2VydmljZXMuanNvbicpO1xuY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuXG5PYmplY3Qua2V5cyhzZXJ2aWNlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGxldCBzZXJ2aWNlID0gc2VydmljZXNba2V5XTtcblxuICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplS2V5KGtleSldID0gbm9ybWFsaXplU2VydmljZShzZXJ2aWNlKTtcblxuICAgIFtdLmNvbmNhdChzZXJ2aWNlLmFsaWFzZXMgfHwgW10pLmZvckVhY2goYWxpYXMgPT4ge1xuICAgICAgICBub3JtYWxpemVkW25vcm1hbGl6ZUtleShhbGlhcyldID0gbm9ybWFsaXplU2VydmljZShzZXJ2aWNlKTtcbiAgICB9KTtcblxuICAgIFtdLmNvbmNhdChzZXJ2aWNlLmRvbWFpbnMgfHwgW10pLmZvckVhY2goZG9tYWluID0+IHtcbiAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVLZXkoZG9tYWluKV0gPSBub3JtYWxpemVTZXJ2aWNlKHNlcnZpY2UpO1xuICAgIH0pO1xufSk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUtleShrZXkpIHtcbiAgICByZXR1cm4ga2V5LnJlcGxhY2UoL1teYS16QS1aMC05Li1dL2csICcnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTZXJ2aWNlKHNlcnZpY2UpIHtcbiAgICBsZXQgZmlsdGVyID0gWydkb21haW5zJywgJ2FsaWFzZXMnXTtcbiAgICBsZXQgcmVzcG9uc2UgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHNlcnZpY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGZpbHRlci5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICByZXNwb25zZVtrZXldID0gc2VydmljZVtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgU01UUCBjb25maWcgZm9yIGdpdmVuIGtleS4gS2V5IGNhbiBiZSBhIG5hbWUgKGxpa2UgJ0dtYWlsJyksIGFsaWFzIChsaWtlICdHb29nbGUgTWFpbCcpIG9yXG4gKiBhbiBlbWFpbCBhZGRyZXNzIChsaWtlICd0ZXN0QGdvb2dsZW1haWwuY29tJykuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBTTVRQIGNvbmZpZyBvciBmYWxzZSBpZiBub3QgZm91bmRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleS5zcGxpdCgnQCcpLnBvcCgpKTtcbiAgICByZXR1cm4gbm9ybWFsaXplZFtrZXldIHx8IGZhbHNlO1xufTtcbiJdLCJuYW1lcyI6WyJzZXJ2aWNlcyIsInJlcXVpcmUiLCJub3JtYWxpemVkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZXJ2aWNlIiwibm9ybWFsaXplS2V5Iiwibm9ybWFsaXplU2VydmljZSIsImNvbmNhdCIsImFsaWFzZXMiLCJhbGlhcyIsImRvbWFpbnMiLCJkb21haW4iLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJmaWx0ZXIiLCJyZXNwb25zZSIsImluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIiwic3BsaXQiLCJwb3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/well-known/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js":
/*!******************************************************!*\
  !*** ./node_modules/nodemailer/lib/xoauth2/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */ class XOAuth2 extends Stream {\n    constructor(options, logger){\n        super();\n        this.options = options || {};\n        if (options && options.serviceClient) {\n            if (!options.privateKey || !options.user) {\n                setImmediate(()=>this.emit(\"error\", new Error('Options \"privateKey\" and \"user\" are required for service account!')));\n                return;\n            }\n            let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);\n            this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n        }\n        this.logger = shared.getLogger({\n            logger\n        }, {\n            component: this.options.component || \"OAuth2\"\n        });\n        this.provisionCallback = typeof this.options.provisionCallback === \"function\" ? this.options.provisionCallback : false;\n        this.options.accessUrl = this.options.accessUrl || \"https://accounts.google.com/o/oauth2/token\";\n        this.options.customHeaders = this.options.customHeaders || {};\n        this.options.customParams = this.options.customParams || {};\n        this.accessToken = this.options.accessToken || false;\n        if (this.options.expires && Number(this.options.expires)) {\n            this.expires = this.options.expires;\n        } else {\n            let timeout = Math.max(Number(this.options.timeout) || 0, 0);\n            this.expires = timeout && Date.now() + timeout * 1000 || 0;\n        }\n    }\n    /**\n     * Returns or generates (if previous has expired) a XOAuth2 token\n     *\n     * @param {Boolean} renew If false then use cached access token (if available)\n     * @param {Function} callback Callback function with error object and token string\n     */ getToken(renew, callback) {\n        if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n            return callback(null, this.accessToken);\n        }\n        let generateCallback = (...args)=>{\n            if (args[0]) {\n                this.logger.error({\n                    err: args[0],\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"renew\"\n                }, \"Failed generating new Access Token for %s\", this.options.user);\n            } else {\n                this.logger.info({\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"renew\"\n                }, \"Generated new Access Token for %s\", this.options.user);\n            }\n            callback(...args);\n        };\n        if (this.provisionCallback) {\n            this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires)=>{\n                if (!err && accessToken) {\n                    this.accessToken = accessToken;\n                    this.expires = expires || 0;\n                }\n                generateCallback(err, accessToken);\n            });\n        } else {\n            this.generateToken(generateCallback);\n        }\n    }\n    /**\n     * Updates token values\n     *\n     * @param {String} accessToken New access token\n     * @param {Number} timeout Access token lifetime in seconds\n     *\n     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n     */ updateToken(accessToken, timeout) {\n        this.accessToken = accessToken;\n        timeout = Math.max(Number(timeout) || 0, 0);\n        this.expires = timeout && Date.now() + timeout * 1000 || 0;\n        this.emit(\"token\", {\n            user: this.options.user,\n            accessToken: accessToken || \"\",\n            expires: this.expires\n        });\n    }\n    /**\n     * Generates a new XOAuth2 token with the credentials provided at initialization\n     *\n     * @param {Function} callback Callback function with error object and token string\n     */ generateToken(callback) {\n        let urlOptions;\n        let loggedUrlOptions;\n        if (this.options.serviceClient) {\n            // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n            let iat = Math.floor(Date.now() / 1000); // unix time\n            let tokenData = {\n                iss: this.options.serviceClient,\n                scope: this.options.scope || \"https://mail.google.com/\",\n                sub: this.options.user,\n                aud: this.options.accessUrl,\n                iat,\n                exp: iat + this.options.serviceRequestTimeout\n            };\n            let token;\n            try {\n                token = this.jwtSignRS256(tokenData);\n            } catch (err) {\n                return callback(new Error(\"Can't generate token. Check your auth options\"));\n            }\n            urlOptions = {\n                grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                assertion: token\n            };\n            loggedUrlOptions = {\n                grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                assertion: tokenData\n            };\n        } else {\n            if (!this.options.refreshToken) {\n                return callback(new Error(\"Can't create new access token for user\"));\n            }\n            // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n            urlOptions = {\n                client_id: this.options.clientId || \"\",\n                client_secret: this.options.clientSecret || \"\",\n                refresh_token: this.options.refreshToken,\n                grant_type: \"refresh_token\"\n            };\n            loggedUrlOptions = {\n                client_id: this.options.clientId || \"\",\n                client_secret: (this.options.clientSecret || \"\").substr(0, 6) + \"...\",\n                refresh_token: (this.options.refreshToken || \"\").substr(0, 6) + \"...\",\n                grant_type: \"refresh_token\"\n            };\n        }\n        Object.keys(this.options.customParams).forEach((key)=>{\n            urlOptions[key] = this.options.customParams[key];\n            loggedUrlOptions[key] = this.options.customParams[key];\n        });\n        this.logger.debug({\n            tnx: \"OAUTH2\",\n            user: this.options.user,\n            action: \"generate\"\n        }, \"Requesting token using: %s\", JSON.stringify(loggedUrlOptions));\n        this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body)=>{\n            let data;\n            if (error) {\n                return callback(error);\n            }\n            try {\n                data = JSON.parse(body.toString());\n            } catch (E) {\n                return callback(E);\n            }\n            if (!data || typeof data !== \"object\") {\n                this.logger.debug({\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"post\"\n                }, \"Response: %s\", (body || \"\").toString());\n                return callback(new Error(\"Invalid authentication response\"));\n            }\n            let logData = {};\n            Object.keys(data).forEach((key)=>{\n                if (key !== \"access_token\") {\n                    logData[key] = data[key];\n                } else {\n                    logData[key] = (data[key] || \"\").toString().substr(0, 6) + \"...\";\n                }\n            });\n            this.logger.debug({\n                tnx: \"OAUTH2\",\n                user: this.options.user,\n                action: \"post\"\n            }, \"Response: %s\", JSON.stringify(logData));\n            if (data.error) {\n                // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n                let errorMessage = data.error;\n                if (data.error_description) {\n                    errorMessage += \": \" + data.error_description;\n                }\n                if (data.error_uri) {\n                    errorMessage += \" (\" + data.error_uri + \")\";\n                }\n                return callback(new Error(errorMessage));\n            }\n            if (data.access_token) {\n                this.updateToken(data.access_token, data.expires_in);\n                return callback(null, this.accessToken);\n            }\n            return callback(new Error(\"No access token\"));\n        });\n    }\n    /**\n     * Converts an access_token and user id into a base64 encoded XOAuth2 token\n     *\n     * @param {String} [accessToken] Access token string\n     * @return {String} Base64 encoded token for IMAP or SMTP login\n     */ buildXOAuth2Token(accessToken) {\n        let authData = [\n            \"user=\" + (this.options.user || \"\"),\n            \"auth=Bearer \" + (accessToken || this.accessToken),\n            \"\",\n            \"\"\n        ];\n        return Buffer.from(authData.join(\"\\x01\"), \"utf-8\").toString(\"base64\");\n    }\n    /**\n     * Custom POST request handler.\n     * This is only needed to keep paths short in Windows – usually this module\n     * is a dependency of a dependency and if it tries to require something\n     * like the request module the paths get way too long to handle for Windows.\n     * As we do only a simple POST request we do not actually require complicated\n     * logic support (no redirects, no nothing) anyway.\n     *\n     * @param {String} url Url to POST to\n     * @param {String|Buffer} payload Payload to POST\n     * @param {Function} callback Callback function with (err, buff)\n     */ postRequest(url, payload, params, callback) {\n        let returned = false;\n        let chunks = [];\n        let chunklen = 0;\n        let req = nmfetch(url, {\n            method: \"post\",\n            headers: params.customHeaders,\n            body: payload,\n            allowErrorResponse: true\n        });\n        req.on(\"readable\", ()=>{\n            let chunk;\n            while((chunk = req.read()) !== null){\n                chunks.push(chunk);\n                chunklen += chunk.length;\n            }\n        });\n        req.once(\"error\", (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n        req.once(\"end\", ()=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(null, Buffer.concat(chunks, chunklen));\n        });\n    }\n    /**\n     * Encodes a buffer or a string into Base64url format\n     *\n     * @param {Buffer|String} data The data to convert\n     * @return {String} The encoded string\n     */ toBase64URL(data) {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data);\n        }\n        return data.toString(\"base64\").replace(/[=]+/g, \"\") // remove '='s\n        .replace(/\\+/g, \"-\") // '+' → '-'\n        .replace(/\\//g, \"_\"); // '/' → '_'\n    }\n    /**\n     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n     *\n     * @param {Object} payload The payload to include in the generated token\n     * @return {String} The generated and signed token\n     */ jwtSignRS256(payload) {\n        payload = [\n            '{\"alg\":\"RS256\",\"typ\":\"JWT\"}',\n            JSON.stringify(payload)\n        ].map((val)=>this.toBase64URL(val)).join(\".\");\n        let signature = crypto.createSign(\"RSA-SHA256\").update(payload).sign(this.options.privateKey);\n        return payload + \".\" + this.toBase64URL(signature);\n    }\n}\nmodule.exports = XOAuth2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIveG9hdXRoMi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFNBQVNDLG9EQUF3QjtBQUN2QyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQztBQUN4QixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUN2QixNQUFNRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUV2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBMkJDLEdBQ0QsTUFBTUksZ0JBQWdCTDtJQUNsQk0sWUFBWUMsT0FBTyxFQUFFQyxNQUFNLENBQUU7UUFDekIsS0FBSztRQUVMLElBQUksQ0FBQ0QsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFFM0IsSUFBSUEsV0FBV0EsUUFBUUUsYUFBYSxFQUFFO1lBQ2xDLElBQUksQ0FBQ0YsUUFBUUcsVUFBVSxJQUFJLENBQUNILFFBQVFJLElBQUksRUFBRTtnQkFDdENDLGFBQWEsSUFBTSxJQUFJLENBQUNDLElBQUksQ0FBQyxTQUFTLElBQUlDLE1BQU07Z0JBQ2hEO1lBQ0o7WUFFQSxJQUFJQyx3QkFBd0JDLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDQyxPQUFPLElBQUksQ0FBQ1osT0FBTyxDQUFDUSxxQkFBcUIsS0FBSyxHQUFHLElBQUk7WUFDbkcsSUFBSSxDQUFDUixPQUFPLENBQUNRLHFCQUFxQixHQUFHQSx5QkFBeUIsSUFBSTtRQUN0RTtRQUVBLElBQUksQ0FBQ1AsTUFBTSxHQUFHSixPQUFPZ0IsU0FBUyxDQUMxQjtZQUNJWjtRQUNKLEdBQ0E7WUFDSWEsV0FBVyxJQUFJLENBQUNkLE9BQU8sQ0FBQ2MsU0FBUyxJQUFJO1FBQ3pDO1FBR0osSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxPQUFPLElBQUksQ0FBQ2YsT0FBTyxDQUFDZSxpQkFBaUIsS0FBSyxhQUFhLElBQUksQ0FBQ2YsT0FBTyxDQUFDZSxpQkFBaUIsR0FBRztRQUVqSCxJQUFJLENBQUNmLE9BQU8s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QUNWO1lBQ0o7WUFDQUEsV0FBVztZQUNYLE9BQU8xRCxTQUFTLE1BQU1vRCxPQUFPbUIsTUFBTSxDQUFDWixRQUFRQztRQUNoRDtJQUNKO0lBRUE7Ozs7O0tBS0MsR0FDRFksWUFBWWhDLElBQUksRUFBRTtRQUNkLElBQUksT0FBT0EsU0FBUyxVQUFVO1lBQzFCQSxPQUFPWSxPQUFPQyxJQUFJLENBQUNiO1FBQ3ZCO1FBRUEsT0FBT0EsS0FDRkUsUUFBUSxDQUFDLFVBQ1QrQixPQUFPLENBQUMsU0FBUyxJQUFJLGNBQWM7U0FDbkNBLE9BQU8sQ0FBQyxPQUFPLEtBQUssWUFBWTtTQUNoQ0EsT0FBTyxDQUFDLE9BQU8sTUFBTSxZQUFZO0lBQzFDO0lBRUE7Ozs7O0tBS0MsR0FDRHBELGFBQWFtQyxPQUFPLEVBQUU7UUFDbEJBLFVBQVU7WUFBQztZQUErQnBCLEtBQUtDLFNBQVMsQ0FBQ21CO1NBQVMsQ0FBQ2tCLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBTyxJQUFJLENBQUNILFdBQVcsQ0FBQ0csTUFBTXJCLElBQUksQ0FBQztRQUMxRyxJQUFJc0IsWUFBWTFHLE9BQU8yRyxVQUFVLENBQUMsY0FBY0MsTUFBTSxDQUFDdEIsU0FBU3VCLElBQUksQ0FBQyxJQUFJLENBQUN6RyxPQUFPLENBQUNHLFVBQVU7UUFDNUYsT0FBTytFLFVBQVUsTUFBTSxJQUFJLENBQUNnQixXQUFXLENBQUNJO0lBQzVDO0FBQ0o7QUFFQUksT0FBT0MsT0FBTyxHQUFHN0ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb250aW51YWxnLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL3hvYXV0aDIvaW5kZXguanM/NmQ2YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbTtcbmNvbnN0IG5tZmV0Y2ggPSByZXF1aXJlKCcuLi9mZXRjaCcpO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5jb25zdCBzaGFyZWQgPSByZXF1aXJlKCcuLi9zaGFyZWQnKTtcblxuLyoqXG4gKiBYT0FVVEgyIGFjY2Vzc190b2tlbiBnZW5lcmF0b3IgZm9yIEdtYWlsLlxuICogQ3JlYXRlIGNsaWVudCBJRCBmb3Igd2ViIGFwcGxpY2F0aW9ucyBpbiBHb29nbGUgQVBJIGNvbnNvbGUgdG8gdXNlIGl0LlxuICogU2VlIE9mZmxpbmUgQWNjZXNzIGZvciByZWNlaXZpbmcgdGhlIG5lZWRlZCByZWZyZXNoVG9rZW4gZm9yIGFuIHVzZXJcbiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FjY291bnRzL2RvY3MvT0F1dGgyV2ViU2VydmVyI29mZmxpbmVcbiAqXG4gKiBVc2FnZSBmb3IgZ2VuZXJhdGluZyBhY2Nlc3MgdG9rZW5zIHdpdGggYSBjdXN0b20gbWV0aG9kIHVzaW5nIHByb3Zpc2lvbkNhbGxiYWNrOlxuICogcHJvdmlzaW9uQ2FsbGJhY2sodXNlciwgcmVuZXcsIGNhbGxiYWNrKVxuICogICAqIHVzZXIgaXMgdGhlIHVzZXJuYW1lIHRvIGdldCB0aGUgdG9rZW4gZm9yXG4gKiAgICogcmVuZXcgaXMgYSBib29sZWFuIHRoYXQgaWYgdHJ1ZSBpbmRpY2F0ZXMgdGhhdCBleGlzdGluZyB0b2tlbiBmYWlsZWQgYW5kIG5lZWRzIHRvIGJlIHJlbmV3ZWRcbiAqICAgKiBjYWxsYmFjayBpcyB0aGUgY2FsbGJhY2sgdG8gcnVuIHdpdGggKGVycm9yLCBhY2Nlc3NUb2tlbiBbLCBleHBpcmVzXSlcbiAqICAgICAqIGFjY2Vzc1Rva2VuIGlzIGEgc3RyaW5nXG4gKiAgICAgKiBleHBpcmVzIGlzIGFuIG9wdGlvbmFsIGV4cGlyZSB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICogSWYgcHJvdmlzaW9uQ2FsbGJhY2sgaXMgdXNlZCwgdGhlbiBOb2RlbWFpbGVyIGRvZXMgbm90IHRyeSB0byBhdHRlbXB0IGdlbmVyYXRpbmcgdGhlIHRva2VuIGJ5IGl0c2VsZlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ2xpZW50IGluZm9ybWF0aW9uIGZvciB0b2tlbiBnZW5lcmF0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy51c2VyIFVzZXIgZS1tYWlsIGFkZHJlc3NcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmNsaWVudElkIENsaWVudCBJRCB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuY2xpZW50U2VjcmV0IENsaWVudCBzZWNyZXQgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnJlZnJlc2hUb2tlbiBSZWZyZXNoIHRva2VuIGZvciBhbiB1c2VyXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5hY2Nlc3NVcmwgRW5kcG9pbnQgZm9yIHRva2VuIGdlbmVyYXRpb24sIGRlZmF1bHRzIHRvICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdG9rZW4nXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5hY2Nlc3NUb2tlbiBBbiBleGlzdGluZyB2YWxpZCBhY2Nlc3NUb2tlblxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucHJpdmF0ZUtleSBQcml2YXRlIGtleSBmb3IgSlNXXG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5leHBpcmVzIE9wdGlvbmFsIEFjY2VzcyBUb2tlbiBleHBpcmUgdGltZSBpbiBtc1xuICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMudGltZW91dCBPcHRpb25hbCBUVEwgZm9yIEFjY2VzcyBUb2tlbiBpbiBzZWNvbmRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnByb3Zpc2lvbkNhbGxiYWNrIEZ1bmN0aW9uIHRvIHJ1biB3aGVuIGEgbmV3IGFjY2VzcyB0b2tlbiBpcyByZXF1aXJlZFxuICovXG5jbGFzcyBYT0F1dGgyIGV4dGVuZHMgU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBsb2dnZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2VydmljZUNsaWVudCkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnByaXZhdGVLZXkgfHwgIW9wdGlvbnMudXNlcikge1xuICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdPcHRpb25zIFwicHJpdmF0ZUtleVwiIGFuZCBcInVzZXJcIiBhcmUgcmVxdWlyZWQgZm9yIHNlcnZpY2UgYWNjb3VudCEnKSkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHNlcnZpY2VSZXF1ZXN0VGltZW91dCA9IE1hdGgubWluKE1hdGgubWF4KE51bWJlcih0aGlzLm9wdGlvbnMuc2VydmljZVJlcXVlc3RUaW1lb3V0KSB8fCAwLCAwKSwgMzYwMCk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2VydmljZVJlcXVlc3RUaW1lb3V0ID0gc2VydmljZVJlcXVlc3RUaW1lb3V0IHx8IDUgKiA2MDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9nZ2VyID0gc2hhcmVkLmdldExvZ2dlcihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsb2dnZXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLm9wdGlvbnMuY29tcG9uZW50IHx8ICdPQXV0aDInXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5wcm92aXNpb25DYWxsYmFjayA9IHR5cGVvZiB0aGlzLm9wdGlvbnMucHJvdmlzaW9uQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyB0aGlzLm9wdGlvbnMucHJvdmlzaW9uQ2FsbGJhY2sgOiBmYWxzZTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuYWNjZXNzVXJsID0gdGhpcy5vcHRpb25zLmFjY2Vzc1VybCB8fCAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3Rva2VuJztcbiAgICAgICAgdGhpcy5vcHRpb25zLmN1c3RvbUhlYWRlcnMgPSB0aGlzLm9wdGlvbnMuY3VzdG9tSGVhZGVycyB8fCB7fTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmN1c3RvbVBhcmFtcyA9IHRoaXMub3B0aW9ucy5jdXN0b21QYXJhbXMgfHwge307XG5cbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHRoaXMub3B0aW9ucy5hY2Nlc3NUb2tlbiB8fCBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmV4cGlyZXMgJiYgTnVtYmVyKHRoaXMub3B0aW9ucy5leHBpcmVzKSkge1xuICAgICAgICAgICAgdGhpcy5leHBpcmVzID0gdGhpcy5vcHRpb25zLmV4cGlyZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdGltZW91dCA9IE1hdGgubWF4KE51bWJlcih0aGlzLm9wdGlvbnMudGltZW91dCkgfHwgMCwgMCk7XG4gICAgICAgICAgICB0aGlzLmV4cGlyZXMgPSAodGltZW91dCAmJiBEYXRlLm5vdygpICsgdGltZW91dCAqIDEwMDApIHx8IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9yIGdlbmVyYXRlcyAoaWYgcHJldmlvdXMgaGFzIGV4cGlyZWQpIGEgWE9BdXRoMiB0b2tlblxuICAgICAqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSByZW5ldyBJZiBmYWxzZSB0aGVuIHVzZSBjYWNoZWQgYWNjZXNzIHRva2VuIChpZiBhdmFpbGFibGUpXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBlcnJvciBvYmplY3QgYW5kIHRva2VuIHN0cmluZ1xuICAgICAqL1xuICAgIGdldFRva2VuKHJlbmV3LCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXJlbmV3ICYmIHRoaXMuYWNjZXNzVG9rZW4gJiYgKCF0aGlzLmV4cGlyZXMgfHwgdGhpcy5leHBpcmVzID4gRGF0ZS5ub3coKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB0aGlzLmFjY2Vzc1Rva2VuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBnZW5lcmF0ZUNhbGxiYWNrID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIGlmIChhcmdzWzBdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycjogYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRueDogJ09BVVRIMicsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyOiB0aGlzLm9wdGlvbnMudXNlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3JlbmV3J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIGdlbmVyYXRpbmcgbmV3IEFjY2VzcyBUb2tlbiBmb3IgJXMnLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMudXNlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRueDogJ09BVVRIMicsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyOiB0aGlzLm9wdGlvbnMudXNlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3JlbmV3J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnR2VuZXJhdGVkIG5ldyBBY2Nlc3MgVG9rZW4gZm9yICVzJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVzZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMucHJvdmlzaW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMucHJvdmlzaW9uQ2FsbGJhY2sodGhpcy5vcHRpb25zLnVzZXIsICEhcmVuZXcsIChlcnIsIGFjY2Vzc1Rva2VuLCBleHBpcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIgJiYgYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGlyZXMgPSBleHBpcmVzIHx8IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdlbmVyYXRlQ2FsbGJhY2soZXJyLCBhY2Nlc3NUb2tlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVUb2tlbihnZW5lcmF0ZUNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdG9rZW4gdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYWNjZXNzVG9rZW4gTmV3IGFjY2VzcyB0b2tlblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0IEFjY2VzcyB0b2tlbiBsaWZldGltZSBpbiBzZWNvbmRzXG4gICAgICpcbiAgICAgKiBFbWl0cyAndG9rZW4nOiB7IHVzZXI6IFVzZXIgZW1haWwtYWRkcmVzcywgYWNjZXNzVG9rZW46IHRoZSBuZXcgYWNjZXNzVG9rZW4sIHRpbWVvdXQ6IFRUTCBpbiBzZWNvbmRzfVxuICAgICAqL1xuICAgIHVwZGF0ZVRva2VuKGFjY2Vzc1Rva2VuLCB0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcbiAgICAgICAgdGltZW91dCA9IE1hdGgubWF4KE51bWJlcih0aW1lb3V0KSB8fCAwLCAwKTtcbiAgICAgICAgdGhpcy5leHBpcmVzID0gKHRpbWVvdXQgJiYgRGF0ZS5ub3coKSArIHRpbWVvdXQgKiAxMDAwKSB8fCAwO1xuXG4gICAgICAgIHRoaXMuZW1pdCgndG9rZW4nLCB7XG4gICAgICAgICAgICB1c2VyOiB0aGlzLm9wdGlvbnMudXNlcixcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbiB8fCAnJyxcbiAgICAgICAgICAgIGV4cGlyZXM6IHRoaXMuZXhwaXJlc1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBuZXcgWE9BdXRoMiB0b2tlbiB3aXRoIHRoZSBjcmVkZW50aWFscyBwcm92aWRlZCBhdCBpbml0aWFsaXphdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBlcnJvciBvYmplY3QgYW5kIHRva2VuIHN0cmluZ1xuICAgICAqL1xuICAgIGdlbmVyYXRlVG9rZW4oY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHVybE9wdGlvbnM7XG4gICAgICAgIGxldCBsb2dnZWRVcmxPcHRpb25zO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNlcnZpY2VDbGllbnQpIHtcbiAgICAgICAgICAgIC8vIHNlcnZpY2UgYWNjb3VudCAtIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2lkZW50aXR5L3Byb3RvY29scy9PQXV0aDJTZXJ2aWNlQWNjb3VudFxuICAgICAgICAgICAgbGV0IGlhdCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApOyAvLyB1bml4IHRpbWVcbiAgICAgICAgICAgIGxldCB0b2tlbkRhdGEgPSB7XG4gICAgICAgICAgICAgICAgaXNzOiB0aGlzLm9wdGlvbnMuc2VydmljZUNsaWVudCxcbiAgICAgICAgICAgICAgICBzY29wZTogdGhpcy5vcHRpb25zLnNjb3BlIHx8ICdodHRwczovL21haWwuZ29vZ2xlLmNvbS8nLFxuICAgICAgICAgICAgICAgIHN1YjogdGhpcy5vcHRpb25zLnVzZXIsXG4gICAgICAgICAgICAgICAgYXVkOiB0aGlzLm9wdGlvbnMuYWNjZXNzVXJsLFxuICAgICAgICAgICAgICAgIGlhdCxcbiAgICAgICAgICAgICAgICBleHA6IGlhdCArIHRoaXMub3B0aW9ucy5zZXJ2aWNlUmVxdWVzdFRpbWVvdXRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgdG9rZW47XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5qd3RTaWduUlMyNTYodG9rZW5EYXRhKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0NhblxceDI3dCBnZW5lcmF0ZSB0b2tlbi4gQ2hlY2sgeW91ciBhdXRoIG9wdGlvbnMnKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVybE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ3VybjppZXRmOnBhcmFtczpvYXV0aDpncmFudC10eXBlOmp3dC1iZWFyZXInLFxuICAgICAgICAgICAgICAgIGFzc2VydGlvbjogdG9rZW5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxvZ2dlZFVybE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ3VybjppZXRmOnBhcmFtczpvYXV0aDpncmFudC10eXBlOmp3dC1iZWFyZXInLFxuICAgICAgICAgICAgICAgIGFzc2VydGlvbjogdG9rZW5EYXRhXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucmVmcmVzaFRva2VuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignQ2FuXFx4Mjd0IGNyZWF0ZSBuZXcgYWNjZXNzIHRva2VuIGZvciB1c2VyJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB3ZWIgYXBwIC0gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vaWRlbnRpdHkvcHJvdG9jb2xzL09BdXRoMldlYlNlcnZlclxuICAgICAgICAgICAgdXJsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBjbGllbnRfaWQ6IHRoaXMub3B0aW9ucy5jbGllbnRJZCB8fCAnJyxcbiAgICAgICAgICAgICAgICBjbGllbnRfc2VjcmV0OiB0aGlzLm9wdGlvbnMuY2xpZW50U2VjcmV0IHx8ICcnLFxuICAgICAgICAgICAgICAgIHJlZnJlc2hfdG9rZW46IHRoaXMub3B0aW9ucy5yZWZyZXNoVG9rZW4sXG4gICAgICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsb2dnZWRVcmxPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGNsaWVudF9pZDogdGhpcy5vcHRpb25zLmNsaWVudElkIHx8ICcnLFxuICAgICAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6ICh0aGlzLm9wdGlvbnMuY2xpZW50U2VjcmV0IHx8ICcnKS5zdWJzdHIoMCwgNikgKyAnLi4uJyxcbiAgICAgICAgICAgICAgICByZWZyZXNoX3Rva2VuOiAodGhpcy5vcHRpb25zLnJlZnJlc2hUb2tlbiB8fCAnJykuc3Vic3RyKDAsIDYpICsgJy4uLicsXG4gICAgICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5vcHRpb25zLmN1c3RvbVBhcmFtcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgdXJsT3B0aW9uc1trZXldID0gdGhpcy5vcHRpb25zLmN1c3RvbVBhcmFtc1trZXldO1xuICAgICAgICAgICAgbG9nZ2VkVXJsT3B0aW9uc1trZXldID0gdGhpcy5vcHRpb25zLmN1c3RvbVBhcmFtc1trZXldO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0bng6ICdPQVVUSDInLFxuICAgICAgICAgICAgICAgIHVzZXI6IHRoaXMub3B0aW9ucy51c2VyLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ2dlbmVyYXRlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdSZXF1ZXN0aW5nIHRva2VuIHVzaW5nOiAlcycsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShsb2dnZWRVcmxPcHRpb25zKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucG9zdFJlcXVlc3QodGhpcy5vcHRpb25zLmFjY2Vzc1VybCwgdXJsT3B0aW9ucywgdGhpcy5vcHRpb25zLCAoZXJyb3IsIGJvZHkpID0+IHtcbiAgICAgICAgICAgIGxldCBkYXRhO1xuXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGJvZHkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChFKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKEUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRueDogJ09BVVRIMicsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyOiB0aGlzLm9wdGlvbnMudXNlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3Bvc3QnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdSZXNwb25zZTogJXMnLFxuICAgICAgICAgICAgICAgICAgICAoYm9keSB8fCAnJykudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignSW52YWxpZCBhdXRoZW50aWNhdGlvbiByZXNwb25zZScpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGxvZ0RhdGEgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAnYWNjZXNzX3Rva2VuJykge1xuICAgICAgICAgICAgICAgICAgICBsb2dEYXRhW2tleV0gPSBkYXRhW2tleV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nRGF0YVtrZXldID0gKGRhdGFba2V5XSB8fCAnJykudG9TdHJpbmcoKS5zdWJzdHIoMCwgNikgKyAnLi4uJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0bng6ICdPQVVUSDInLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiB0aGlzLm9wdGlvbnMudXNlcixcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncG9zdCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdSZXNwb25zZTogJXMnLFxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGxvZ0RhdGEpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIEVycm9yIFJlc3BvbnNlIDogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDkjc2VjdGlvbi01LjJcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5lcnJvcl9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gJzogJyArIGRhdGEuZXJyb3JfZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmVycm9yX3VyaSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gJyAoJyArIGRhdGEuZXJyb3JfdXJpICsgJyknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKGVycm9yTWVzc2FnZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YS5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRva2VuKGRhdGEuYWNjZXNzX3Rva2VuLCBkYXRhLmV4cGlyZXNfaW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB0aGlzLmFjY2Vzc1Rva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignTm8gYWNjZXNzIHRva2VuJykpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbiBhY2Nlc3NfdG9rZW4gYW5kIHVzZXIgaWQgaW50byBhIGJhc2U2NCBlbmNvZGVkIFhPQXV0aDIgdG9rZW5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbYWNjZXNzVG9rZW5dIEFjY2VzcyB0b2tlbiBzdHJpbmdcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IEJhc2U2NCBlbmNvZGVkIHRva2VuIGZvciBJTUFQIG9yIFNNVFAgbG9naW5cbiAgICAgKi9cbiAgICBidWlsZFhPQXV0aDJUb2tlbihhY2Nlc3NUb2tlbikge1xuICAgICAgICBsZXQgYXV0aERhdGEgPSBbJ3VzZXI9JyArICh0aGlzLm9wdGlvbnMudXNlciB8fCAnJyksICdhdXRoPUJlYXJlciAnICsgKGFjY2Vzc1Rva2VuIHx8IHRoaXMuYWNjZXNzVG9rZW4pLCAnJywgJyddO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oYXV0aERhdGEuam9pbignXFx4MDEnKSwgJ3V0Zi04JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1c3RvbSBQT1NUIHJlcXVlc3QgaGFuZGxlci5cbiAgICAgKiBUaGlzIGlzIG9ubHkgbmVlZGVkIHRvIGtlZXAgcGF0aHMgc2hvcnQgaW4gV2luZG93cyDigJMgdXN1YWxseSB0aGlzIG1vZHVsZVxuICAgICAqIGlzIGEgZGVwZW5kZW5jeSBvZiBhIGRlcGVuZGVuY3kgYW5kIGlmIGl0IHRyaWVzIHRvIHJlcXVpcmUgc29tZXRoaW5nXG4gICAgICogbGlrZSB0aGUgcmVxdWVzdCBtb2R1bGUgdGhlIHBhdGhzIGdldCB3YXkgdG9vIGxvbmcgdG8gaGFuZGxlIGZvciBXaW5kb3dzLlxuICAgICAqIEFzIHdlIGRvIG9ubHkgYSBzaW1wbGUgUE9TVCByZXF1ZXN0IHdlIGRvIG5vdCBhY3R1YWxseSByZXF1aXJlIGNvbXBsaWNhdGVkXG4gICAgICogbG9naWMgc3VwcG9ydCAobm8gcmVkaXJlY3RzLCBubyBub3RoaW5nKSBhbnl3YXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFVybCB0byBQT1NUIHRvXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QnVmZmVyfSBwYXlsb2FkIFBheWxvYWQgdG8gUE9TVFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHdpdGggKGVyciwgYnVmZilcbiAgICAgKi9cbiAgICBwb3N0UmVxdWVzdCh1cmwsIHBheWxvYWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHJldHVybmVkID0gZmFsc2U7XG5cbiAgICAgICAgbGV0IGNodW5rcyA9IFtdO1xuICAgICAgICBsZXQgY2h1bmtsZW4gPSAwO1xuXG4gICAgICAgIGxldCByZXEgPSBubWZldGNoKHVybCwge1xuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICBoZWFkZXJzOiBwYXJhbXMuY3VzdG9tSGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IHBheWxvYWQsXG4gICAgICAgICAgICBhbGxvd0Vycm9yUmVzcG9uc2U6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVxLm9uKCdyZWFkYWJsZScsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBjaHVuaztcbiAgICAgICAgICAgIHdoaWxlICgoY2h1bmsgPSByZXEucmVhZCgpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgICAgICBjaHVua2xlbiArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcS5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICBpZiAocmV0dXJuZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm5lZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVxLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXR1cm5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBCdWZmZXIuY29uY2F0KGNodW5rcywgY2h1bmtsZW4pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyBhIGJ1ZmZlciBvciBhIHN0cmluZyBpbnRvIEJhc2U2NHVybCBmb3JtYXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyfFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBjb252ZXJ0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgZW5jb2RlZCBzdHJpbmdcbiAgICAgKi9cbiAgICB0b0Jhc2U2NFVSTChkYXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvWz1dKy9nLCAnJykgLy8gcmVtb3ZlICc9J3NcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKSAvLyAnKycg4oaSICctJ1xuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpOyAvLyAnLycg4oaSICdfJ1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBKU09OIFdlYiBUb2tlbiBzaWduZWQgd2l0aCBSUzI1NiAoU0hBMjU2ICsgUlNBKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWQgVGhlIHBheWxvYWQgdG8gaW5jbHVkZSBpbiB0aGUgZ2VuZXJhdGVkIHRva2VuXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgZ2VuZXJhdGVkIGFuZCBzaWduZWQgdG9rZW5cbiAgICAgKi9cbiAgICBqd3RTaWduUlMyNTYocGF5bG9hZCkge1xuICAgICAgICBwYXlsb2FkID0gWyd7XCJhbGdcIjpcIlJTMjU2XCIsXCJ0eXBcIjpcIkpXVFwifScsIEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXS5tYXAodmFsID0+IHRoaXMudG9CYXNlNjRVUkwodmFsKSkuam9pbignLicpO1xuICAgICAgICBsZXQgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZVNpZ24oJ1JTQS1TSEEyNTYnKS51cGRhdGUocGF5bG9hZCkuc2lnbih0aGlzLm9wdGlvbnMucHJpdmF0ZUtleSk7XG4gICAgICAgIHJldHVybiBwYXlsb2FkICsgJy4nICsgdGhpcy50b0Jhc2U2NFVSTChzaWduYXR1cmUpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBYT0F1dGgyO1xuIl0sIm5hbWVzIjpbIlN0cmVhbSIsInJlcXVpcmUiLCJubWZldGNoIiwiY3J5cHRvIiwic2hhcmVkIiwiWE9BdXRoMiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImxvZ2dlciIsInNlcnZpY2VDbGllbnQiLCJwcml2YXRlS2V5IiwidXNlciIsInNldEltbWVkaWF0ZSIsImVtaXQiLCJFcnJvciIsInNlcnZpY2VSZXF1ZXN0VGltZW91dCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJOdW1iZXIiLCJnZXRMb2dnZXIiLCJjb21wb25lbnQiLCJwcm92aXNpb25DYWxsYmFjayIsImFjY2Vzc1VybCIsImN1c3RvbUhlYWRlcnMiLCJjdXN0b21QYXJhbXMiLCJhY2Nlc3NUb2tlbiIsImV4cGlyZXMiLCJ0aW1lb3V0IiwiRGF0ZSIsIm5vdyIsImdldFRva2VuIiwicmVuZXciLCJjYWxsYmFjayIsImdlbmVyYXRlQ2FsbGJhY2siLCJhcmdzIiwiZXJyb3IiLCJlcnIiLCJ0bngiLCJhY3Rpb24iLCJpbmZvIiwiZ2VuZXJhdGVUb2tlbiIsInVwZGF0ZVRva2VuIiwidXJsT3B0aW9ucyIsImxvZ2dlZFVybE9wdGlvbnMiLCJpYXQiLCJmbG9vciIsInRva2VuRGF0YSIsImlzcyIsInNjb3BlIiwic3ViIiwiYXVkIiwiZXhwIiwidG9rZW4iLCJqd3RTaWduUlMyNTYiLCJncmFudF90eXBlIiwiYXNzZXJ0aW9uIiwicmVmcmVzaFRva2VuIiwiY2xpZW50X2lkIiwiY2xpZW50SWQiLCJjbGllbnRfc2VjcmV0IiwiY2xpZW50U2VjcmV0IiwicmVmcmVzaF90b2tlbiIsInN1YnN0ciIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZGVidWciLCJKU09OIiwic3RyaW5naWZ5IiwicG9zdFJlcXVlc3QiLCJib2R5IiwiZGF0YSIsInBhcnNlIiwidG9TdHJpbmciLCJFIiwibG9nRGF0YSIsImVycm9yTWVzc2FnZSIsImVycm9yX2Rlc2NyaXB0aW9uIiwiZXJyb3JfdXJpIiwiYWNjZXNzX3Rva2VuIiwiZXhwaXJlc19pbiIsImJ1aWxkWE9BdXRoMlRva2VuIiwiYXV0aERhdGEiLCJCdWZmZXIiLCJmcm9tIiwiam9pbiIsInVybCIsInBheWxvYWQiLCJwYXJhbXMiLCJyZXR1cm5lZCIsImNodW5rcyIsImNodW5rbGVuIiwicmVxIiwibWV0aG9kIiwiaGVhZGVycyIsImFsbG93RXJyb3JSZXNwb25zZSIsIm9uIiwiY2h1bmsiLCJyZWFkIiwicHVzaCIsImxlbmd0aCIsIm9uY2UiLCJjb25jYXQiLCJ0b0Jhc2U2NFVSTCIsInJlcGxhY2UiLCJtYXAiLCJ2YWwiLCJzaWduYXR1cmUiLCJjcmVhdGVTaWduIiwidXBkYXRlIiwic2lnbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/well-known/services.json":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/well-known/services.json ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"126":{"host":"smtp.126.com","port":465,"secure":true},"163":{"host":"smtp.163.com","port":465,"secure":true},"1und1":{"host":"smtp.1und1.de","port":465,"secure":true,"authMethod":"LOGIN"},"Aliyun":{"domains":["aliyun.com"],"host":"smtp.aliyun.com","port":465,"secure":true},"AOL":{"domains":["aol.com"],"host":"smtp.aol.com","port":587},"Bluewin":{"host":"smtpauths.bluewin.ch","domains":["bluewin.ch"],"port":465},"DebugMail":{"host":"debugmail.io","port":25},"DynectEmail":{"aliases":["Dynect"],"host":"smtp.dynect.net","port":25},"Ethereal":{"aliases":["ethereal.email"],"host":"smtp.ethereal.email","port":587},"FastMail":{"domains":["fastmail.fm"],"host":"smtp.fastmail.com","port":465,"secure":true},"Forward Email":{"aliases":["FE","ForwardEmail"],"domains":["forwardemail.net"],"host":"smtp.forwardemail.net","port":465,"secure":true},"GandiMail":{"aliases":["Gandi","Gandi Mail"],"host":"mail.gandi.net","port":587},"Gmail":{"aliases":["Google Mail"],"domains":["gmail.com","googlemail.com"],"host":"smtp.gmail.com","port":465,"secure":true},"Godaddy":{"host":"smtpout.secureserver.net","port":25},"GodaddyAsia":{"host":"smtp.asia.secureserver.net","port":25},"GodaddyEurope":{"host":"smtp.europe.secureserver.net","port":25},"hot.ee":{"host":"mail.hot.ee"},"Hotmail":{"aliases":["Outlook","Outlook.com","Hotmail.com"],"domains":["hotmail.com","outlook.com"],"host":"smtp-mail.outlook.com","port":587},"iCloud":{"aliases":["Me","Mac"],"domains":["me.com","mac.com"],"host":"smtp.mail.me.com","port":587},"Infomaniak":{"host":"mail.infomaniak.com","domains":["ik.me","ikmail.com","etik.com"],"port":587},"mail.ee":{"host":"smtp.mail.ee"},"Mail.ru":{"host":"smtp.mail.ru","port":465,"secure":true},"Mailcatch.app":{"host":"sandbox-smtp.mailcatch.app","port":2525},"Maildev":{"port":1025,"ignoreTLS":true},"Mailgun":{"host":"smtp.mailgun.org","port":465,"secure":true},"Mailjet":{"host":"in.mailjet.com","port":587},"Mailosaur":{"host":"mailosaur.io","port":25},"Mailtrap":{"host":"smtp.mailtrap.io","port":2525},"Mandrill":{"host":"smtp.mandrillapp.com","port":587},"Naver":{"host":"smtp.naver.com","port":587},"One":{"host":"send.one.com","port":465,"secure":true},"OpenMailBox":{"aliases":["OMB","openmailbox.org"],"host":"smtp.openmailbox.org","port":465,"secure":true},"Outlook365":{"host":"smtp.office365.com","port":587,"secure":false},"OhMySMTP":{"host":"smtp.ohmysmtp.com","port":587,"secure":false},"Postmark":{"aliases":["PostmarkApp"],"host":"smtp.postmarkapp.com","port":2525},"qiye.aliyun":{"host":"smtp.mxhichina.com","port":"465","secure":true},"QQ":{"domains":["qq.com"],"host":"smtp.qq.com","port":465,"secure":true},"QQex":{"aliases":["QQ Enterprise"],"domains":["exmail.qq.com"],"host":"smtp.exmail.qq.com","port":465,"secure":true},"SendCloud":{"host":"smtp.sendcloud.net","port":2525},"SendGrid":{"host":"smtp.sendgrid.net","port":587},"SendinBlue":{"aliases":["Brevo"],"host":"smtp-relay.brevo.com","port":587},"SendPulse":{"host":"smtp-pulse.com","port":465,"secure":true},"SES":{"host":"email-smtp.us-east-1.amazonaws.com","port":465,"secure":true},"SES-US-EAST-1":{"host":"email-smtp.us-east-1.amazonaws.com","port":465,"secure":true},"SES-US-WEST-2":{"host":"email-smtp.us-west-2.amazonaws.com","port":465,"secure":true},"SES-EU-WEST-1":{"host":"email-smtp.eu-west-1.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTH-1":{"host":"email-smtp.ap-south-1.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-1":{"host":"email-smtp.ap-northeast-1.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-2":{"host":"email-smtp.ap-northeast-2.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-3":{"host":"email-smtp.ap-northeast-3.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTHEAST-1":{"host":"email-smtp.ap-southeast-1.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTHEAST-2":{"host":"email-smtp.ap-southeast-2.amazonaws.com","port":465,"secure":true},"Sparkpost":{"aliases":["SparkPost","SparkPost Mail"],"domains":["sparkpost.com"],"host":"smtp.sparkpostmail.com","port":587,"secure":false},"Tipimail":{"host":"smtp.tipimail.com","port":587},"Yahoo":{"domains":["yahoo.com"],"host":"smtp.mail.yahoo.com","port":465,"secure":true},"Yandex":{"domains":["yandex.ru"],"host":"smtp.yandex.ru","port":465,"secure":true},"Zoho":{"host":"smtp.zoho.com","port":465,"secure":true,"authMethod":"LOGIN"}}');

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/package.json":
/*!**********************************************!*\
  !*** ./node_modules/nodemailer/package.json ***!
  \**********************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"nodemailer","version":"6.9.13","description":"Easy as cake e-mail sending from your Node.js applications","main":"lib/nodemailer.js","scripts":{"test":"node --test --test-concurrency=1 test/**/*.test.js test/**/*-test.js","test:coverage":"c8 node --test --test-concurrency=1 test/**/*.test.js test/**/*-test.js","lint":"eslint .","update":"rm -rf node_modules/ package-lock.json && ncu -u && npm install"},"repository":{"type":"git","url":"https://github.com/nodemailer/nodemailer.git"},"keywords":["Nodemailer"],"author":"Andris Reinman","license":"MIT-0","bugs":{"url":"https://github.com/nodemailer/nodemailer/issues"},"homepage":"https://nodemailer.com/","devDependencies":{"@aws-sdk/client-ses":"3.529.1","bunyan":"1.8.15","c8":"9.1.0","eslint":"8.57.0","eslint-config-nodemailer":"1.2.0","eslint-config-prettier":"9.1.0","libbase64":"1.3.0","libmime":"5.3.4","libqp":"2.1.0","nodemailer-ntlm-auth":"1.0.4","proxy":"1.0.2","proxy-test-server":"1.0.0","smtp-server":"3.13.3"},"engines":{"node":">=6.0.0"}}');

/***/ })

};
;